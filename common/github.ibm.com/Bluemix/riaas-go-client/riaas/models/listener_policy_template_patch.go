// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListenerPolicyTemplatePatch ListenerPolicyTemplatePatch
// swagger:model ListenerPolicyTemplatePatch
type ListenerPolicyTemplatePatch struct {

	// The user-defined name for this policy. Names must be unique within the load balancer listener the policy resides in.
	Name string `json:"name,omitempty"`

	// Priority of the policy. Lower value indicates higher priority.
	Priority int64 `json:"priority,omitempty"`

	// target
	Target *ListenerPolicyTemplatePatchTarget `json:"target,omitempty"`
}

// Validate validates this listener policy template patch
func (m *ListenerPolicyTemplatePatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListenerPolicyTemplatePatch) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListenerPolicyTemplatePatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListenerPolicyTemplatePatch) UnmarshalBinary(b []byte) error {
	var res ListenerPolicyTemplatePatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ListenerPolicyTemplatePatchTarget listener policy template patch target
// swagger:model ListenerPolicyTemplatePatchTarget
type ListenerPolicyTemplatePatchTarget struct {

	// The pool's canonical URL.
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The http status code in the redirect response.
	// Enum: [301 302 303 307 308]
	HTTPStatusCode int64 `json:"http_status_code,omitempty"`

	// The unique identifier for this load balancer pool
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The redirect target URL.
	URL string `json:"url,omitempty"`
}

// Validate validates this listener policy template patch target
func (m *ListenerPolicyTemplatePatchTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPStatusCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListenerPolicyTemplatePatchTarget) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("target"+"."+"href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

var listenerPolicyTemplatePatchTargetTypeHTTPStatusCodePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[301,302,303,307,308]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerPolicyTemplatePatchTargetTypeHTTPStatusCodePropEnum = append(listenerPolicyTemplatePatchTargetTypeHTTPStatusCodePropEnum, v)
	}
}

// prop value enum
func (m *ListenerPolicyTemplatePatchTarget) validateHTTPStatusCodeEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, listenerPolicyTemplatePatchTargetTypeHTTPStatusCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ListenerPolicyTemplatePatchTarget) validateHTTPStatusCode(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPStatusCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPStatusCodeEnum("target"+"."+"http_status_code", "body", m.HTTPStatusCode); err != nil {
		return err
	}

	return nil
}

func (m *ListenerPolicyTemplatePatchTarget) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("target"+"."+"id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListenerPolicyTemplatePatchTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListenerPolicyTemplatePatchTarget) UnmarshalBinary(b []byte) error {
	var res ListenerPolicyTemplatePatchTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
