// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListenerPolicyRuleTemplate listener policy rule template
// swagger:model ListenerPolicyRuleTemplate
type ListenerPolicyRuleTemplate struct {

	// The condition of the rule.
	// Enum: [contains equals matches_regex]
	Condition string `json:"condition,omitempty"`

	// HTTP header field. This is only applicable to "header" rule type.
	Field string `json:"field,omitempty"`

	// The type of the rule.
	// Enum: [path hostname header]
	Type string `json:"type,omitempty"`

	// Value to be matched for rule condition
	Value string `json:"value,omitempty"`
}

// Validate validates this listener policy rule template
func (m *ListenerPolicyRuleTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listenerPolicyRuleTemplateTypeConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["contains","equals","matches_regex"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerPolicyRuleTemplateTypeConditionPropEnum = append(listenerPolicyRuleTemplateTypeConditionPropEnum, v)
	}
}

const (

	// ListenerPolicyRuleTemplateConditionContains captures enum value "contains"
	ListenerPolicyRuleTemplateConditionContains string = "contains"

	// ListenerPolicyRuleTemplateConditionEquals captures enum value "equals"
	ListenerPolicyRuleTemplateConditionEquals string = "equals"

	// ListenerPolicyRuleTemplateConditionMatchesRegex captures enum value "matches_regex"
	ListenerPolicyRuleTemplateConditionMatchesRegex string = "matches_regex"
)

// prop value enum
func (m *ListenerPolicyRuleTemplate) validateConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, listenerPolicyRuleTemplateTypeConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ListenerPolicyRuleTemplate) validateCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	// value enum
	if err := m.validateConditionEnum("condition", "body", m.Condition); err != nil {
		return err
	}

	return nil
}

var listenerPolicyRuleTemplateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["path","hostname","header"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerPolicyRuleTemplateTypeTypePropEnum = append(listenerPolicyRuleTemplateTypeTypePropEnum, v)
	}
}

const (

	// ListenerPolicyRuleTemplateTypePath captures enum value "path"
	ListenerPolicyRuleTemplateTypePath string = "path"

	// ListenerPolicyRuleTemplateTypeHostname captures enum value "hostname"
	ListenerPolicyRuleTemplateTypeHostname string = "hostname"

	// ListenerPolicyRuleTemplateTypeHeader captures enum value "header"
	ListenerPolicyRuleTemplateTypeHeader string = "header"
)

// prop value enum
func (m *ListenerPolicyRuleTemplate) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, listenerPolicyRuleTemplateTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ListenerPolicyRuleTemplate) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListenerPolicyRuleTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListenerPolicyRuleTemplate) UnmarshalBinary(b []byte) error {
	var res ListenerPolicyRuleTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
