// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Instance instance
// swagger:model instance
type Instance struct {

	// boot volume attachment
	BootVolumeAttachment *VolumeAttachmentReference `json:"boot_volume_attachment,omitempty"`

	// The date and time that the instance was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The CRN for this instance
	Crn string `json:"crn,omitempty"`

	// gpu
	Gpu *InstanceGpu `json:"gpu,omitempty"`

	// The URL for this instance
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The unique identifier for this instance
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// image
	Image *ResourceReference `json:"image,omitempty"`

	// The amount of memory in megabytes
	// Maximum: 524288
	// Minimum: 512
	// Multiple Of: 256
	Memory int64 `json:"memory,omitempty"`

	// The user-defined name for this instance
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// Collection of the instance's network interfaces, not including the primary network interface
	NetworkInterfaces []*NetworkInterfaceReference `json:"network_interfaces,omitempty"`

	// primary network interface
	PrimaryNetworkInterface *NetworkInterfaceReference `json:"primary_network_interface,omitempty"`

	// profile
	Profile *ResourceReference `json:"profile,omitempty"`

	// resource group
	ResourceGroup *ResourceReference `json:"resource_group,omitempty"`

	// The status of the instance
	// Enum: [stopped starting running pausing paused resuming stopping restarting]
	Status string `json:"status,omitempty"`

	// vcpu
	Vcpu *InstanceVcpu `json:"vcpu,omitempty"`

	// Collection of volume interfaces
	VolumeAttachments []*VolumeAttachmentReference `json:"volume_attachments,omitempty"`

	// vpc
	Vpc *ResourceReference `json:"vpc,omitempty"`

	// zone
	Zone *InstanceZone `json:"zone,omitempty"`
}

// Validate validates this instance
func (m *Instance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootVolumeAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryNetworkInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) validateBootVolumeAttachment(formats strfmt.Registry) error {

	if swag.IsZero(m.BootVolumeAttachment) { // not required
		return nil
	}

	if m.BootVolumeAttachment != nil {
		if err := m.BootVolumeAttachment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("boot_volume_attachment")
			}
			return err
		}
	}

	return nil
}

func (m *Instance) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateGpu(formats strfmt.Registry) error {

	if swag.IsZero(m.Gpu) { // not required
		return nil
	}

	if m.Gpu != nil {
		if err := m.Gpu.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpu")
			}
			return err
		}
	}

	return nil
}

func (m *Instance) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *Instance) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if err := validate.MinimumInt("memory", "body", int64(m.Memory), 512, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("memory", "body", int64(m.Memory), 524288, false); err != nil {
		return err
	}

	if err := validate.MultipleOf("memory", "body", float64(m.Memory), 256); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateNetworkInterfaces(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkInterfaces); i++ {
		if swag.IsZero(m.NetworkInterfaces[i]) { // not required
			continue
		}

		if m.NetworkInterfaces[i] != nil {
			if err := m.NetworkInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("network_interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Instance) validatePrimaryNetworkInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryNetworkInterface) { // not required
		return nil
	}

	if m.PrimaryNetworkInterface != nil {
		if err := m.PrimaryNetworkInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary_network_interface")
			}
			return err
		}
	}

	return nil
}

func (m *Instance) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	if m.Profile != nil {
		if err := m.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

func (m *Instance) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {
		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_group")
			}
			return err
		}
	}

	return nil
}

var instanceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stopped","starting","running","pausing","paused","resuming","stopping","restarting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceTypeStatusPropEnum = append(instanceTypeStatusPropEnum, v)
	}
}

const (

	// InstanceStatusStopped captures enum value "stopped"
	InstanceStatusStopped string = "stopped"

	// InstanceStatusStarting captures enum value "starting"
	InstanceStatusStarting string = "starting"

	// InstanceStatusRunning captures enum value "running"
	InstanceStatusRunning string = "running"

	// InstanceStatusPausing captures enum value "pausing"
	InstanceStatusPausing string = "pausing"

	// InstanceStatusPaused captures enum value "paused"
	InstanceStatusPaused string = "paused"

	// InstanceStatusResuming captures enum value "resuming"
	InstanceStatusResuming string = "resuming"

	// InstanceStatusStopping captures enum value "stopping"
	InstanceStatusStopping string = "stopping"

	// InstanceStatusRestarting captures enum value "restarting"
	InstanceStatusRestarting string = "restarting"
)

// prop value enum
func (m *Instance) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Instance) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateVcpu(formats strfmt.Registry) error {

	if swag.IsZero(m.Vcpu) { // not required
		return nil
	}

	if m.Vcpu != nil {
		if err := m.Vcpu.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcpu")
			}
			return err
		}
	}

	return nil
}

func (m *Instance) validateVolumeAttachments(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeAttachments) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeAttachments); i++ {
		if swag.IsZero(m.VolumeAttachments[i]) { // not required
			continue
		}

		if m.VolumeAttachments[i] != nil {
			if err := m.VolumeAttachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volume_attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Instance) validateVpc(formats strfmt.Registry) error {

	if swag.IsZero(m.Vpc) { // not required
		return nil
	}

	if m.Vpc != nil {
		if err := m.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

func (m *Instance) validateZone(formats strfmt.Registry) error {

	if swag.IsZero(m.Zone) { // not required
		return nil
	}

	if m.Zone != nil {
		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Instance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instance) UnmarshalBinary(b []byte) error {
	var res Instance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InstanceGpu GPU
// swagger:model InstanceGpu
type InstanceGpu struct {

	// The number of logical GPU cores per GPU
	// Minimum: 1
	Cores int64 `json:"cores,omitempty"`

	// The number of GPUs
	// Minimum: 1
	Count int64 `json:"count,omitempty"`

	// The manufacturer of the GPU
	// Enum: [nvidia]
	Manufacturer string `json:"manufacturer,omitempty"`

	// The amount of memory in megabytes
	// Maximum: 524288
	// Minimum: 512
	// Multiple Of: 256
	Memory int64 `json:"memory,omitempty"`

	// The model number of the GPU
	// Enum: [k40 k80]
	Model string `json:"model,omitempty"`
}

// Validate validates this instance gpu
func (m *InstanceGpu) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManufacturer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceGpu) validateCores(formats strfmt.Registry) error {

	if swag.IsZero(m.Cores) { // not required
		return nil
	}

	if err := validate.MinimumInt("gpu"+"."+"cores", "body", int64(m.Cores), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *InstanceGpu) validateCount(formats strfmt.Registry) error {

	if swag.IsZero(m.Count) { // not required
		return nil
	}

	if err := validate.MinimumInt("gpu"+"."+"count", "body", int64(m.Count), 1, false); err != nil {
		return err
	}

	return nil
}

var instanceGpuTypeManufacturerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["nvidia"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceGpuTypeManufacturerPropEnum = append(instanceGpuTypeManufacturerPropEnum, v)
	}
}

const (

	// InstanceGpuManufacturerNvidia captures enum value "nvidia"
	InstanceGpuManufacturerNvidia string = "nvidia"
)

// prop value enum
func (m *InstanceGpu) validateManufacturerEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceGpuTypeManufacturerPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceGpu) validateManufacturer(formats strfmt.Registry) error {

	if swag.IsZero(m.Manufacturer) { // not required
		return nil
	}

	// value enum
	if err := m.validateManufacturerEnum("gpu"+"."+"manufacturer", "body", m.Manufacturer); err != nil {
		return err
	}

	return nil
}

func (m *InstanceGpu) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if err := validate.MinimumInt("gpu"+"."+"memory", "body", int64(m.Memory), 512, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("gpu"+"."+"memory", "body", int64(m.Memory), 524288, false); err != nil {
		return err
	}

	if err := validate.MultipleOf("gpu"+"."+"memory", "body", float64(m.Memory), 256); err != nil {
		return err
	}

	return nil
}

var instanceGpuTypeModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["k40","k80"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceGpuTypeModelPropEnum = append(instanceGpuTypeModelPropEnum, v)
	}
}

const (

	// InstanceGpuModelK40 captures enum value "k40"
	InstanceGpuModelK40 string = "k40"

	// InstanceGpuModelK80 captures enum value "k80"
	InstanceGpuModelK80 string = "k80"
)

// prop value enum
func (m *InstanceGpu) validateModelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceGpuTypeModelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceGpu) validateModel(formats strfmt.Registry) error {

	if swag.IsZero(m.Model) { // not required
		return nil
	}

	// value enum
	if err := m.validateModelEnum("gpu"+"."+"model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceGpu) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceGpu) UnmarshalBinary(b []byte) error {
	var res InstanceGpu
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InstanceVcpu VCPU
// swagger:model InstanceVcpu
type InstanceVcpu struct {

	// The VCPU architecture
	// Required: true
	Architecture *string `json:"architecture"`

	// The number of VCPUs assigned to the instance
	// Minimum: 1
	Cores int64 `json:"cores,omitempty"`

	// The number of VCPUs assigned to the instance
	// Required: true
	// Minimum: 1
	Count *int64 `json:"count"`
}

// Validate validates this instance vcpu
func (m *InstanceVcpu) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceVcpu) validateArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("vcpu"+"."+"architecture", "body", m.Architecture); err != nil {
		return err
	}

	return nil
}

func (m *InstanceVcpu) validateCores(formats strfmt.Registry) error {

	if swag.IsZero(m.Cores) { // not required
		return nil
	}

	if err := validate.MinimumInt("vcpu"+"."+"cores", "body", int64(m.Cores), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *InstanceVcpu) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("vcpu"+"."+"count", "body", m.Count); err != nil {
		return err
	}

	if err := validate.MinimumInt("vcpu"+"."+"count", "body", int64(*m.Count), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceVcpu) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceVcpu) UnmarshalBinary(b []byte) error {
	var res InstanceVcpu
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InstanceZone ZoneReference
//
// The zone the instance resides in
// swagger:model InstanceZone
type InstanceZone struct {

	// The URL for this zone
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The name for this zone
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this instance zone
func (m *InstanceZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceZone) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("zone"+"."+"href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *InstanceZone) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("zone"+"."+"name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceZone) UnmarshalBinary(b []byte) error {
	var res InstanceZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
