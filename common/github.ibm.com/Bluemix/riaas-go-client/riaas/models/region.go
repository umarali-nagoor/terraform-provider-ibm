// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Region Region
// swagger:model region
type Region struct {

	// The API endpoint for this region.
	// Required: true
	Endpoint string `json:"endpoint"`

	// The URL for this region
	// Required: true
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href"`

	// The name for this region
	// Required: true
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name"`

	// status
	// Required: true
	// Enum: [available unavailable]
	Status string `json:"status"`
}

// Validate validates this region
func (m *Region) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Region) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.RequiredString("endpoint", "body", string(m.Endpoint)); err != nil {
		return err
	}

	return nil
}

func (m *Region) validateHref(formats strfmt.Registry) error {

	if err := validate.RequiredString("href", "body", string(m.Href)); err != nil {
		return err
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *Region) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var regionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["available","unavailable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		regionTypeStatusPropEnum = append(regionTypeStatusPropEnum, v)
	}
}

const (

	// RegionStatusAvailable captures enum value "available"
	RegionStatusAvailable string = "available"

	// RegionStatusUnavailable captures enum value "unavailable"
	RegionStatusUnavailable string = "unavailable"
)

// prop value enum
func (m *Region) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, regionTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Region) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Region) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Region) UnmarshalBinary(b []byte) error {
	var res Region
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
