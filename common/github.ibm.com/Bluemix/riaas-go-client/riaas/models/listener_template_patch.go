// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListenerTemplatePatch listener template patch
// swagger:model ListenerTemplatePatch
type ListenerTemplatePatch struct {

	// certificate instance
	CertificateInstance *ListenerTemplatePatchCertificateInstance `json:"certificate_instance,omitempty"`

	// The connection limit of the listener.
	// Maximum: 15000
	// Minimum: 1
	ConnectionLimit int64 `json:"connection_limit,omitempty"`

	// default pool
	DefaultPool *ListenerTemplatePatchDefaultPool `json:"default_pool,omitempty"`

	// The listener port number.
	// Maximum: 65535
	// Minimum: 1
	Port int64 `json:"port,omitempty"`

	// The listener protocol.
	// Enum: [http https tcp]
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this listener template patch
func (m *ListenerTemplatePatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListenerTemplatePatch) validateCertificateInstance(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateInstance) { // not required
		return nil
	}

	if m.CertificateInstance != nil {
		if err := m.CertificateInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate_instance")
			}
			return err
		}
	}

	return nil
}

func (m *ListenerTemplatePatch) validateConnectionLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("connection_limit", "body", int64(m.ConnectionLimit), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("connection_limit", "body", int64(m.ConnectionLimit), 15000, false); err != nil {
		return err
	}

	return nil
}

func (m *ListenerTemplatePatch) validateDefaultPool(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultPool) { // not required
		return nil
	}

	if m.DefaultPool != nil {
		if err := m.DefaultPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_pool")
			}
			return err
		}
	}

	return nil
}

func (m *ListenerTemplatePatch) validatePort(formats strfmt.Registry) error {

	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("port", "body", int64(m.Port), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

var listenerTemplatePatchTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","https","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerTemplatePatchTypeProtocolPropEnum = append(listenerTemplatePatchTypeProtocolPropEnum, v)
	}
}

const (

	// ListenerTemplatePatchProtocolHTTP captures enum value "http"
	ListenerTemplatePatchProtocolHTTP string = "http"

	// ListenerTemplatePatchProtocolHTTPS captures enum value "https"
	ListenerTemplatePatchProtocolHTTPS string = "https"

	// ListenerTemplatePatchProtocolTCP captures enum value "tcp"
	ListenerTemplatePatchProtocolTCP string = "tcp"
)

// prop value enum
func (m *ListenerTemplatePatch) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, listenerTemplatePatchTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ListenerTemplatePatch) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListenerTemplatePatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListenerTemplatePatch) UnmarshalBinary(b []byte) error {
	var res ListenerTemplatePatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ListenerTemplatePatchCertificateInstance The certificate instance used for SSL termination. It is applicable only to `https` protocol.
// swagger:model ListenerTemplatePatchCertificateInstance
type ListenerTemplatePatchCertificateInstance struct {

	// The ceritificate instance's CRN
	Crn string `json:"crn,omitempty"`
}

// Validate validates this listener template patch certificate instance
func (m *ListenerTemplatePatchCertificateInstance) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ListenerTemplatePatchCertificateInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListenerTemplatePatchCertificateInstance) UnmarshalBinary(b []byte) error {
	var res ListenerTemplatePatchCertificateInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ListenerTemplatePatchDefaultPool The default pool associated with the listener.
// swagger:model ListenerTemplatePatchDefaultPool
type ListenerTemplatePatchDefaultPool struct {

	// The pool's canonical URL.
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The pool's unique identifier.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this listener template patch default pool
func (m *ListenerTemplatePatchDefaultPool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListenerTemplatePatchDefaultPool) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("default_pool"+"."+"href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *ListenerTemplatePatchDefaultPool) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("default_pool"+"."+"id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListenerTemplatePatchDefaultPool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListenerTemplatePatchDefaultPool) UnmarshalBinary(b []byte) error {
	var res ListenerTemplatePatchDefaultPool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
