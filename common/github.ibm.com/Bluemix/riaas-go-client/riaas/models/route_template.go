// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouteTemplate RouteTemplate
// swagger:model RouteTemplate
type RouteTemplate struct {

	// destination
	// Required: true
	Destination CIDR `json:"destination"`

	// The user-defined name for this route. If unspecified, the name will be a hyphenated list of randomly-selected words. Names must be unique within the VPC the route resides in.
	// Max Length: 63
	// Min Length: 1
	// Pattern: ^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$
	Name string `json:"name,omitempty"`

	// next hop
	// Required: true
	NextHop RouteNextHopIP `json:"next_hop"`

	// The zone for which this route applies.
	// Required: true
	Zone *ZoneIdentityByName `json:"zone"`
}

// Validate validates this route template
func (m *RouteTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextHop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteTemplate) validateDestination(formats strfmt.Registry) error {

	if err := m.Destination.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("destination")
		}
		return err
	}

	return nil
}

func (m *RouteTemplate) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 63); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$`); err != nil {
		return err
	}

	return nil
}

func (m *RouteTemplate) validateNextHop(formats strfmt.Registry) error {

	if err := m.NextHop.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("next_hop")
		}
		return err
	}

	return nil
}

func (m *RouteTemplate) validateZone(formats strfmt.Registry) error {

	if err := validate.Required("zone", "body", m.Zone); err != nil {
		return err
	}

	if m.Zone != nil {
		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RouteTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteTemplate) UnmarshalBinary(b []byte) error {
	var res RouteTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
