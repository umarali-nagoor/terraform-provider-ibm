// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VPNGatewayConnection v p n gateway connection
// swagger:model VPNGatewayConnection
type VPNGatewayConnection struct {

	// If set to false, the VPN connection is shut down
	AdminStateUp bool `json:"admin_state_up,omitempty"`

	// The authentication mode. Only `psk` is currently supported.
	// Enum: [psk]
	AuthenticationMode string `json:"authentication_mode,omitempty"`

	// The date and time that this VPN connection was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// dead peer detection
	DeadPeerDetection *VPNGatewayConnectionDPD `json:"dead_peer_detection,omitempty"`

	// The VPN connection's canonical URL
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The unique identifier of a VPN connection
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// ike policy
	IkePolicy *IKEPolicyIdentity `json:"ike_policy,omitempty"`

	// ipsec policy
	IpsecPolicy *IpsecPolicyIdentity `json:"ipsec_policy,omitempty"`

	// A collection of local CIDRs for this resource
	LocalCidrs []string `json:"local_cidrs"`

	// The name given to this VPN connection
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// The IP address of the peer VPN gateway
	PeerAddress string `json:"peer_address,omitempty"`

	// A collection of peer CIDRs for this resource
	PeerCidrs []string `json:"peer_cidrs"`

	// The preshared key
	Psk string `json:"psk,omitempty"`

	// The routing mode. Only `policy` is currently supported.
	// Enum: [policy]
	RouteMode string `json:"route_mode,omitempty"`

	// The status of a VPN connection
	// Enum: [up down]
	Status string `json:"status,omitempty"`
}

// Validate validates this v p n gateway connection
func (m *VPNGatewayConnection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeadPeerDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIkePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIpsecPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vPNGatewayConnectionTypeAuthenticationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["psk"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vPNGatewayConnectionTypeAuthenticationModePropEnum = append(vPNGatewayConnectionTypeAuthenticationModePropEnum, v)
	}
}

const (

	// VPNGatewayConnectionAuthenticationModePsk captures enum value "psk"
	VPNGatewayConnectionAuthenticationModePsk string = "psk"
)

// prop value enum
func (m *VPNGatewayConnection) validateAuthenticationModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vPNGatewayConnectionTypeAuthenticationModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VPNGatewayConnection) validateAuthenticationMode(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationModeEnum("authentication_mode", "body", m.AuthenticationMode); err != nil {
		return err
	}

	return nil
}

func (m *VPNGatewayConnection) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VPNGatewayConnection) validateDeadPeerDetection(formats strfmt.Registry) error {

	if swag.IsZero(m.DeadPeerDetection) { // not required
		return nil
	}

	if m.DeadPeerDetection != nil {
		if err := m.DeadPeerDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dead_peer_detection")
			}
			return err
		}
	}

	return nil
}

func (m *VPNGatewayConnection) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *VPNGatewayConnection) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VPNGatewayConnection) validateIkePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.IkePolicy) { // not required
		return nil
	}

	if m.IkePolicy != nil {
		if err := m.IkePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ike_policy")
			}
			return err
		}
	}

	return nil
}

func (m *VPNGatewayConnection) validateIpsecPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.IpsecPolicy) { // not required
		return nil
	}

	if m.IpsecPolicy != nil {
		if err := m.IpsecPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsec_policy")
			}
			return err
		}
	}

	return nil
}

func (m *VPNGatewayConnection) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var vPNGatewayConnectionTypeRouteModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vPNGatewayConnectionTypeRouteModePropEnum = append(vPNGatewayConnectionTypeRouteModePropEnum, v)
	}
}

const (

	// VPNGatewayConnectionRouteModePolicy captures enum value "policy"
	VPNGatewayConnectionRouteModePolicy string = "policy"
)

// prop value enum
func (m *VPNGatewayConnection) validateRouteModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vPNGatewayConnectionTypeRouteModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VPNGatewayConnection) validateRouteMode(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateRouteModeEnum("route_mode", "body", m.RouteMode); err != nil {
		return err
	}

	return nil
}

var vPNGatewayConnectionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["up","down"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vPNGatewayConnectionTypeStatusPropEnum = append(vPNGatewayConnectionTypeStatusPropEnum, v)
	}
}

const (

	// VPNGatewayConnectionStatusUp captures enum value "up"
	VPNGatewayConnectionStatusUp string = "up"

	// VPNGatewayConnectionStatusDown captures enum value "down"
	VPNGatewayConnectionStatusDown string = "down"
)

// prop value enum
func (m *VPNGatewayConnection) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vPNGatewayConnectionTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VPNGatewayConnection) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VPNGatewayConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VPNGatewayConnection) UnmarshalBinary(b []byte) error {
	var res VPNGatewayConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
