// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListenerPolicy listener policy
// swagger:model ListenerPolicy
type ListenerPolicy struct {

	// The policy action.
	// Enum: [forward redirect reject]
	Action string `json:"action,omitempty"`

	// The date and time that this policy was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The listener policy's canonical URL.
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The policys unique identifier.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this policy
	// Pattern: ^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$
	Name string `json:"name,omitempty"`

	// Priority of the policy. Lower value indicates higher priority.
	Priority int64 `json:"priority,omitempty"`

	// The provisioning status of this policy
	// Enum: [active create_pending update_pending delete_pending maintenance_pending failed]
	ProvisioningStatus string `json:"provisioning_status,omitempty"`

	// The rules of this policy
	Rules []*ListenerPolicyRuleReference `json:"rules"`

	// PoolReference is in the response if action is forward. ListenerPolicyRedirectUrl is in the response if action is redirect.
	Target *ListenerPolicyTargetReference `json:"target,omitempty"`
}

// Validate validates this listener policy
func (m *ListenerPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listenerPolicyTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["forward","redirect","reject"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerPolicyTypeActionPropEnum = append(listenerPolicyTypeActionPropEnum, v)
	}
}

const (

	// ListenerPolicyActionForward captures enum value "forward"
	ListenerPolicyActionForward string = "forward"

	// ListenerPolicyActionRedirect captures enum value "redirect"
	ListenerPolicyActionRedirect string = "redirect"

	// ListenerPolicyActionReject captures enum value "reject"
	ListenerPolicyActionReject string = "reject"
)

// prop value enum
func (m *ListenerPolicy) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, listenerPolicyTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ListenerPolicy) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *ListenerPolicy) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListenerPolicy) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *ListenerPolicy) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListenerPolicy) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$`); err != nil {
		return err
	}

	return nil
}

var listenerPolicyTypeProvisioningStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","create_pending","update_pending","delete_pending","maintenance_pending","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerPolicyTypeProvisioningStatusPropEnum = append(listenerPolicyTypeProvisioningStatusPropEnum, v)
	}
}

const (

	// ListenerPolicyProvisioningStatusActive captures enum value "active"
	ListenerPolicyProvisioningStatusActive string = "active"

	// ListenerPolicyProvisioningStatusCreatePending captures enum value "create_pending"
	ListenerPolicyProvisioningStatusCreatePending string = "create_pending"

	// ListenerPolicyProvisioningStatusUpdatePending captures enum value "update_pending"
	ListenerPolicyProvisioningStatusUpdatePending string = "update_pending"

	// ListenerPolicyProvisioningStatusDeletePending captures enum value "delete_pending"
	ListenerPolicyProvisioningStatusDeletePending string = "delete_pending"

	// ListenerPolicyProvisioningStatusMaintenancePending captures enum value "maintenance_pending"
	ListenerPolicyProvisioningStatusMaintenancePending string = "maintenance_pending"

	// ListenerPolicyProvisioningStatusFailed captures enum value "failed"
	ListenerPolicyProvisioningStatusFailed string = "failed"
)

// prop value enum
func (m *ListenerPolicy) validateProvisioningStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, listenerPolicyTypeProvisioningStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ListenerPolicy) validateProvisioningStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ProvisioningStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProvisioningStatusEnum("provisioning_status", "body", m.ProvisioningStatus); err != nil {
		return err
	}

	return nil
}

func (m *ListenerPolicy) validateRules(formats strfmt.Registry) error {

	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListenerPolicy) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListenerPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListenerPolicy) UnmarshalBinary(b []byte) error {
	var res ListenerPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
