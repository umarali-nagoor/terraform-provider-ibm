// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListenerPolicyRule listener policy rule
// swagger:model ListenerPolicyRule
type ListenerPolicyRule struct {

	// The condition of the rule.
	// Enum: [contains equals matches_regex]
	Condition string `json:"condition,omitempty"`

	// The date and time that this rule was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// HTTP header field. This is only applicable to "header" rule type.
	Field string `json:"field,omitempty"`

	// The rule's canonical URL.
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The rule's unique identifier.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this policy
	// Pattern: ^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$
	Name string `json:"name,omitempty"`

	// The provisioning status of this rule
	// Enum: [active create_pending update_pending delete_pending maintenance_pending failed]
	ProvisioningStatus string `json:"provisioning_status,omitempty"`

	// The type of the rule.
	// Enum: [header hostname path]
	Type string `json:"type,omitempty"`

	// Value to be matched for rule condition
	Value string `json:"value,omitempty"`
}

// Validate validates this listener policy rule
func (m *ListenerPolicyRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listenerPolicyRuleTypeConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["contains","equals","matches_regex"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerPolicyRuleTypeConditionPropEnum = append(listenerPolicyRuleTypeConditionPropEnum, v)
	}
}

const (

	// ListenerPolicyRuleConditionContains captures enum value "contains"
	ListenerPolicyRuleConditionContains string = "contains"

	// ListenerPolicyRuleConditionEquals captures enum value "equals"
	ListenerPolicyRuleConditionEquals string = "equals"

	// ListenerPolicyRuleConditionMatchesRegex captures enum value "matches_regex"
	ListenerPolicyRuleConditionMatchesRegex string = "matches_regex"
)

// prop value enum
func (m *ListenerPolicyRule) validateConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, listenerPolicyRuleTypeConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ListenerPolicyRule) validateCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	// value enum
	if err := m.validateConditionEnum("condition", "body", m.Condition); err != nil {
		return err
	}

	return nil
}

func (m *ListenerPolicyRule) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListenerPolicyRule) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *ListenerPolicyRule) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListenerPolicyRule) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$`); err != nil {
		return err
	}

	return nil
}

var listenerPolicyRuleTypeProvisioningStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","create_pending","update_pending","delete_pending","maintenance_pending","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerPolicyRuleTypeProvisioningStatusPropEnum = append(listenerPolicyRuleTypeProvisioningStatusPropEnum, v)
	}
}

const (

	// ListenerPolicyRuleProvisioningStatusActive captures enum value "active"
	ListenerPolicyRuleProvisioningStatusActive string = "active"

	// ListenerPolicyRuleProvisioningStatusCreatePending captures enum value "create_pending"
	ListenerPolicyRuleProvisioningStatusCreatePending string = "create_pending"

	// ListenerPolicyRuleProvisioningStatusUpdatePending captures enum value "update_pending"
	ListenerPolicyRuleProvisioningStatusUpdatePending string = "update_pending"

	// ListenerPolicyRuleProvisioningStatusDeletePending captures enum value "delete_pending"
	ListenerPolicyRuleProvisioningStatusDeletePending string = "delete_pending"

	// ListenerPolicyRuleProvisioningStatusMaintenancePending captures enum value "maintenance_pending"
	ListenerPolicyRuleProvisioningStatusMaintenancePending string = "maintenance_pending"

	// ListenerPolicyRuleProvisioningStatusFailed captures enum value "failed"
	ListenerPolicyRuleProvisioningStatusFailed string = "failed"
)

// prop value enum
func (m *ListenerPolicyRule) validateProvisioningStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, listenerPolicyRuleTypeProvisioningStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ListenerPolicyRule) validateProvisioningStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ProvisioningStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProvisioningStatusEnum("provisioning_status", "body", m.ProvisioningStatus); err != nil {
		return err
	}

	return nil
}

var listenerPolicyRuleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["header","hostname","path"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerPolicyRuleTypeTypePropEnum = append(listenerPolicyRuleTypeTypePropEnum, v)
	}
}

const (

	// ListenerPolicyRuleTypeHeader captures enum value "header"
	ListenerPolicyRuleTypeHeader string = "header"

	// ListenerPolicyRuleTypeHostname captures enum value "hostname"
	ListenerPolicyRuleTypeHostname string = "hostname"

	// ListenerPolicyRuleTypePath captures enum value "path"
	ListenerPolicyRuleTypePath string = "path"
)

// prop value enum
func (m *ListenerPolicyRule) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, listenerPolicyRuleTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ListenerPolicyRule) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListenerPolicyRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListenerPolicyRule) UnmarshalBinary(b []byte) error {
	var res ListenerPolicyRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
