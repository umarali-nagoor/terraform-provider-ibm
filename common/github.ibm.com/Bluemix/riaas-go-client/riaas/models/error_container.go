// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorContainer ErrorContainer
// swagger:model ErrorContainer
type ErrorContainer struct {

	// Array of errors
	// Required: true
	Errors []*Error `json:"errors"`

	// Unique error identifier
	// Required: true
	// Max Length: 64
	// Min Length: 1
	// Pattern: ^[-0-9a-zA-Z_]+$
	Trace *string `json:"trace"`
}

// Validate validates this error container
func (m *ErrorContainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorContainer) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("errors", "body", m.Errors); err != nil {
		return err
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ErrorContainer) validateTrace(formats strfmt.Registry) error {

	if err := validate.Required("trace", "body", m.Trace); err != nil {
		return err
	}

	if err := validate.MinLength("trace", "body", string(*m.Trace), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("trace", "body", string(*m.Trace), 64); err != nil {
		return err
	}

	if err := validate.Pattern("trace", "body", string(*m.Trace), `^[-0-9a-zA-Z_]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorContainer) UnmarshalBinary(b []byte) error {
	var res ErrorContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
