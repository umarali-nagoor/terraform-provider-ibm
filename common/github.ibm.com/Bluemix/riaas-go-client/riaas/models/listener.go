// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Listener listener
// swagger:model Listener
type Listener struct {

	// certificate instance
	CertificateInstance *ListenerCertificateInstance `json:"certificate_instance,omitempty"`

	// The connection limit of the listener.
	// Maximum: 15000
	// Minimum: 1
	ConnectionLimit int64 `json:"connection_limit,omitempty"`

	// The date and time that this listener was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The default pool associated with the listener.
	DefaultPool *PoolReference `json:"default_pool,omitempty"`

	// The listener's canonical URL.
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The listener's unique identifier.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The list of policies of this listener
	Policies []*ListenerPolicyReference `json:"policies"`

	// The listener port number.
	// Maximum: 65535
	// Minimum: 1
	Port int64 `json:"port,omitempty"`

	// The listener protocol.
	// Enum: [http https tcp]
	Protocol string `json:"protocol,omitempty"`

	// The provisioning status of this listener
	// Enum: [active create_pending update_pending delete_pending maintenance_pending]
	ProvisioningStatus string `json:"provisioning_status,omitempty"`
}

// Validate validates this listener
func (m *Listener) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Listener) validateCertificateInstance(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateInstance) { // not required
		return nil
	}

	if m.CertificateInstance != nil {
		if err := m.CertificateInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate_instance")
			}
			return err
		}
	}

	return nil
}

func (m *Listener) validateConnectionLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("connection_limit", "body", int64(m.ConnectionLimit), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("connection_limit", "body", int64(m.ConnectionLimit), 15000, false); err != nil {
		return err
	}

	return nil
}

func (m *Listener) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Listener) validateDefaultPool(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultPool) { // not required
		return nil
	}

	if m.DefaultPool != nil {
		if err := m.DefaultPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("default_pool")
			}
			return err
		}
	}

	return nil
}

func (m *Listener) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *Listener) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Listener) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Listener) validatePort(formats strfmt.Registry) error {

	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("port", "body", int64(m.Port), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

var listenerTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","https","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerTypeProtocolPropEnum = append(listenerTypeProtocolPropEnum, v)
	}
}

const (

	// ListenerProtocolHTTP captures enum value "http"
	ListenerProtocolHTTP string = "http"

	// ListenerProtocolHTTPS captures enum value "https"
	ListenerProtocolHTTPS string = "https"

	// ListenerProtocolTCP captures enum value "tcp"
	ListenerProtocolTCP string = "tcp"
)

// prop value enum
func (m *Listener) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, listenerTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Listener) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

var listenerTypeProvisioningStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","create_pending","update_pending","delete_pending","maintenance_pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listenerTypeProvisioningStatusPropEnum = append(listenerTypeProvisioningStatusPropEnum, v)
	}
}

const (

	// ListenerProvisioningStatusActive captures enum value "active"
	ListenerProvisioningStatusActive string = "active"

	// ListenerProvisioningStatusCreatePending captures enum value "create_pending"
	ListenerProvisioningStatusCreatePending string = "create_pending"

	// ListenerProvisioningStatusUpdatePending captures enum value "update_pending"
	ListenerProvisioningStatusUpdatePending string = "update_pending"

	// ListenerProvisioningStatusDeletePending captures enum value "delete_pending"
	ListenerProvisioningStatusDeletePending string = "delete_pending"

	// ListenerProvisioningStatusMaintenancePending captures enum value "maintenance_pending"
	ListenerProvisioningStatusMaintenancePending string = "maintenance_pending"
)

// prop value enum
func (m *Listener) validateProvisioningStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, listenerTypeProvisioningStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Listener) validateProvisioningStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ProvisioningStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProvisioningStatusEnum("provisioning_status", "body", m.ProvisioningStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Listener) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Listener) UnmarshalBinary(b []byte) error {
	var res Listener
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ListenerCertificateInstance The certificate instance used for SSL termination. It is applicable only to `https` protocol.
// swagger:model ListenerCertificateInstance
type ListenerCertificateInstance struct {

	// The ceritificate instance's CRN
	Crn string `json:"crn,omitempty"`
}

// Validate validates this listener certificate instance
func (m *ListenerCertificateInstance) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ListenerCertificateInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListenerCertificateInstance) UnmarshalBinary(b []byte) error {
	var res ListenerCertificateInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
