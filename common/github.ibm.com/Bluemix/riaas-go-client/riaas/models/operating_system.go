// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OperatingSystem OperatingSystem
// swagger:model OperatingSystem
type OperatingSystem struct {

	// The operating system architecture
	// Required: true
	Architecture *string `json:"architecture"`

	// A unique, display-friendly name for the operating system
	// Required: true
	// Max Length: 120
	// Min Length: 1
	// Pattern: ^[-A-Za-z0-9 !$@#%&*'=_+:;,?\./\(\)\[\]]+$
	DisplayName *string `json:"display_name"`

	// The name of the software family this operating system belongs to
	// Required: true
	Family *string `json:"family"`

	// The URL for this operating system
	// Required: true
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href *string `json:"href"`

	// The unique name of the operating system
	// Required: true
	// Max Length: 63
	// Min Length: 1
	// Pattern: ^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$
	Name *string `json:"name"`

	// The vendor of the operating system
	// Required: true
	Vendor *string `json:"vendor"`

	// The major release version of this operating system
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this operating system
func (m *OperatingSystem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperatingSystem) validateArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("architecture", "body", m.Architecture); err != nil {
		return err
	}

	return nil
}

func (m *OperatingSystem) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MinLength("display_name", "body", string(*m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("display_name", "body", string(*m.DisplayName), 120); err != nil {
		return err
	}

	if err := validate.Pattern("display_name", "body", string(*m.DisplayName), `^[-A-Za-z0-9 !$@#%&*'=_+:;,?\./\(\)\[\]]+$`); err != nil {
		return err
	}

	return nil
}

func (m *OperatingSystem) validateFamily(formats strfmt.Registry) error {

	if err := validate.Required("family", "body", m.Family); err != nil {
		return err
	}

	return nil
}

func (m *OperatingSystem) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("href", "body", m.Href); err != nil {
		return err
	}

	if err := validate.Pattern("href", "body", string(*m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *OperatingSystem) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 63); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$`); err != nil {
		return err
	}

	return nil
}

func (m *OperatingSystem) validateVendor(formats strfmt.Registry) error {

	if err := validate.Required("vendor", "body", m.Vendor); err != nil {
		return err
	}

	return nil
}

func (m *OperatingSystem) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperatingSystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperatingSystem) UnmarshalBinary(b []byte) error {
	var res OperatingSystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
