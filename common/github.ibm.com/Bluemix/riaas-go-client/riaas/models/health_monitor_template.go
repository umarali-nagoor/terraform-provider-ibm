// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HealthMonitorTemplate health monitor template
// swagger:model HealthMonitorTemplate
type HealthMonitorTemplate struct {

	// The health check interval in seconds. Interval must be greater than timeout value.
	// Maximum: 60
	// Minimum: 2
	Delay int64 `json:"delay,omitempty"`

	// The health check max retries.
	// Maximum: 10
	// Minimum: 1
	MaxRetries int64 `json:"max_retries,omitempty"`

	// The health check port number
	// Maximum: 65535
	// Minimum: 1
	Port int64 `json:"port,omitempty"`

	// The health check timeout in seconds.
	// Maximum: 59
	// Minimum: 1
	Timeout int64 `json:"timeout,omitempty"`

	// The pool protocol.
	// Enum: [http tcp]
	Type string `json:"type,omitempty"`

	// The health check url. This is applicable only to `http` type of health monitor.
	URLPath string `json:"url_path,omitempty"`
}

// Validate validates this health monitor template
func (m *HealthMonitorTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxRetries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HealthMonitorTemplate) validateDelay(formats strfmt.Registry) error {

	if swag.IsZero(m.Delay) { // not required
		return nil
	}

	if err := validate.MinimumInt("delay", "body", int64(m.Delay), 2, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("delay", "body", int64(m.Delay), 60, false); err != nil {
		return err
	}

	return nil
}

func (m *HealthMonitorTemplate) validateMaxRetries(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxRetries) { // not required
		return nil
	}

	if err := validate.MinimumInt("max_retries", "body", int64(m.MaxRetries), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("max_retries", "body", int64(m.MaxRetries), 10, false); err != nil {
		return err
	}

	return nil
}

func (m *HealthMonitorTemplate) validatePort(formats strfmt.Registry) error {

	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("port", "body", int64(m.Port), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *HealthMonitorTemplate) validateTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("timeout", "body", int64(m.Timeout), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("timeout", "body", int64(m.Timeout), 59, false); err != nil {
		return err
	}

	return nil
}

var healthMonitorTemplateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthMonitorTemplateTypeTypePropEnum = append(healthMonitorTemplateTypeTypePropEnum, v)
	}
}

const (

	// HealthMonitorTemplateTypeHTTP captures enum value "http"
	HealthMonitorTemplateTypeHTTP string = "http"

	// HealthMonitorTemplateTypeTCP captures enum value "tcp"
	HealthMonitorTemplateTypeTCP string = "tcp"
)

// prop value enum
func (m *HealthMonitorTemplate) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, healthMonitorTemplateTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HealthMonitorTemplate) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HealthMonitorTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthMonitorTemplate) UnmarshalBinary(b []byte) error {
	var res HealthMonitorTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
