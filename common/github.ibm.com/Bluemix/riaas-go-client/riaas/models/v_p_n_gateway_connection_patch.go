// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VPNGatewayConnectionPatch v p n gateway connection patch
// swagger:model VPNGatewayConnectionPatch
type VPNGatewayConnectionPatch struct {

	// If set to false, the VPN connection is shut down
	AdminStateUp *bool `json:"admin_state_up,omitempty"`

	// dead peer detection
	DeadPeerDetection *VPNGatewayConnectionDPD `json:"dead_peer_detection,omitempty"`

	// ike policy
	IkePolicy *IKEPolicyIdentity `json:"ike_policy,omitempty"`

	// ipsec policy
	IpsecPolicy *IpsecPolicyIdentity `json:"ipsec_policy,omitempty"`

	// The name given to this VPN connection
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// The IP address of the peer VPN gateway
	PeerAddress string `json:"peer_address,omitempty"`

	// The preshared key
	Psk string `json:"psk,omitempty"`
}

// Validate validates this v p n gateway connection patch
func (m *VPNGatewayConnectionPatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeadPeerDetection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIkePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIpsecPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VPNGatewayConnectionPatch) validateDeadPeerDetection(formats strfmt.Registry) error {

	if swag.IsZero(m.DeadPeerDetection) { // not required
		return nil
	}

	if m.DeadPeerDetection != nil {
		if err := m.DeadPeerDetection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dead_peer_detection")
			}
			return err
		}
	}

	return nil
}

func (m *VPNGatewayConnectionPatch) validateIkePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.IkePolicy) { // not required
		return nil
	}

	if m.IkePolicy != nil {
		if err := m.IkePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ike_policy")
			}
			return err
		}
	}

	return nil
}

func (m *VPNGatewayConnectionPatch) validateIpsecPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.IpsecPolicy) { // not required
		return nil
	}

	if m.IpsecPolicy != nil {
		if err := m.IpsecPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsec_policy")
			}
			return err
		}
	}

	return nil
}

func (m *VPNGatewayConnectionPatch) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VPNGatewayConnectionPatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VPNGatewayConnectionPatch) UnmarshalBinary(b []byte) error {
	var res VPNGatewayConnectionPatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
