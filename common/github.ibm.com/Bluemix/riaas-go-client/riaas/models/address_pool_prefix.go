// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddressPoolPrefix AddressPoolPrefix
// swagger:model address_pool_prefix
type AddressPoolPrefix struct {

	// The CIDR block
	// Required: true
	Cidr *string `json:"cidr"`

	// The date and time that the prefix was created
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// Indicates whether subnets exist with addresses from this prefix.
	// Required: true
	HasSubnets *bool `json:"has_subnets"`

	// The URL for this prefix
	// Required: true
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href *string `json:"href"`

	// The unique identifier for this prefix
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// The user-defined name for this prefix. By default, the base IP address will be the name. For example, for 10.0.0.0/24 the name will be 10.0.0.0.
	// Required: true
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name *string `json:"name"`

	// zone
	// Required: true
	Zone *AddressPoolPrefixZone `json:"zone"`
}

// Validate validates this address pool prefix
func (m *AddressPoolPrefix) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressPoolPrefix) validateCidr(formats strfmt.Registry) error {

	if err := validate.Required("cidr", "body", m.Cidr); err != nil {
		return err
	}

	return nil
}

func (m *AddressPoolPrefix) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddressPoolPrefix) validateHasSubnets(formats strfmt.Registry) error {

	if err := validate.Required("has_subnets", "body", m.HasSubnets); err != nil {
		return err
	}

	return nil
}

func (m *AddressPoolPrefix) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("href", "body", m.Href); err != nil {
		return err
	}

	if err := validate.Pattern("href", "body", string(*m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *AddressPoolPrefix) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AddressPoolPrefix) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AddressPoolPrefix) validateZone(formats strfmt.Registry) error {

	if err := validate.Required("zone", "body", m.Zone); err != nil {
		return err
	}

	if m.Zone != nil {
		if err := m.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddressPoolPrefix) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressPoolPrefix) UnmarshalBinary(b []byte) error {
	var res AddressPoolPrefix
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AddressPoolPrefixZone ZoneReference
//
// The zone this address pool prefix is to belong to
// swagger:model AddressPoolPrefixZone
type AddressPoolPrefixZone struct {

	// The URL for this zone
	// Required: true
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href *string `json:"href"`

	// The name for this zone
	// Required: true
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name *string `json:"name"`
}

// Validate validates this address pool prefix zone
func (m *AddressPoolPrefixZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressPoolPrefixZone) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("zone"+"."+"href", "body", m.Href); err != nil {
		return err
	}

	if err := validate.Pattern("zone"+"."+"href", "body", string(*m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *AddressPoolPrefixZone) validateName(formats strfmt.Registry) error {

	if err := validate.Required("zone"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("zone"+"."+"name", "body", string(*m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddressPoolPrefixZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressPoolPrefixZone) UnmarshalBinary(b []byte) error {
	var res AddressPoolPrefixZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
