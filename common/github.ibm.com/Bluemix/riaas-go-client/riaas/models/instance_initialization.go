// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceInitialization initialization
// swagger:model InstanceInitialization
type InstanceInitialization struct {

	// Collection of keys used at initialization of instance
	Keys []*InstanceInitializationKeysItems0 `json:"keys"`

	// password
	Password *InstanceInitializationPassword `json:"password,omitempty"`
}

// Validate validates this instance initialization
func (m *InstanceInitialization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceInitialization) validateKeys(formats strfmt.Registry) error {

	if swag.IsZero(m.Keys) { // not required
		return nil
	}

	for i := 0; i < len(m.Keys); i++ {
		if swag.IsZero(m.Keys[i]) { // not required
			continue
		}

		if m.Keys[i] != nil {
			if err := m.Keys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InstanceInitialization) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if m.Password != nil {
		if err := m.Password.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceInitialization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceInitialization) UnmarshalBinary(b []byte) error {
	var res InstanceInitialization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InstanceInitializationKeysItems0 KeyIdentityByFingerprint
// swagger:model InstanceInitializationKeysItems0
type InstanceInitializationKeysItems0 struct {

	// The CRN for this key
	Crn string `json:"crn,omitempty"`

	// The SHA256 fingerprint of the public key
	Fingerprint string `json:"fingerprint,omitempty"`

	// The unique identifier for this key
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this key
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this instance initialization keys items0
func (m *InstanceInitializationKeysItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceInitializationKeysItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstanceInitializationKeysItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceInitializationKeysItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceInitializationKeysItems0) UnmarshalBinary(b []byte) error {
	var res InstanceInitializationKeysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InstanceInitializationPassword InstanceEncryptedPassword
// swagger:model InstanceInitializationPassword
type InstanceInitializationPassword struct {

	// The administrator password at initialization, encrypted using the first initialized SSH key
	// Format: byte
	EncryptedPassword strfmt.Base64 `json:"encrypted_password,omitempty"`

	// encryption key
	EncryptionKey *InstanceInitializationPasswordEncryptionKey `json:"encryption_key,omitempty"`
}

// Validate validates this instance initialization password
func (m *InstanceInitializationPassword) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncryptedPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceInitializationPassword) validateEncryptedPassword(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptedPassword) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *InstanceInitializationPassword) validateEncryptionKey(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptionKey) { // not required
		return nil
	}

	if m.EncryptionKey != nil {
		if err := m.EncryptionKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password" + "." + "encryption_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceInitializationPassword) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceInitializationPassword) UnmarshalBinary(b []byte) error {
	var res InstanceInitializationPassword
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InstanceInitializationPasswordEncryptionKey KeyIdentityByFingerprint
// swagger:model InstanceInitializationPasswordEncryptionKey
type InstanceInitializationPasswordEncryptionKey struct {

	// The CRN for this key
	Crn string `json:"crn,omitempty"`

	// The SHA256 fingerprint of the public key
	Fingerprint string `json:"fingerprint,omitempty"`

	// The unique identifier for this key
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this key
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this instance initialization password encryption key
func (m *InstanceInitializationPasswordEncryptionKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceInitializationPasswordEncryptionKey) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("password"+"."+"encryption_key"+"."+"id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InstanceInitializationPasswordEncryptionKey) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("password"+"."+"encryption_key"+"."+"name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceInitializationPasswordEncryptionKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceInitializationPasswordEncryptionKey) UnmarshalBinary(b []byte) error {
	var res InstanceInitializationPasswordEncryptionKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
