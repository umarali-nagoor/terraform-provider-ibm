// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorTarget ErrorTarget
// swagger:model ErrorTarget
type ErrorTarget struct {

	// The name of the problematic field, query parameter, or header
	// Required: true
	Name *string `json:"name"`

	// The type of input where the problem was
	// Required: true
	// Enum: [field header parameter]
	Type *string `json:"type"`

	// If present, the problematic value within the field, query parameter, or header
	Value string `json:"value,omitempty"`
}

// Validate validates this error target
func (m *ErrorTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorTarget) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var errorTargetTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["field","header","parameter"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorTargetTypeTypePropEnum = append(errorTargetTypeTypePropEnum, v)
	}
}

const (

	// ErrorTargetTypeField captures enum value "field"
	ErrorTargetTypeField string = "field"

	// ErrorTargetTypeHeader captures enum value "header"
	ErrorTargetTypeHeader string = "header"

	// ErrorTargetTypeParameter captures enum value "parameter"
	ErrorTargetTypeParameter string = "parameter"
)

// prop value enum
func (m *ErrorTarget) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, errorTargetTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ErrorTarget) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorTarget) UnmarshalBinary(b []byte) error {
	var res ErrorTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
