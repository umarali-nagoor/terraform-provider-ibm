// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerNetworkInterface NetworkInterface
// swagger:model server_network_interface
type ServerNetworkInterface struct {

	// The date and time that the network interface was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The CRN for this network interface
	Crn string `json:"crn,omitempty"`

	// Array of references to floating ips associated with this network interface
	FloatingIps []*ResourceReference `json:"floating_ips"`

	// The URL for this network interface
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The unique identifier for this network interface
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this network interface
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// The network interface port speed in Mbps
	PortSpeed int64 `json:"port_speed,omitempty"`

	// The primary IPv4 address
	PrimaryIPV4Address string `json:"primary_ipv4_address,omitempty"`

	// Collection seconary IP addresses
	SecondaryAddresses []string `json:"secondary_addresses"`

	// Collection of security groups
	SecurityGroups []*ResourceReference `json:"security_groups"`

	// The status of the volume
	// Enum: [available failed pending]
	Status string `json:"status,omitempty"`

	// subnet
	Subnet *ResourceReference `json:"subnet,omitempty"`

	// The type of this network interface as it relates to a server
	// Enum: [primary secondary]
	Type string `json:"type,omitempty"`
}

// Validate validates this server network interface
func (m *ServerNetworkInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFloatingIps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerNetworkInterface) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServerNetworkInterface) validateFloatingIps(formats strfmt.Registry) error {

	if swag.IsZero(m.FloatingIps) { // not required
		return nil
	}

	for i := 0; i < len(m.FloatingIps); i++ {
		if swag.IsZero(m.FloatingIps[i]) { // not required
			continue
		}

		if m.FloatingIps[i] != nil {
			if err := m.FloatingIps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("floating_ips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServerNetworkInterface) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *ServerNetworkInterface) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServerNetworkInterface) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ServerNetworkInterface) validateSecurityGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityGroups); i++ {
		if swag.IsZero(m.SecurityGroups[i]) { // not required
			continue
		}

		if m.SecurityGroups[i] != nil {
			if err := m.SecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var serverNetworkInterfaceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["available","failed","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverNetworkInterfaceTypeStatusPropEnum = append(serverNetworkInterfaceTypeStatusPropEnum, v)
	}
}

const (

	// ServerNetworkInterfaceStatusAvailable captures enum value "available"
	ServerNetworkInterfaceStatusAvailable string = "available"

	// ServerNetworkInterfaceStatusFailed captures enum value "failed"
	ServerNetworkInterfaceStatusFailed string = "failed"

	// ServerNetworkInterfaceStatusPending captures enum value "pending"
	ServerNetworkInterfaceStatusPending string = "pending"
)

// prop value enum
func (m *ServerNetworkInterface) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverNetworkInterfaceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServerNetworkInterface) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ServerNetworkInterface) validateSubnet(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnet) { // not required
		return nil
	}

	if m.Subnet != nil {
		if err := m.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

var serverNetworkInterfaceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary","secondary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverNetworkInterfaceTypeTypePropEnum = append(serverNetworkInterfaceTypeTypePropEnum, v)
	}
}

const (

	// ServerNetworkInterfaceTypePrimary captures enum value "primary"
	ServerNetworkInterfaceTypePrimary string = "primary"

	// ServerNetworkInterfaceTypeSecondary captures enum value "secondary"
	ServerNetworkInterfaceTypeSecondary string = "secondary"
)

// prop value enum
func (m *ServerNetworkInterface) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverNetworkInterfaceTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServerNetworkInterface) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerNetworkInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerNetworkInterface) UnmarshalBinary(b []byte) error {
	var res ServerNetworkInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
