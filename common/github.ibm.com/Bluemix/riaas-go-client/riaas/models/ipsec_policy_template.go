// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpsecPolicyTemplate ipsec policy template
// swagger:model IPsecPolicyTemplate
type IpsecPolicyTemplate struct {

	// The authentication algorithm
	// Enum: [md5 sha1 sha256]
	AuthenticationAlgorithm string `json:"authentication_algorithm,omitempty"`

	// The encryption algorithm
	// Enum: [3des aes128 aes256]
	EncryptionAlgorithm string `json:"encryption_algorithm,omitempty"`

	// The key lifetime in seconds
	// Maximum: 86400
	// Minimum: 300
	KeyLifetime int64 `json:"key_lifetime,omitempty"`

	// The name given to this IPsec policy
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// Perfect Forward Secrecy
	// Enum: [disabled group_2 group_5 group_14]
	Pfs string `json:"pfs,omitempty"`

	// resource group
	ResourceGroup *IpsecPolicyTemplateResourceGroup `json:"resource_group,omitempty"`
}

// Validate validates this ipsec policy template
func (m *IpsecPolicyTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ipsecPolicyTemplateTypeAuthenticationAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["md5","sha1","sha256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipsecPolicyTemplateTypeAuthenticationAlgorithmPropEnum = append(ipsecPolicyTemplateTypeAuthenticationAlgorithmPropEnum, v)
	}
}

const (

	// IpsecPolicyTemplateAuthenticationAlgorithmMd5 captures enum value "md5"
	IpsecPolicyTemplateAuthenticationAlgorithmMd5 string = "md5"

	// IpsecPolicyTemplateAuthenticationAlgorithmSha1 captures enum value "sha1"
	IpsecPolicyTemplateAuthenticationAlgorithmSha1 string = "sha1"

	// IpsecPolicyTemplateAuthenticationAlgorithmSha256 captures enum value "sha256"
	IpsecPolicyTemplateAuthenticationAlgorithmSha256 string = "sha256"
)

// prop value enum
func (m *IpsecPolicyTemplate) validateAuthenticationAlgorithmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipsecPolicyTemplateTypeAuthenticationAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IpsecPolicyTemplate) validateAuthenticationAlgorithm(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationAlgorithm) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationAlgorithmEnum("authentication_algorithm", "body", m.AuthenticationAlgorithm); err != nil {
		return err
	}

	return nil
}

var ipsecPolicyTemplateTypeEncryptionAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["3des","aes128","aes256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipsecPolicyTemplateTypeEncryptionAlgorithmPropEnum = append(ipsecPolicyTemplateTypeEncryptionAlgorithmPropEnum, v)
	}
}

const (

	// IpsecPolicyTemplateEncryptionAlgorithmNr3des captures enum value "3des"
	IpsecPolicyTemplateEncryptionAlgorithmNr3des string = "3des"

	// IpsecPolicyTemplateEncryptionAlgorithmAes128 captures enum value "aes128"
	IpsecPolicyTemplateEncryptionAlgorithmAes128 string = "aes128"

	// IpsecPolicyTemplateEncryptionAlgorithmAes256 captures enum value "aes256"
	IpsecPolicyTemplateEncryptionAlgorithmAes256 string = "aes256"
)

// prop value enum
func (m *IpsecPolicyTemplate) validateEncryptionAlgorithmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipsecPolicyTemplateTypeEncryptionAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IpsecPolicyTemplate) validateEncryptionAlgorithm(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptionAlgorithm) { // not required
		return nil
	}

	// value enum
	if err := m.validateEncryptionAlgorithmEnum("encryption_algorithm", "body", m.EncryptionAlgorithm); err != nil {
		return err
	}

	return nil
}

func (m *IpsecPolicyTemplate) validateKeyLifetime(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyLifetime) { // not required
		return nil
	}

	if err := validate.MinimumInt("key_lifetime", "body", int64(m.KeyLifetime), 300, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("key_lifetime", "body", int64(m.KeyLifetime), 86400, false); err != nil {
		return err
	}

	return nil
}

func (m *IpsecPolicyTemplate) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var ipsecPolicyTemplateTypePfsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["disabled","group_2","group_5","group_14"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipsecPolicyTemplateTypePfsPropEnum = append(ipsecPolicyTemplateTypePfsPropEnum, v)
	}
}

const (

	// IpsecPolicyTemplatePfsDisabled captures enum value "disabled"
	IpsecPolicyTemplatePfsDisabled string = "disabled"

	// IpsecPolicyTemplatePfsGroup2 captures enum value "group_2"
	IpsecPolicyTemplatePfsGroup2 string = "group_2"

	// IpsecPolicyTemplatePfsGroup5 captures enum value "group_5"
	IpsecPolicyTemplatePfsGroup5 string = "group_5"

	// IpsecPolicyTemplatePfsGroup14 captures enum value "group_14"
	IpsecPolicyTemplatePfsGroup14 string = "group_14"
)

// prop value enum
func (m *IpsecPolicyTemplate) validatePfsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipsecPolicyTemplateTypePfsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IpsecPolicyTemplate) validatePfs(formats strfmt.Registry) error {

	if swag.IsZero(m.Pfs) { // not required
		return nil
	}

	// value enum
	if err := m.validatePfsEnum("pfs", "body", m.Pfs); err != nil {
		return err
	}

	return nil
}

func (m *IpsecPolicyTemplate) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {
		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpsecPolicyTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpsecPolicyTemplate) UnmarshalBinary(b []byte) error {
	var res IpsecPolicyTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IpsecPolicyTemplateResourceGroup ResourceGroupIdentity
// swagger:model IpsecPolicyTemplateResourceGroup
type IpsecPolicyTemplateResourceGroup struct {

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this ipsec policy template resource group
func (m *IpsecPolicyTemplateResourceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpsecPolicyTemplateResourceGroup) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("resource_group"+"."+"id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpsecPolicyTemplateResourceGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpsecPolicyTemplateResourceGroup) UnmarshalBinary(b []byte) error {
	var res IpsecPolicyTemplateResourceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
