// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpsecPolicy ipsec policy
// swagger:model IPsecPolicy
type IpsecPolicy struct {

	// The authentication algorithm
	// Enum: [md5 sha1 sha256]
	AuthenticationAlgorithm string `json:"authentication_algorithm,omitempty"`

	// Collection of references to VPN connections that use this IPsec policy
	Connections []*VPNGatewayConnectionReference `json:"connections"`

	// The IPsec policy's CRN
	Crn string `json:"crn,omitempty"`

	// The encapsulation mode used. Only `tunnel` is supported.
	// Enum: [tunnel]
	EncapsulationMode string `json:"encapsulation_mode,omitempty"`

	// The encryption algorithm
	// Enum: [3des aes128 aes256]
	EncryptionAlgorithm string `json:"encryption_algorithm,omitempty"`

	// The IPsec policy's canonical URL
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The IPsec policy's unique identifier
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The key lifetime in seconds
	// Maximum: 86400
	// Minimum: 300
	KeyLifetime int64 `json:"key_lifetime,omitempty"`

	// The name given to this IPsec policy
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// Perfect Forward Secrecy
	// Enum: [disabled group_2 group_5 group_14]
	Pfs string `json:"pfs,omitempty"`

	// resource group
	ResourceGroup *IpsecPolicyResourceGroup `json:"resource_group,omitempty"`

	// The transform protocol used. Only `esp` is supported.
	// Enum: [esp]
	TransformProtocol string `json:"transform_protocol,omitempty"`
}

// Validate validates this ipsec policy
func (m *IpsecPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncapsulationMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyLifetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransformProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ipsecPolicyTypeAuthenticationAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["md5","sha1","sha256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipsecPolicyTypeAuthenticationAlgorithmPropEnum = append(ipsecPolicyTypeAuthenticationAlgorithmPropEnum, v)
	}
}

const (

	// IpsecPolicyAuthenticationAlgorithmMd5 captures enum value "md5"
	IpsecPolicyAuthenticationAlgorithmMd5 string = "md5"

	// IpsecPolicyAuthenticationAlgorithmSha1 captures enum value "sha1"
	IpsecPolicyAuthenticationAlgorithmSha1 string = "sha1"

	// IpsecPolicyAuthenticationAlgorithmSha256 captures enum value "sha256"
	IpsecPolicyAuthenticationAlgorithmSha256 string = "sha256"
)

// prop value enum
func (m *IpsecPolicy) validateAuthenticationAlgorithmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipsecPolicyTypeAuthenticationAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IpsecPolicy) validateAuthenticationAlgorithm(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationAlgorithm) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationAlgorithmEnum("authentication_algorithm", "body", m.AuthenticationAlgorithm); err != nil {
		return err
	}

	return nil
}

func (m *IpsecPolicy) validateConnections(formats strfmt.Registry) error {

	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var ipsecPolicyTypeEncapsulationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tunnel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipsecPolicyTypeEncapsulationModePropEnum = append(ipsecPolicyTypeEncapsulationModePropEnum, v)
	}
}

const (

	// IpsecPolicyEncapsulationModeTunnel captures enum value "tunnel"
	IpsecPolicyEncapsulationModeTunnel string = "tunnel"
)

// prop value enum
func (m *IpsecPolicy) validateEncapsulationModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipsecPolicyTypeEncapsulationModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IpsecPolicy) validateEncapsulationMode(formats strfmt.Registry) error {

	if swag.IsZero(m.EncapsulationMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateEncapsulationModeEnum("encapsulation_mode", "body", m.EncapsulationMode); err != nil {
		return err
	}

	return nil
}

var ipsecPolicyTypeEncryptionAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["3des","aes128","aes256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipsecPolicyTypeEncryptionAlgorithmPropEnum = append(ipsecPolicyTypeEncryptionAlgorithmPropEnum, v)
	}
}

const (

	// IpsecPolicyEncryptionAlgorithmNr3des captures enum value "3des"
	IpsecPolicyEncryptionAlgorithmNr3des string = "3des"

	// IpsecPolicyEncryptionAlgorithmAes128 captures enum value "aes128"
	IpsecPolicyEncryptionAlgorithmAes128 string = "aes128"

	// IpsecPolicyEncryptionAlgorithmAes256 captures enum value "aes256"
	IpsecPolicyEncryptionAlgorithmAes256 string = "aes256"
)

// prop value enum
func (m *IpsecPolicy) validateEncryptionAlgorithmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipsecPolicyTypeEncryptionAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IpsecPolicy) validateEncryptionAlgorithm(formats strfmt.Registry) error {

	if swag.IsZero(m.EncryptionAlgorithm) { // not required
		return nil
	}

	// value enum
	if err := m.validateEncryptionAlgorithmEnum("encryption_algorithm", "body", m.EncryptionAlgorithm); err != nil {
		return err
	}

	return nil
}

func (m *IpsecPolicy) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *IpsecPolicy) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IpsecPolicy) validateKeyLifetime(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyLifetime) { // not required
		return nil
	}

	if err := validate.MinimumInt("key_lifetime", "body", int64(m.KeyLifetime), 300, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("key_lifetime", "body", int64(m.KeyLifetime), 86400, false); err != nil {
		return err
	}

	return nil
}

func (m *IpsecPolicy) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var ipsecPolicyTypePfsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["disabled","group_2","group_5","group_14"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipsecPolicyTypePfsPropEnum = append(ipsecPolicyTypePfsPropEnum, v)
	}
}

const (

	// IpsecPolicyPfsDisabled captures enum value "disabled"
	IpsecPolicyPfsDisabled string = "disabled"

	// IpsecPolicyPfsGroup2 captures enum value "group_2"
	IpsecPolicyPfsGroup2 string = "group_2"

	// IpsecPolicyPfsGroup5 captures enum value "group_5"
	IpsecPolicyPfsGroup5 string = "group_5"

	// IpsecPolicyPfsGroup14 captures enum value "group_14"
	IpsecPolicyPfsGroup14 string = "group_14"
)

// prop value enum
func (m *IpsecPolicy) validatePfsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipsecPolicyTypePfsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IpsecPolicy) validatePfs(formats strfmt.Registry) error {

	if swag.IsZero(m.Pfs) { // not required
		return nil
	}

	// value enum
	if err := m.validatePfsEnum("pfs", "body", m.Pfs); err != nil {
		return err
	}

	return nil
}

func (m *IpsecPolicy) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {
		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_group")
			}
			return err
		}
	}

	return nil
}

var ipsecPolicyTypeTransformProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["esp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipsecPolicyTypeTransformProtocolPropEnum = append(ipsecPolicyTypeTransformProtocolPropEnum, v)
	}
}

const (

	// IpsecPolicyTransformProtocolEsp captures enum value "esp"
	IpsecPolicyTransformProtocolEsp string = "esp"
)

// prop value enum
func (m *IpsecPolicy) validateTransformProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipsecPolicyTypeTransformProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IpsecPolicy) validateTransformProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.TransformProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransformProtocolEnum("transform_protocol", "body", m.TransformProtocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpsecPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpsecPolicy) UnmarshalBinary(b []byte) error {
	var res IpsecPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IpsecPolicyResourceGroup ResourceGroupIdentity
// swagger:model IpsecPolicyResourceGroup
type IpsecPolicyResourceGroup struct {

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this ipsec policy resource group
func (m *IpsecPolicyResourceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpsecPolicyResourceGroup) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("resource_group"+"."+"id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpsecPolicyResourceGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpsecPolicyResourceGroup) UnmarshalBinary(b []byte) error {
	var res IpsecPolicyResourceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
