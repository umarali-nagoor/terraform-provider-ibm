// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkACLRule TupleRule
// swagger:model network_acl_rule
type NetworkACLRule struct {

	// Whether to allow or deny matching traffic
	// Enum: [allow deny]
	Action string `json:"action,omitempty"`

	// before
	Before *ResourceReference `json:"before,omitempty"`

	// The ICMP traffic code to allow. Valid values from 0 to 255. If unspecified, all codes are allowed. This can only be specified if type is also specified.
	Code *int64 `json:"code,omitempty"`

	// The date and time that the network ACL Rule was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The destination IP address or CIDR block
	Destination string `json:"destination,omitempty"`

	// The inclusive upper bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	DestinationPortMax int64 `json:"destination_port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	DestinationPortMin int64 `json:"destination_port_min,omitempty"`

	// Whether the traffic to be matched is ingress or egress
	// Enum: [ingress egress]
	Direction string `json:"direction,omitempty"`

	// The URL for this network ACL
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The unique identifier for this network ACL rule
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The IP version for this rule
	// Enum: [ipv4 ipv6]
	IPVersion string `json:"ip_version,omitempty"`

	// The user-defined name for this network ACL
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// The inclusive upper bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	PortMax int64 `json:"port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	PortMin int64 `json:"port_min,omitempty"`

	// Must be `all` to match all protocols.
	Protocol string `json:"protocol,omitempty"`

	// The source IP address or CIDR block
	Source string `json:"source,omitempty"`

	// The inclusive upper bound of TCP/UDP source port range
	// Maximum: 65535
	// Minimum: 1
	SourcePortMax int64 `json:"source_port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP source port range
	// Maximum: 65535
	// Minimum: 1
	SourcePortMin int64 `json:"source_port_min,omitempty"`

	// The ICMP traffic type to allow. Valid values from 0 to 254. If unspecified, all types are allowed by this rule.
	Type *int64 `json:"type,omitempty"`
}

// Validate validates this network acl rule
func (m *NetworkACLRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationPortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationPortMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePortMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var networkAclRuleTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkAclRuleTypeActionPropEnum = append(networkAclRuleTypeActionPropEnum, v)
	}
}

const (

	// NetworkACLRuleActionAllow captures enum value "allow"
	NetworkACLRuleActionAllow string = "allow"

	// NetworkACLRuleActionDeny captures enum value "deny"
	NetworkACLRuleActionDeny string = "deny"
)

// prop value enum
func (m *NetworkACLRule) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networkAclRuleTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworkACLRule) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *NetworkACLRule) validateBefore(formats strfmt.Registry) error {

	if swag.IsZero(m.Before) { // not required
		return nil
	}

	if m.Before != nil {
		if err := m.Before.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("before")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkACLRule) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworkACLRule) validateDestinationPortMax(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationPortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("destination_port_max", "body", int64(m.DestinationPortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("destination_port_max", "body", int64(m.DestinationPortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkACLRule) validateDestinationPortMin(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationPortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("destination_port_min", "body", int64(m.DestinationPortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("destination_port_min", "body", int64(m.DestinationPortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

var networkAclRuleTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingress","egress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkAclRuleTypeDirectionPropEnum = append(networkAclRuleTypeDirectionPropEnum, v)
	}
}

const (

	// NetworkACLRuleDirectionIngress captures enum value "ingress"
	NetworkACLRuleDirectionIngress string = "ingress"

	// NetworkACLRuleDirectionEgress captures enum value "egress"
	NetworkACLRuleDirectionEgress string = "egress"
)

// prop value enum
func (m *NetworkACLRule) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networkAclRuleTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworkACLRule) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *NetworkACLRule) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *NetworkACLRule) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var networkAclRuleTypeIPVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipv4","ipv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkAclRuleTypeIPVersionPropEnum = append(networkAclRuleTypeIPVersionPropEnum, v)
	}
}

const (

	// NetworkACLRuleIPVersionIPV4 captures enum value "ipv4"
	NetworkACLRuleIPVersionIPV4 string = "ipv4"

	// NetworkACLRuleIPVersionIPV6 captures enum value "ipv6"
	NetworkACLRuleIPVersionIPV6 string = "ipv6"
)

// prop value enum
func (m *NetworkACLRule) validateIPVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networkAclRuleTypeIPVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworkACLRule) validateIPVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.IPVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPVersionEnum("ip_version", "body", m.IPVersion); err != nil {
		return err
	}

	return nil
}

func (m *NetworkACLRule) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *NetworkACLRule) validatePortMax(formats strfmt.Registry) error {

	if swag.IsZero(m.PortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("port_max", "body", int64(m.PortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port_max", "body", int64(m.PortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkACLRule) validatePortMin(formats strfmt.Registry) error {

	if swag.IsZero(m.PortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("port_min", "body", int64(m.PortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port_min", "body", int64(m.PortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkACLRule) validateSourcePortMax(formats strfmt.Registry) error {

	if swag.IsZero(m.SourcePortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("source_port_max", "body", int64(m.SourcePortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("source_port_max", "body", int64(m.SourcePortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkACLRule) validateSourcePortMin(formats strfmt.Registry) error {

	if swag.IsZero(m.SourcePortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("source_port_min", "body", int64(m.SourcePortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("source_port_min", "body", int64(m.SourcePortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkACLRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkACLRule) UnmarshalBinary(b []byte) error {
	var res NetworkACLRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
