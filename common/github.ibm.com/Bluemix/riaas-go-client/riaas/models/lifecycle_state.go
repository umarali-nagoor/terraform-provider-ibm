// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// LifecycleState lifecycle state
// swagger:model LifecycleState
type LifecycleState string

const (

	// LifecycleStateDeleted captures enum value "deleted"
	LifecycleStateDeleted LifecycleState = "deleted"

	// LifecycleStateDeleting captures enum value "deleting"
	LifecycleStateDeleting LifecycleState = "deleting"

	// LifecycleStateFailed captures enum value "failed"
	LifecycleStateFailed LifecycleState = "failed"

	// LifecycleStatePending captures enum value "pending"
	LifecycleStatePending LifecycleState = "pending"

	// LifecycleStateStable captures enum value "stable"
	LifecycleStateStable LifecycleState = "stable"

	// LifecycleStateUpdating captures enum value "updating"
	LifecycleStateUpdating LifecycleState = "updating"

	// LifecycleStateWaiting captures enum value "waiting"
	LifecycleStateWaiting LifecycleState = "waiting"
)

// for schema
var lifecycleStateEnum []interface{}

func init() {
	var res []LifecycleState
	if err := json.Unmarshal([]byte(`["deleted","deleting","failed","pending","stable","updating","waiting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lifecycleStateEnum = append(lifecycleStateEnum, v)
	}
}

func (m LifecycleState) validateLifecycleStateEnum(path, location string, value LifecycleState) error {
	if err := validate.Enum(path, location, value, lifecycleStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this lifecycle state
func (m LifecycleState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLifecycleStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
