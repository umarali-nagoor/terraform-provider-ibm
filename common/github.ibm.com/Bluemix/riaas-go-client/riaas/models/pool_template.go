// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PoolTemplate pool template
// swagger:model PoolTemplate
type PoolTemplate struct {

	// The load balancing algorithm.
	// Enum: [round_robin weighted_round_robin least_connections]
	Algorithm string `json:"algorithm,omitempty"`

	// The health monitor of this pool.
	HealthMonitor *HealthMonitorTemplate `json:"health_monitor,omitempty"`

	// The backend server members of this pool.
	Members []*MemberTemplate `json:"members,omitempty"`

	// The name of the pool.
	// Pattern: ^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$
	Name string `json:"name,omitempty"`

	// The pool protocol.
	// Enum: [http tcp]
	Protocol string `json:"protocol,omitempty"`

	// The session persistence of this pool.
	SessionPersistence *SessionPersistenceTemplate `json:"session_persistence,omitempty"`
}

// Validate validates this pool template
func (m *PoolTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthMonitor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionPersistence(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var poolTemplateTypeAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["round_robin","weighted_round_robin","least_connections"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		poolTemplateTypeAlgorithmPropEnum = append(poolTemplateTypeAlgorithmPropEnum, v)
	}
}

const (

	// PoolTemplateAlgorithmRoundRobin captures enum value "round_robin"
	PoolTemplateAlgorithmRoundRobin string = "round_robin"

	// PoolTemplateAlgorithmWeightedRoundRobin captures enum value "weighted_round_robin"
	PoolTemplateAlgorithmWeightedRoundRobin string = "weighted_round_robin"

	// PoolTemplateAlgorithmLeastConnections captures enum value "least_connections"
	PoolTemplateAlgorithmLeastConnections string = "least_connections"
)

// prop value enum
func (m *PoolTemplate) validateAlgorithmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, poolTemplateTypeAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PoolTemplate) validateAlgorithm(formats strfmt.Registry) error {

	if swag.IsZero(m.Algorithm) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlgorithmEnum("algorithm", "body", m.Algorithm); err != nil {
		return err
	}

	return nil
}

func (m *PoolTemplate) validateHealthMonitor(formats strfmt.Registry) error {

	if swag.IsZero(m.HealthMonitor) { // not required
		return nil
	}

	if m.HealthMonitor != nil {
		if err := m.HealthMonitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_monitor")
			}
			return err
		}
	}

	return nil
}

func (m *PoolTemplate) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PoolTemplate) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$`); err != nil {
		return err
	}

	return nil
}

var poolTemplateTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","tcp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		poolTemplateTypeProtocolPropEnum = append(poolTemplateTypeProtocolPropEnum, v)
	}
}

const (

	// PoolTemplateProtocolHTTP captures enum value "http"
	PoolTemplateProtocolHTTP string = "http"

	// PoolTemplateProtocolTCP captures enum value "tcp"
	PoolTemplateProtocolTCP string = "tcp"
)

// prop value enum
func (m *PoolTemplate) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, poolTemplateTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PoolTemplate) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *PoolTemplate) validateSessionPersistence(formats strfmt.Registry) error {

	if swag.IsZero(m.SessionPersistence) { // not required
		return nil
	}

	if m.SessionPersistence != nil {
		if err := m.SessionPersistence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("session_persistence")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PoolTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PoolTemplate) UnmarshalBinary(b []byte) error {
	var res PoolTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
