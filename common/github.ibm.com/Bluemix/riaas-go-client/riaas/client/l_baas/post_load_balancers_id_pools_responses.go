// Code generated by go-swagger; DO NOT EDIT.

package l_baas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// PostLoadBalancersIDPoolsReader is a Reader for the PostLoadBalancersIDPools structure.
type PostLoadBalancersIDPoolsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLoadBalancersIDPoolsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostLoadBalancersIDPoolsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostLoadBalancersIDPoolsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostLoadBalancersIDPoolsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostLoadBalancersIDPoolsCreated creates a PostLoadBalancersIDPoolsCreated with default headers values
func NewPostLoadBalancersIDPoolsCreated() *PostLoadBalancersIDPoolsCreated {
	return &PostLoadBalancersIDPoolsCreated{}
}

/*PostLoadBalancersIDPoolsCreated handles this case with default header values.

The pool was created successfully.
*/
type PostLoadBalancersIDPoolsCreated struct {
	Payload *models.Pool
}

func (o *PostLoadBalancersIDPoolsCreated) Error() string {
	return fmt.Sprintf("[POST /load_balancers/{id}/pools][%d] postLoadBalancersIdPoolsCreated  %+v", 201, o.Payload)
}

func (o *PostLoadBalancersIDPoolsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Pool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLoadBalancersIDPoolsBadRequest creates a PostLoadBalancersIDPoolsBadRequest with default headers values
func NewPostLoadBalancersIDPoolsBadRequest() *PostLoadBalancersIDPoolsBadRequest {
	return &PostLoadBalancersIDPoolsBadRequest{}
}

/*PostLoadBalancersIDPoolsBadRequest handles this case with default header values.

An invalid pool template was provided.
*/
type PostLoadBalancersIDPoolsBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PostLoadBalancersIDPoolsBadRequest) Error() string {
	return fmt.Sprintf("[POST /load_balancers/{id}/pools][%d] postLoadBalancersIdPoolsBadRequest  %+v", 400, o.Payload)
}

func (o *PostLoadBalancersIDPoolsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLoadBalancersIDPoolsNotFound creates a PostLoadBalancersIDPoolsNotFound with default headers values
func NewPostLoadBalancersIDPoolsNotFound() *PostLoadBalancersIDPoolsNotFound {
	return &PostLoadBalancersIDPoolsNotFound{}
}

/*PostLoadBalancersIDPoolsNotFound handles this case with default header values.

A load balancer with the specified identifier could not be found.
*/
type PostLoadBalancersIDPoolsNotFound struct {
	Payload *models.Riaaserror
}

func (o *PostLoadBalancersIDPoolsNotFound) Error() string {
	return fmt.Sprintf("[POST /load_balancers/{id}/pools][%d] postLoadBalancersIdPoolsNotFound  %+v", 404, o.Payload)
}

func (o *PostLoadBalancersIDPoolsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
