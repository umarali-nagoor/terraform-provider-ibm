// Code generated by go-swagger; DO NOT EDIT.

package v_p_cs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v p cs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v p cs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateVpcRoute creates a route on your v p c

This request creates a new route. The route template object is structured in the same way as
a retrieved route, and contains the information necessary to create the new route. The
request will fail if the new route will cause a loop.
*/
func (a *Client) CreateVpcRoute(params *CreateVpcRouteParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVpcRouteCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVpcRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create_vpc_route",
		Method:             "POST",
		PathPattern:        "/vpcs/{vpc_id}/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVpcRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateVpcRouteCreated), nil

}

/*
DeleteVpcRoute deletes the specified route

This request deletes a route. This operation cannot be reversed.
*/
func (a *Client) DeleteVpcRoute(params *DeleteVpcRouteParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVpcRouteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVpcRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_vpc_route",
		Method:             "DELETE",
		PathPattern:        "/vpcs/{vpc_id}/routes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVpcRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVpcRouteNoContent), nil

}

/*
GetVpcRoute retrieves the specified route

This request retrieves a single route specified by the identifier in the URL.
*/
func (a *Client) GetVpcRoute(params *GetVpcRouteParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpcRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpcRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_vpc_route",
		Method:             "GET",
		PathPattern:        "/vpcs/{vpc_id}/routes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpcRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpcRouteOK), nil

}

/*
ListVpcRoutes lists all user defined routes for a v p c

This request retrieves all user-defined routes for a VPC. Each route is zone-specific and
directs any packets matching its destination CIDR block to a `next_hop` IP address. The most
specific route matching a packet's destination will be used. If multiple equally-specific
routes exist, traffic will be distributed across them.
*/
func (a *Client) ListVpcRoutes(params *ListVpcRoutesParams, authInfo runtime.ClientAuthInfoWriter) (*ListVpcRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVpcRoutesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_vpc_routes",
		Method:             "GET",
		PathPattern:        "/vpcs/{vpc_id}/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListVpcRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListVpcRoutesOK), nil

}

/*
UpdateVpcRoute updates a route

This request updates a route with the information in a provided route patch. The route patch
object is structured in the same way as a retrieved route and contains only the information
to be updated.
*/
func (a *Client) UpdateVpcRoute(params *UpdateVpcRouteParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVpcRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVpcRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update_vpc_route",
		Method:             "PATCH",
		PathPattern:        "/vpcs/{vpc_id}/routes/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVpcRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateVpcRouteOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
