// Code generated by go-swagger; DO NOT EDIT.

package v_p_cs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// UpdateVpcRouteReader is a Reader for the UpdateVpcRoute structure.
type UpdateVpcRouteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVpcRouteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateVpcRouteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateVpcRouteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateVpcRouteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateVpcRouteOK creates a UpdateVpcRouteOK with default headers values
func NewUpdateVpcRouteOK() *UpdateVpcRouteOK {
	return &UpdateVpcRouteOK{}
}

/*UpdateVpcRouteOK handles this case with default header values.

The route was updated successfully.
*/
type UpdateVpcRouteOK struct {
	Payload *models.Route
}

func (o *UpdateVpcRouteOK) Error() string {
	return fmt.Sprintf("[PATCH /vpcs/{vpc_id}/routes/{id}][%d] updateVpcRouteOK  %+v", 200, o.Payload)
}

func (o *UpdateVpcRouteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Route)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVpcRouteBadRequest creates a UpdateVpcRouteBadRequest with default headers values
func NewUpdateVpcRouteBadRequest() *UpdateVpcRouteBadRequest {
	return &UpdateVpcRouteBadRequest{}
}

/*UpdateVpcRouteBadRequest handles this case with default header values.

An invalid route patch was provided.
*/
type UpdateVpcRouteBadRequest struct {
	Payload *models.Riaaserror
}

func (o *UpdateVpcRouteBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /vpcs/{vpc_id}/routes/{id}][%d] updateVpcRouteBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVpcRouteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVpcRouteNotFound creates a UpdateVpcRouteNotFound with default headers values
func NewUpdateVpcRouteNotFound() *UpdateVpcRouteNotFound {
	return &UpdateVpcRouteNotFound{}
}

/*UpdateVpcRouteNotFound handles this case with default header values.

A route with the specified identifier could not be found.
*/
type UpdateVpcRouteNotFound struct {
	Payload *models.Riaaserror
}

func (o *UpdateVpcRouteNotFound) Error() string {
	return fmt.Sprintf("[PATCH /vpcs/{vpc_id}/routes/{id}][%d] updateVpcRouteNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVpcRouteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
