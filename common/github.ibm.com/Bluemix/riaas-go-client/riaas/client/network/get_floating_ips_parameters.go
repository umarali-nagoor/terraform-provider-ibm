// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetFloatingIpsParams creates a new GetFloatingIpsParams object
// with the default values initialized.
func NewGetFloatingIpsParams() *GetFloatingIpsParams {
	var (
		limitDefault = int32(50)
	)
	return &GetFloatingIpsParams{
		Limit: &limitDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFloatingIpsParamsWithTimeout creates a new GetFloatingIpsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFloatingIpsParamsWithTimeout(timeout time.Duration) *GetFloatingIpsParams {
	var (
		limitDefault = int32(50)
	)
	return &GetFloatingIpsParams{
		Limit: &limitDefault,

		timeout: timeout,
	}
}

// NewGetFloatingIpsParamsWithContext creates a new GetFloatingIpsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFloatingIpsParamsWithContext(ctx context.Context) *GetFloatingIpsParams {
	var (
		limitDefault = int32(50)
	)
	return &GetFloatingIpsParams{
		Limit: &limitDefault,

		Context: ctx,
	}
}

// NewGetFloatingIpsParamsWithHTTPClient creates a new GetFloatingIpsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFloatingIpsParamsWithHTTPClient(client *http.Client) *GetFloatingIpsParams {
	var (
		limitDefault = int32(50)
	)
	return &GetFloatingIpsParams{
		Limit:      &limitDefault,
		HTTPClient: client,
	}
}

/*GetFloatingIpsParams contains all the parameters to send to the API endpoint
for the get floating ips operation typically these are written to a http.Request
*/
type GetFloatingIpsParams struct {

	/*Generation
	  The infrastructure generation for the request.

	*/
	Generation int64
	/*Limit
	  The number of resources to return on a page

	*/
	Limit *int32
	/*ResourceGroupID
	  Filters the collection to resources within the resource group of the specified identifier

	*/
	ResourceGroupID *string
	/*Start
	  A server-supplied token determining what resource to start the page on

	*/
	Start *string
	/*Version
	  Requests the version of the API as of a date in the format `YYYY-MM-DD`. Any date up to the current date may be provided. Specify the current date to request the latest version.

	*/
	Version string
	/*ZoneName
	  Filters the collection to resources within the specified zone

	*/
	ZoneName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get floating ips params
func (o *GetFloatingIpsParams) WithTimeout(timeout time.Duration) *GetFloatingIpsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get floating ips params
func (o *GetFloatingIpsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get floating ips params
func (o *GetFloatingIpsParams) WithContext(ctx context.Context) *GetFloatingIpsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get floating ips params
func (o *GetFloatingIpsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get floating ips params
func (o *GetFloatingIpsParams) WithHTTPClient(client *http.Client) *GetFloatingIpsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get floating ips params
func (o *GetFloatingIpsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGeneration adds the generation to the get floating ips params
func (o *GetFloatingIpsParams) WithGeneration(generation int64) *GetFloatingIpsParams {
	o.SetGeneration(generation)
	return o
}

// SetGeneration adds the generation to the get floating ips params
func (o *GetFloatingIpsParams) SetGeneration(generation int64) {
	o.Generation = generation
}

// WithLimit adds the limit to the get floating ips params
func (o *GetFloatingIpsParams) WithLimit(limit *int32) *GetFloatingIpsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get floating ips params
func (o *GetFloatingIpsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithResourceGroupID adds the resourceGroupID to the get floating ips params
func (o *GetFloatingIpsParams) WithResourceGroupID(resourceGroupID *string) *GetFloatingIpsParams {
	o.SetResourceGroupID(resourceGroupID)
	return o
}

// SetResourceGroupID adds the resourceGroupId to the get floating ips params
func (o *GetFloatingIpsParams) SetResourceGroupID(resourceGroupID *string) {
	o.ResourceGroupID = resourceGroupID
}

// WithStart adds the start to the get floating ips params
func (o *GetFloatingIpsParams) WithStart(start *string) *GetFloatingIpsParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get floating ips params
func (o *GetFloatingIpsParams) SetStart(start *string) {
	o.Start = start
}

// WithVersion adds the version to the get floating ips params
func (o *GetFloatingIpsParams) WithVersion(version string) *GetFloatingIpsParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the get floating ips params
func (o *GetFloatingIpsParams) SetVersion(version string) {
	o.Version = version
}

// WithZoneName adds the zoneName to the get floating ips params
func (o *GetFloatingIpsParams) WithZoneName(zoneName *string) *GetFloatingIpsParams {
	o.SetZoneName(zoneName)
	return o
}

// SetZoneName adds the zoneName to the get floating ips params
func (o *GetFloatingIpsParams) SetZoneName(zoneName *string) {
	o.ZoneName = zoneName
}

// WriteToRequest writes these params to a swagger request
func (o *GetFloatingIpsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param generation
	qrGeneration := o.Generation
	qGeneration := swag.FormatInt64(qrGeneration)
	if qGeneration != "" {
		if err := r.SetQueryParam("generation", qGeneration); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.ResourceGroupID != nil {

		// query param resource_group.id
		var qrResourceGroupID string
		if o.ResourceGroupID != nil {
			qrResourceGroupID = *o.ResourceGroupID
		}
		qResourceGroupID := qrResourceGroupID
		if qResourceGroupID != "" {
			if err := r.SetQueryParam("resource_group.id", qResourceGroupID); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param start
		var qrStart string
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	// query param version
	qrVersion := o.Version
	qVersion := qrVersion
	if qVersion != "" {
		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if o.ZoneName != nil {

		// query param zone.name
		var qrZoneName string
		if o.ZoneName != nil {
			qrZoneName = *o.ZoneName
		}
		qZoneName := qrZoneName
		if qZoneName != "" {
			if err := r.SetQueryParam("zone.name", qZoneName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
