// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// PatchFloatingIpsIDReader is a Reader for the PatchFloatingIpsID structure.
type PatchFloatingIpsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchFloatingIpsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchFloatingIpsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchFloatingIpsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchFloatingIpsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPatchFloatingIpsIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchFloatingIpsIDOK creates a PatchFloatingIpsIDOK with default headers values
func NewPatchFloatingIpsIDOK() *PatchFloatingIpsIDOK {
	return &PatchFloatingIpsIDOK{}
}

/*PatchFloatingIpsIDOK handles this case with default header values.

dummy
*/
type PatchFloatingIpsIDOK struct {
	Payload *models.FloatingIP
}

func (o *PatchFloatingIpsIDOK) Error() string {
	return fmt.Sprintf("[PATCH /floating_ips/{id}][%d] patchFloatingIpsIdOK  %+v", 200, o.Payload)
}

func (o *PatchFloatingIpsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FloatingIP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFloatingIpsIDBadRequest creates a PatchFloatingIpsIDBadRequest with default headers values
func NewPatchFloatingIpsIDBadRequest() *PatchFloatingIpsIDBadRequest {
	return &PatchFloatingIpsIDBadRequest{}
}

/*PatchFloatingIpsIDBadRequest handles this case with default header values.

error
*/
type PatchFloatingIpsIDBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PatchFloatingIpsIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /floating_ips/{id}][%d] patchFloatingIpsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchFloatingIpsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFloatingIpsIDNotFound creates a PatchFloatingIpsIDNotFound with default headers values
func NewPatchFloatingIpsIDNotFound() *PatchFloatingIpsIDNotFound {
	return &PatchFloatingIpsIDNotFound{}
}

/*PatchFloatingIpsIDNotFound handles this case with default header values.

error
*/
type PatchFloatingIpsIDNotFound struct {
	Payload *models.Riaaserror
}

func (o *PatchFloatingIpsIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /floating_ips/{id}][%d] patchFloatingIpsIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchFloatingIpsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchFloatingIpsIDInternalServerError creates a PatchFloatingIpsIDInternalServerError with default headers values
func NewPatchFloatingIpsIDInternalServerError() *PatchFloatingIpsIDInternalServerError {
	return &PatchFloatingIpsIDInternalServerError{}
}

/*PatchFloatingIpsIDInternalServerError handles this case with default header values.

error
*/
type PatchFloatingIpsIDInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *PatchFloatingIpsIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /floating_ips/{id}][%d] patchFloatingIpsIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchFloatingIpsIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchFloatingIpsIDBody FloatingIPPatch
swagger:model PatchFloatingIpsIDBody
*/
type PatchFloatingIpsIDBody struct {

	// The user-defined name for this key
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// target
	Target *PatchFloatingIpsIDParamsBodyTarget `json:"target,omitempty"`
}

// Validate validates this patch floating ips ID body
func (o *PatchFloatingIpsIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchFloatingIpsIDBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *PatchFloatingIpsIDBody) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(o.Target) { // not required
		return nil
	}

	if o.Target != nil {
		if err := o.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchFloatingIpsIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchFloatingIpsIDBody) UnmarshalBinary(b []byte) error {
	var res PatchFloatingIpsIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchFloatingIpsIDParamsBodyTarget NetworkInterfaceIdentity
swagger:model PatchFloatingIpsIDParamsBodyTarget
*/
type PatchFloatingIpsIDParamsBodyTarget struct {

	// The unique identifier for this resource group
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this patch floating ips ID params body target
func (o *PatchFloatingIpsIDParamsBodyTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchFloatingIpsIDParamsBodyTarget) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"target"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchFloatingIpsIDParamsBodyTarget) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchFloatingIpsIDParamsBodyTarget) UnmarshalBinary(b []byte) error {
	var res PatchFloatingIpsIDParamsBodyTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
