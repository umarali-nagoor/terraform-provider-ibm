// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// PostFloatingIpsReader is a Reader for the PostFloatingIps structure.
type PostFloatingIpsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostFloatingIpsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostFloatingIpsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostFloatingIpsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPostFloatingIpsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostFloatingIpsCreated creates a PostFloatingIpsCreated with default headers values
func NewPostFloatingIpsCreated() *PostFloatingIpsCreated {
	return &PostFloatingIpsCreated{}
}

/*PostFloatingIpsCreated handles this case with default header values.

dummy
*/
type PostFloatingIpsCreated struct {
	Payload *models.FloatingIP
}

func (o *PostFloatingIpsCreated) Error() string {
	return fmt.Sprintf("[POST /floating_ips][%d] postFloatingIpsCreated  %+v", 201, o.Payload)
}

func (o *PostFloatingIpsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FloatingIP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFloatingIpsBadRequest creates a PostFloatingIpsBadRequest with default headers values
func NewPostFloatingIpsBadRequest() *PostFloatingIpsBadRequest {
	return &PostFloatingIpsBadRequest{}
}

/*PostFloatingIpsBadRequest handles this case with default header values.

error
*/
type PostFloatingIpsBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PostFloatingIpsBadRequest) Error() string {
	return fmt.Sprintf("[POST /floating_ips][%d] postFloatingIpsBadRequest  %+v", 400, o.Payload)
}

func (o *PostFloatingIpsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostFloatingIpsInternalServerError creates a PostFloatingIpsInternalServerError with default headers values
func NewPostFloatingIpsInternalServerError() *PostFloatingIpsInternalServerError {
	return &PostFloatingIpsInternalServerError{}
}

/*PostFloatingIpsInternalServerError handles this case with default header values.

error
*/
type PostFloatingIpsInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *PostFloatingIpsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /floating_ips][%d] postFloatingIpsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostFloatingIpsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostFloatingIpsBody FloatingIPTemplateWithTarget
swagger:model PostFloatingIpsBody
*/
type PostFloatingIpsBody struct {

	// The user-defined name for this floating ip
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// resource group
	ResourceGroup *PostFloatingIpsParamsBodyResourceGroup `json:"resource_group,omitempty"`

	// target
	Target *PostFloatingIpsParamsBodyTarget `json:"target,omitempty"`

	// zone
	Zone *PostFloatingIpsParamsBodyZone `json:"zone,omitempty"`
}

// Validate validates this post floating ips body
func (o *PostFloatingIpsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostFloatingIpsBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *PostFloatingIpsBody) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(o.ResourceGroup) { // not required
		return nil
	}

	if o.ResourceGroup != nil {
		if err := o.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "resource_group")
			}
			return err
		}
	}

	return nil
}

func (o *PostFloatingIpsBody) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(o.Target) { // not required
		return nil
	}

	if o.Target != nil {
		if err := o.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "target")
			}
			return err
		}
	}

	return nil
}

func (o *PostFloatingIpsBody) validateZone(formats strfmt.Registry) error {

	if swag.IsZero(o.Zone) { // not required
		return nil
	}

	if o.Zone != nil {
		if err := o.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostFloatingIpsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFloatingIpsBody) UnmarshalBinary(b []byte) error {
	var res PostFloatingIpsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostFloatingIpsParamsBodyResourceGroup idreference
swagger:model PostFloatingIpsParamsBodyResourceGroup
*/
type PostFloatingIpsParamsBodyResourceGroup struct {

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this post floating ips params body resource group
func (o *PostFloatingIpsParamsBodyResourceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostFloatingIpsParamsBodyResourceGroup) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"resource_group"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostFloatingIpsParamsBodyResourceGroup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFloatingIpsParamsBodyResourceGroup) UnmarshalBinary(b []byte) error {
	var res PostFloatingIpsParamsBodyResourceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostFloatingIpsParamsBodyTarget NetworkInterfaceIdentityByName
//
// The target this address is to be associated with
swagger:model PostFloatingIpsParamsBodyTarget
*/
type PostFloatingIpsParamsBodyTarget struct {

	// The CRN for this network interface
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this network interface
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this network interface
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post floating ips params body target
func (o *PostFloatingIpsParamsBodyTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostFloatingIpsParamsBodyTarget) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"target"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostFloatingIpsParamsBodyTarget) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"target"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostFloatingIpsParamsBodyTarget) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFloatingIpsParamsBodyTarget) UnmarshalBinary(b []byte) error {
	var res PostFloatingIpsParamsBodyTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostFloatingIpsParamsBodyZone ZoneIdentity
//
// The identity of the zone to provision a floating floating IP in
swagger:model PostFloatingIpsParamsBodyZone
*/
type PostFloatingIpsParamsBodyZone struct {

	// The name for this zone
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post floating ips params body zone
func (o *PostFloatingIpsParamsBodyZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostFloatingIpsParamsBodyZone) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"zone"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostFloatingIpsParamsBodyZone) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFloatingIpsParamsBodyZone) UnmarshalBinary(b []byte) error {
	var res PostFloatingIpsParamsBodyZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
