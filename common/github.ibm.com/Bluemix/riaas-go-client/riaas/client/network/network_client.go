// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFloatingIpsID releases specified floating ip

This request releases a floating ip. This operation cannot be reversed.
*/
func (a *Client) DeleteFloatingIpsID(params *DeleteFloatingIpsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFloatingIpsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFloatingIpsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteFloatingIpsID",
		Method:             "DELETE",
		PathPattern:        "/floating_ips/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFloatingIpsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFloatingIpsIDNoContent), nil

}

/*
DeleteNetworkAclsID deletes specified network ACL

This request deletes a network ACL. This operation cannot be reversed.
*/
func (a *Client) DeleteNetworkAclsID(params *DeleteNetworkAclsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkAclsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkAclsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNetworkAclsID",
		Method:             "DELETE",
		PathPattern:        "/network_acls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkAclsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNetworkAclsIDNoContent), nil

}

/*
DeleteNetworkAclsNetworkACLIDRulesID deletes specified rule

This request deletes a rule. This operation cannot be reversed.
*/
func (a *Client) DeleteNetworkAclsNetworkACLIDRulesID(params *DeleteNetworkAclsNetworkACLIDRulesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkAclsNetworkACLIDRulesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkAclsNetworkACLIDRulesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNetworkAclsNetworkACLIDRulesID",
		Method:             "DELETE",
		PathPattern:        "/network_acls/{network_acl_id}/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkAclsNetworkACLIDRulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNetworkAclsNetworkACLIDRulesIDNoContent), nil

}

/*
DeletePublicGatewaysID deletes specified public gateway

This request deletes a public gateway. This operation cannot be reversed.
*/
func (a *Client) DeletePublicGatewaysID(params *DeletePublicGatewaysIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePublicGatewaysIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicGatewaysIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePublicGatewaysID",
		Method:             "DELETE",
		PathPattern:        "/public_gateways/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePublicGatewaysIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePublicGatewaysIDNoContent), nil

}

/*
DeleteSecurityGroupsID deletes a security group

Deletes a security group. This operation cannot be reversed.
*/
func (a *Client) DeleteSecurityGroupsID(params *DeleteSecurityGroupsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSecurityGroupsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecurityGroupsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSecurityGroupsID",
		Method:             "DELETE",
		PathPattern:        "/security_groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSecurityGroupsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSecurityGroupsIDNoContent), nil

}

/*
DeleteSecurityGroupsSecurityGroupIDNetworkInterfacesID removes a network interface from a security group

Removes a network interface from a security group.
*/
func (a *Client) DeleteSecurityGroupsSecurityGroupIDNetworkInterfacesID(params *DeleteSecurityGroupsSecurityGroupIDNetworkInterfacesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSecurityGroupsSecurityGroupIDNetworkInterfacesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecurityGroupsSecurityGroupIDNetworkInterfacesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSecurityGroupsSecurityGroupIDNetworkInterfacesID",
		Method:             "DELETE",
		PathPattern:        "/security_groups/{security_group_id}/network_interfaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSecurityGroupsSecurityGroupIDNetworkInterfacesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSecurityGroupsSecurityGroupIDNetworkInterfacesIDNoContent), nil

}

/*
DeleteSecurityGroupsSecurityGroupIDRulesID deletes a security group rule

Deletes a rule from a security group. This operation cannot be reversed.
*/
func (a *Client) DeleteSecurityGroupsSecurityGroupIDRulesID(params *DeleteSecurityGroupsSecurityGroupIDRulesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSecurityGroupsSecurityGroupIDRulesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecurityGroupsSecurityGroupIDRulesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSecurityGroupsSecurityGroupIDRulesID",
		Method:             "DELETE",
		PathPattern:        "/security_groups/{security_group_id}/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSecurityGroupsSecurityGroupIDRulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSecurityGroupsSecurityGroupIDRulesIDNoContent), nil

}

/*
DeleteSubnetsID deletes specified subnet

This request deletes a subnet. This operation cannot be reversed.
*/
func (a *Client) DeleteSubnetsID(params *DeleteSubnetsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSubnetsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubnetsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSubnetsID",
		Method:             "DELETE",
		PathPattern:        "/subnets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubnetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSubnetsIDNoContent), nil

}

/*
DeleteSubnetsSubnetIDPublicGateway detaches a public gateway from a subnet

This request detaches the public gateway from the subnet specified by the subnet identifier in the URL.
*/
func (a *Client) DeleteSubnetsSubnetIDPublicGateway(params *DeleteSubnetsSubnetIDPublicGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSubnetsSubnetIDPublicGatewayNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubnetsSubnetIDPublicGatewayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSubnetsSubnetIDPublicGateway",
		Method:             "DELETE",
		PathPattern:        "/subnets/{subnet_id}/public_gateway",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubnetsSubnetIDPublicGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSubnetsSubnetIDPublicGatewayNoContent), nil

}

/*
DeleteVpcsID deletes specified v p c

This request deletes a VPC. This operation cannot be reversed. In order for this request to succeed, the VPC must not contain any servers or volumes.
*/
func (a *Client) DeleteVpcsID(params *DeleteVpcsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVpcsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVpcsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVpcsID",
		Method:             "DELETE",
		PathPattern:        "/vpcs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVpcsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVpcsIDNoContent), nil

}

/*
DeleteVpcsVpcIDAddressPrefixesID deletes specified address pool prefix

This request deletes a prefix. This operation cannot be reversed. Delete will fail if existing subnets use addresses from this prefix.
*/
func (a *Client) DeleteVpcsVpcIDAddressPrefixesID(params *DeleteVpcsVpcIDAddressPrefixesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVpcsVpcIDAddressPrefixesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVpcsVpcIDAddressPrefixesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVpcsVpcIDAddressPrefixesID",
		Method:             "DELETE",
		PathPattern:        "/vpcs/{vpc_id}/address_prefixes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVpcsVpcIDAddressPrefixesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVpcsVpcIDAddressPrefixesIDNoContent), nil

}

/*
GetFloatingIps retrieves all floating ips

This request retrieves all floating ips in the region. Floating IPs allow ingress and egress traffic from the Internet to a server.
*/
func (a *Client) GetFloatingIps(params *GetFloatingIpsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFloatingIpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFloatingIpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFloatingIps",
		Method:             "GET",
		PathPattern:        "/floating_ips",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFloatingIpsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFloatingIpsOK), nil

}

/*
GetFloatingIpsID retrieves specified floating ip

This request retrieves a single floating ip specified by the identifier in the URL.
*/
func (a *Client) GetFloatingIpsID(params *GetFloatingIpsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFloatingIpsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFloatingIpsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFloatingIpsID",
		Method:             "GET",
		PathPattern:        "/floating_ips/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFloatingIpsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFloatingIpsIDOK), nil

}

/*
GetNetworkAcls retrieves all network acls

This request retrieves all network ACLs in the region. A network ACL defines a set of packet filtering (5-tuple) rules for all traffic in and out of a subnet. Both allow and deny rules can be defined, and rules are stateless such that reverse traffic in response to allowed traffic is not automatically permitted.
*/
func (a *Client) GetNetworkAcls(params *GetNetworkAclsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkAclsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkAclsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworkAcls",
		Method:             "GET",
		PathPattern:        "/network_acls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkAclsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkAclsOK), nil

}

/*
GetNetworkAclsID retrieves specified network ACL

This request retrieves a single network ACL specified by the identifier in the URL.
*/
func (a *Client) GetNetworkAclsID(params *GetNetworkAclsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkAclsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkAclsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworkAclsID",
		Method:             "GET",
		PathPattern:        "/network_acls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkAclsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkAclsIDOK), nil

}

/*
GetNetworkAclsNetworkACLIDRules retrieves all rules for a network ACL

This request retrieves all rules for a network ACL. These rules can allow or deny traffic between a source CIDR block and a destination CIDR block over a particular protocol and port range.
*/
func (a *Client) GetNetworkAclsNetworkACLIDRules(params *GetNetworkAclsNetworkACLIDRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkAclsNetworkACLIDRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkAclsNetworkACLIDRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworkAclsNetworkACLIDRules",
		Method:             "GET",
		PathPattern:        "/network_acls/{network_acl_id}/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkAclsNetworkACLIDRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkAclsNetworkACLIDRulesOK), nil

}

/*
GetNetworkAclsNetworkACLIDRulesID retrieves specified rule

This request retrieves a single rule specified by the identifier in the URL.
*/
func (a *Client) GetNetworkAclsNetworkACLIDRulesID(params *GetNetworkAclsNetworkACLIDRulesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkAclsNetworkACLIDRulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkAclsNetworkACLIDRulesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNetworkAclsNetworkACLIDRulesID",
		Method:             "GET",
		PathPattern:        "/network_acls/{network_acl_id}/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkAclsNetworkACLIDRulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkAclsNetworkACLIDRulesIDOK), nil

}

/*
GetPublicGateways retrieves public gateways

This request retrieves all public gateways. A public gateway is a virtual network device associated with a VPC which allows access to the Internet. A public gateway resides in a zone and can only be connected to subnets in the same zone.
*/
func (a *Client) GetPublicGateways(params *GetPublicGatewaysParams, authInfo runtime.ClientAuthInfoWriter) (*GetPublicGatewaysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGatewaysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGateways",
		Method:             "GET",
		PathPattern:        "/public_gateways",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGatewaysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGatewaysOK), nil

}

/*
GetPublicGatewaysID retrieves specified public gateway

This request retrieves a single public gateway specified by the identifier in the URL.
*/
func (a *Client) GetPublicGatewaysID(params *GetPublicGatewaysIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPublicGatewaysIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGatewaysIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGatewaysID",
		Method:             "GET",
		PathPattern:        "/public_gateways/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGatewaysIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicGatewaysIDOK), nil

}

/*
GetSecurityGroups retrieves all security groups

Retrieves a paginated list of all security groups belonging to this account.
*/
func (a *Client) GetSecurityGroups(params *GetSecurityGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityGroups",
		Method:             "GET",
		PathPattern:        "/security_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecurityGroupsOK), nil

}

/*
GetSecurityGroupsID retrieves a security group

Retrieves a single security group specified by the identifier in the URL path.
*/
func (a *Client) GetSecurityGroupsID(params *GetSecurityGroupsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityGroupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityGroupsID",
		Method:             "GET",
		PathPattern:        "/security_groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityGroupsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecurityGroupsIDOK), nil

}

/*
GetSecurityGroupsSecurityGroupIDNetworkInterfaces retrieves a security group s network interfaces

Retrieves a paginated collection of all the network interfaces in a security group.
*/
func (a *Client) GetSecurityGroupsSecurityGroupIDNetworkInterfaces(params *GetSecurityGroupsSecurityGroupIDNetworkInterfacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityGroupsSecurityGroupIDNetworkInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupsSecurityGroupIDNetworkInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityGroupsSecurityGroupIDNetworkInterfaces",
		Method:             "GET",
		PathPattern:        "/security_groups/{security_group_id}/network_interfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityGroupsSecurityGroupIDNetworkInterfacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecurityGroupsSecurityGroupIDNetworkInterfacesOK), nil

}

/*
GetSecurityGroupsSecurityGroupIDNetworkInterfacesID gets a network interface in a security group

Gets a network interface in a security group.
*/
func (a *Client) GetSecurityGroupsSecurityGroupIDNetworkInterfacesID(params *GetSecurityGroupsSecurityGroupIDNetworkInterfacesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityGroupsSecurityGroupIDNetworkInterfacesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupsSecurityGroupIDNetworkInterfacesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityGroupsSecurityGroupIDNetworkInterfacesID",
		Method:             "GET",
		PathPattern:        "/security_groups/{security_group_id}/network_interfaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityGroupsSecurityGroupIDNetworkInterfacesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecurityGroupsSecurityGroupIDNetworkInterfacesIDOK), nil

}

/*
GetSecurityGroupsSecurityGroupIDRules retrieves all the rules of a security group

Retrieves all the rules of a particular security group.
*/
func (a *Client) GetSecurityGroupsSecurityGroupIDRules(params *GetSecurityGroupsSecurityGroupIDRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityGroupsSecurityGroupIDRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupsSecurityGroupIDRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityGroupsSecurityGroupIDRules",
		Method:             "GET",
		PathPattern:        "/security_groups/{security_group_id}/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityGroupsSecurityGroupIDRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecurityGroupsSecurityGroupIDRulesOK), nil

}

/*
GetSecurityGroupsSecurityGroupIDRulesID retrieves a security group rule

Retrieves a single security group rule specified by identifier.
*/
func (a *Client) GetSecurityGroupsSecurityGroupIDRulesID(params *GetSecurityGroupsSecurityGroupIDRulesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecurityGroupsSecurityGroupIDRulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupsSecurityGroupIDRulesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSecurityGroupsSecurityGroupIDRulesID",
		Method:             "GET",
		PathPattern:        "/security_groups/{security_group_id}/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecurityGroupsSecurityGroupIDRulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecurityGroupsSecurityGroupIDRulesIDOK), nil

}

/*
GetSubnets retrieves all subnets

This request retrieves all subnets in the region. Subnets are contiguous ranges of IP addresses specified in CIDR block notation. Each subnet is within a particular zone and cannot span multiple zones or regions.
*/
func (a *Client) GetSubnets(params *GetSubnetsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSubnets",
		Method:             "GET",
		PathPattern:        "/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubnetsOK), nil

}

/*
GetSubnetsID retrieves specified subnet

This request retrieves a single subnet specified by the identifier in the URL.
*/
func (a *Client) GetSubnetsID(params *GetSubnetsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubnetsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubnetsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSubnetsID",
		Method:             "GET",
		PathPattern:        "/subnets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubnetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubnetsIDOK), nil

}

/*
GetSubnetsSubnetIDNetworkACL retrieves attached public gatway

This request retrieves the network ACL attached to the subnet specified by the identifier in the URL.
*/
func (a *Client) GetSubnetsSubnetIDNetworkACL(params *GetSubnetsSubnetIDNetworkACLParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubnetsSubnetIDNetworkACLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubnetsSubnetIDNetworkACLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSubnetsSubnetIDNetworkACL",
		Method:             "GET",
		PathPattern:        "/subnets/{subnet_id}/network_acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubnetsSubnetIDNetworkACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubnetsSubnetIDNetworkACLOK), nil

}

/*
GetSubnetsSubnetIDPublicGateway retrieves attached public gateway

This request retrieves the public gateway attached to the subnet specified by the identifier in the URL.
*/
func (a *Client) GetSubnetsSubnetIDPublicGateway(params *GetSubnetsSubnetIDPublicGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubnetsSubnetIDPublicGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubnetsSubnetIDPublicGatewayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSubnetsSubnetIDPublicGateway",
		Method:             "GET",
		PathPattern:        "/subnets/{subnet_id}/public_gateway",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubnetsSubnetIDPublicGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubnetsSubnetIDPublicGatewayOK), nil

}

/*
GetVpcs retrieves all v p cs

This request retrieves all VPCs. A VPC is a virtual network that belongs to an account and provides logical isolation from other networks. A VPC is made up of resources in one or more zones. VPCs are global and each can contain resources in zones from any region.
*/
func (a *Client) GetVpcs(params *GetVpcsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpcsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpcsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpcs",
		Method:             "GET",
		PathPattern:        "/vpcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpcsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpcsOK), nil

}

/*
GetVpcsID retrieves specified v p c

This request retrieves a single VPC specified by the identifier in the URL.
*/
func (a *Client) GetVpcsID(params *GetVpcsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpcsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpcsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpcsID",
		Method:             "GET",
		PathPattern:        "/vpcs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpcsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpcsIDOK), nil

}

/*
GetVpcsVpcIDAddressPrefixes retrieves all address pool prefixes for a v p c

This request retrieves all address pool prefixes for a VPC.
*/
func (a *Client) GetVpcsVpcIDAddressPrefixes(params *GetVpcsVpcIDAddressPrefixesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpcsVpcIDAddressPrefixesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpcsVpcIDAddressPrefixesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpcsVpcIDAddressPrefixes",
		Method:             "GET",
		PathPattern:        "/vpcs/{vpc_id}/address_prefixes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpcsVpcIDAddressPrefixesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpcsVpcIDAddressPrefixesOK), nil

}

/*
GetVpcsVpcIDAddressPrefixesID retrieves specified v p c

This request retrieves a single prefix specified by the identifier in the URL.
*/
func (a *Client) GetVpcsVpcIDAddressPrefixesID(params *GetVpcsVpcIDAddressPrefixesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpcsVpcIDAddressPrefixesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpcsVpcIDAddressPrefixesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpcsVpcIDAddressPrefixesID",
		Method:             "GET",
		PathPattern:        "/vpcs/{vpc_id}/address_prefixes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpcsVpcIDAddressPrefixesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpcsVpcIDAddressPrefixesIDOK), nil

}

/*
GetVpcsVpcIDDefaultSecurityGroup retrieves default security group

This request retrieves the default security group for the VPC specified by the identifier in the URL. The default security group is applied to any new network interfaces in the VPC which do not specify a security group.
*/
func (a *Client) GetVpcsVpcIDDefaultSecurityGroup(params *GetVpcsVpcIDDefaultSecurityGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpcsVpcIDDefaultSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpcsVpcIDDefaultSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpcsVpcIDDefaultSecurityGroup",
		Method:             "GET",
		PathPattern:        "/vpcs/{vpc_id}/default_security_group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpcsVpcIDDefaultSecurityGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpcsVpcIDDefaultSecurityGroupOK), nil

}

/*
PatchFloatingIpsID updates specified floating ip

This request updates a floating ip's name and/or target.
*/
func (a *Client) PatchFloatingIpsID(params *PatchFloatingIpsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchFloatingIpsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFloatingIpsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchFloatingIpsID",
		Method:             "PATCH",
		PathPattern:        "/floating_ips/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchFloatingIpsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchFloatingIpsIDOK), nil

}

/*
PatchNetworkAclsID updates a network ACL

This request updates a network ACL's name.
*/
func (a *Client) PatchNetworkAclsID(params *PatchNetworkAclsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchNetworkAclsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNetworkAclsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchNetworkAclsID",
		Method:             "PATCH",
		PathPattern:        "/network_acls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchNetworkAclsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchNetworkAclsIDOK), nil

}

/*
PatchNetworkAclsNetworkACLIDRulesID updates a rule

This request updates a rule with the information in a provided rule patch. The rule patch object is structured in the same way as a retrieved rule and contains only the information to be updated.
*/
func (a *Client) PatchNetworkAclsNetworkACLIDRulesID(params *PatchNetworkAclsNetworkACLIDRulesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchNetworkAclsNetworkACLIDRulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNetworkAclsNetworkACLIDRulesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchNetworkAclsNetworkACLIDRulesID",
		Method:             "PATCH",
		PathPattern:        "/network_acls/{network_acl_id}/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchNetworkAclsNetworkACLIDRulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchNetworkAclsNetworkACLIDRulesIDOK), nil

}

/*
PatchPublicGatewaysID updates a public gateway s name

This request updates a public gateway's name.
*/
func (a *Client) PatchPublicGatewaysID(params *PatchPublicGatewaysIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchPublicGatewaysIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPublicGatewaysIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPublicGatewaysID",
		Method:             "PATCH",
		PathPattern:        "/public_gateways/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchPublicGatewaysIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPublicGatewaysIDOK), nil

}

/*
PatchSecurityGroupsID updates a security group

Updates the properties of an existing security group.
*/
func (a *Client) PatchSecurityGroupsID(params *PatchSecurityGroupsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSecurityGroupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSecurityGroupsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSecurityGroupsID",
		Method:             "PATCH",
		PathPattern:        "/security_groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSecurityGroupsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSecurityGroupsIDOK), nil

}

/*
PatchSecurityGroupsSecurityGroupIDRulesID updates a security group rule

Updates the properties of an existing rule on a security group.
*/
func (a *Client) PatchSecurityGroupsSecurityGroupIDRulesID(params *PatchSecurityGroupsSecurityGroupIDRulesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSecurityGroupsSecurityGroupIDRulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSecurityGroupsSecurityGroupIDRulesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSecurityGroupsSecurityGroupIDRulesID",
		Method:             "PATCH",
		PathPattern:        "/security_groups/{security_group_id}/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSecurityGroupsSecurityGroupIDRulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSecurityGroupsSecurityGroupIDRulesIDOK), nil

}

/*
PatchSubnetsID updates specified subnet

This request updates a subnet with the information in a provided subnet patch. The subnet patch object is structured in the same way as a retrieved subnet and contains only the information to be updated.
*/
func (a *Client) PatchSubnetsID(params *PatchSubnetsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSubnetsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSubnetsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSubnetsID",
		Method:             "PATCH",
		PathPattern:        "/subnets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSubnetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSubnetsIDOK), nil

}

/*
PatchVpcsID updates specified v p c

This request updates a VPC's name.
*/
func (a *Client) PatchVpcsID(params *PatchVpcsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchVpcsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchVpcsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchVpcsID",
		Method:             "PATCH",
		PathPattern:        "/vpcs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchVpcsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchVpcsIDOK), nil

}

/*
PatchVpcsVpcIDAddressPrefixesID updates an address pool prefix

This request updates a prefix with the information in a provided prefix patch. The prefix patch object is structured in the same way as a retrieved prefix and contains only the information to be updated. The update will fail if it would result in existing subnets falling outside of the address pool. The update will fail if the new prefix overlaps any other prefix in the VPC's address pools.
*/
func (a *Client) PatchVpcsVpcIDAddressPrefixesID(params *PatchVpcsVpcIDAddressPrefixesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchVpcsVpcIDAddressPrefixesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchVpcsVpcIDAddressPrefixesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchVpcsVpcIDAddressPrefixesID",
		Method:             "PATCH",
		PathPattern:        "/vpcs/{vpc_id}/address_prefixes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchVpcsVpcIDAddressPrefixesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchVpcsVpcIDAddressPrefixesIDOK), nil

}

/*
PostFloatingIps reserves a floating ip

This request reserves a new floating ip.
*/
func (a *Client) PostFloatingIps(params *PostFloatingIpsParams, authInfo runtime.ClientAuthInfoWriter) (*PostFloatingIpsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostFloatingIpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostFloatingIps",
		Method:             "POST",
		PathPattern:        "/floating_ips",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostFloatingIpsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostFloatingIpsCreated), nil

}

/*
PostNetworkAcls creates a network ACL

This request creates a new network ACL from a network ACL template. The network ACL template object is structured in the same way as a retrieved network ACL, and contains the information necessary to create the new network ACL.
*/
func (a *Client) PostNetworkAcls(params *PostNetworkAclsParams, authInfo runtime.ClientAuthInfoWriter) (*PostNetworkAclsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworkAclsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworkAcls",
		Method:             "POST",
		PathPattern:        "/network_acls",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNetworkAclsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNetworkAclsCreated), nil

}

/*
PostNetworkAclsNetworkACLIDRules creates a rule

This request creates a new rule from a rule template. The rule template object is structured in the same way as a retrieved rule, and contains the information necessary to create the new rule.
*/
func (a *Client) PostNetworkAclsNetworkACLIDRules(params *PostNetworkAclsNetworkACLIDRulesParams, authInfo runtime.ClientAuthInfoWriter) (*PostNetworkAclsNetworkACLIDRulesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNetworkAclsNetworkACLIDRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNetworkAclsNetworkACLIDRules",
		Method:             "POST",
		PathPattern:        "/network_acls/{network_acl_id}/rules",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNetworkAclsNetworkACLIDRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNetworkAclsNetworkACLIDRulesCreated), nil

}

/*
PostPublicGateways creates a public gateway

This request creates a new public gateway from a public gateway template. A public gateway can be created with an existing unbound floating address. If a floating address is not supplied, one will be created and bound to the public gateway. Once a public gateway is created, its external address cannot be unbound. The only way to rebind a floating address bound to a public gateway is to delete the gateway.
*/
func (a *Client) PostPublicGateways(params *PostPublicGatewaysParams, authInfo runtime.ClientAuthInfoWriter) (*PostPublicGatewaysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicGatewaysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPublicGateways",
		Method:             "POST",
		PathPattern:        "/public_gateways",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPublicGatewaysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicGatewaysCreated), nil

}

/*
PostSecurityGroups creates a security group

Creates a new security group.
*/
func (a *Client) PostSecurityGroups(params *PostSecurityGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*PostSecurityGroupsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecurityGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSecurityGroups",
		Method:             "POST",
		PathPattern:        "/security_groups",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSecurityGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSecurityGroupsCreated), nil

}

/*
PostSecurityGroupsSecurityGroupIDRules creates a security group rule

Creates a new rule on an existing security group.
*/
func (a *Client) PostSecurityGroupsSecurityGroupIDRules(params *PostSecurityGroupsSecurityGroupIDRulesParams, authInfo runtime.ClientAuthInfoWriter) (*PostSecurityGroupsSecurityGroupIDRulesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecurityGroupsSecurityGroupIDRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSecurityGroupsSecurityGroupIDRules",
		Method:             "POST",
		PathPattern:        "/security_groups/{security_group_id}/rules",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSecurityGroupsSecurityGroupIDRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSecurityGroupsSecurityGroupIDRulesCreated), nil

}

/*
PostSubnets creates a subnet

This request creates a new subnet from a subnet template. The subnet template object is structured in the same way as a retrieved subnet, and contains the information necessary to create the new subnet.
*/
func (a *Client) PostSubnets(params *PostSubnetsParams, authInfo runtime.ClientAuthInfoWriter) (*PostSubnetsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSubnets",
		Method:             "POST",
		PathPattern:        "/subnets",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSubnetsCreated), nil

}

/*
PostVpcs creates a v p c

This request creates a new VPC from a VPC template. The VPC template object is structured in the same way as a retrieved VPC, and contains the information necessary to create the new VPC.
*/
func (a *Client) PostVpcs(params *PostVpcsParams, authInfo runtime.ClientAuthInfoWriter) (*PostVpcsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVpcsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVpcs",
		Method:             "POST",
		PathPattern:        "/vpcs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVpcsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVpcsCreated), nil

}

/*
PostVpcsVpcIDAddressPrefixes creates an address pool prefix

This request creates a new prefix from a prefix template. The prefix template object is structured in the same way as a retrieved prefix, and contains the information necessary to create the new prefix.
*/
func (a *Client) PostVpcsVpcIDAddressPrefixes(params *PostVpcsVpcIDAddressPrefixesParams, authInfo runtime.ClientAuthInfoWriter) (*PostVpcsVpcIDAddressPrefixesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVpcsVpcIDAddressPrefixesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVpcsVpcIDAddressPrefixes",
		Method:             "POST",
		PathPattern:        "/vpcs/{vpc_id}/address_prefixes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVpcsVpcIDAddressPrefixesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVpcsVpcIDAddressPrefixesCreated), nil

}

/*
PutSecurityGroupsSecurityGroupIDNetworkInterfacesID adds a network interface to a security group

Adds an existing network interface to an existing security group.
*/
func (a *Client) PutSecurityGroupsSecurityGroupIDNetworkInterfacesID(params *PutSecurityGroupsSecurityGroupIDNetworkInterfacesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSecurityGroupsSecurityGroupIDNetworkInterfacesIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSecurityGroupsSecurityGroupIDNetworkInterfacesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSecurityGroupsSecurityGroupIDNetworkInterfacesID",
		Method:             "PUT",
		PathPattern:        "/security_groups/{security_group_id}/network_interfaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSecurityGroupsSecurityGroupIDNetworkInterfacesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSecurityGroupsSecurityGroupIDNetworkInterfacesIDCreated), nil

}

/*
PutSubnetsSubnetIDNetworkACL attaches a network ACL to a subnet

This request attaches the network ACL specified in the request body to the subnet specified by the subnet identifier in the URL. If a network ACL is already attached to the subnet, it is detached before the new network ACL is attached.
*/
func (a *Client) PutSubnetsSubnetIDNetworkACL(params *PutSubnetsSubnetIDNetworkACLParams, authInfo runtime.ClientAuthInfoWriter) (*PutSubnetsSubnetIDNetworkACLCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSubnetsSubnetIDNetworkACLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSubnetsSubnetIDNetworkACL",
		Method:             "PUT",
		PathPattern:        "/subnets/{subnet_id}/network_acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSubnetsSubnetIDNetworkACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSubnetsSubnetIDNetworkACLCreated), nil

}

/*
PutSubnetsSubnetIDPublicGateway attaches a public gateway to a subnet

This request attaches the public gateway specified in the request body to the subnet specified by the subnet identifier in the URL. If a public gateway is already attached to the subnet, it is detached before the new public gateway is attached.
*/
func (a *Client) PutSubnetsSubnetIDPublicGateway(params *PutSubnetsSubnetIDPublicGatewayParams, authInfo runtime.ClientAuthInfoWriter) (*PutSubnetsSubnetIDPublicGatewayCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSubnetsSubnetIDPublicGatewayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSubnetsSubnetIDPublicGateway",
		Method:             "PUT",
		PathPattern:        "/subnets/{subnet_id}/public_gateway",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSubnetsSubnetIDPublicGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSubnetsSubnetIDPublicGatewayCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
