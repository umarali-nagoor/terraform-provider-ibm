// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// GetSubnetsSubnetIDNetworkACLReader is a Reader for the GetSubnetsSubnetIDNetworkACL structure.
type GetSubnetsSubnetIDNetworkACLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubnetsSubnetIDNetworkACLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSubnetsSubnetIDNetworkACLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetSubnetsSubnetIDNetworkACLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSubnetsSubnetIDNetworkACLInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSubnetsSubnetIDNetworkACLOK creates a GetSubnetsSubnetIDNetworkACLOK with default headers values
func NewGetSubnetsSubnetIDNetworkACLOK() *GetSubnetsSubnetIDNetworkACLOK {
	return &GetSubnetsSubnetIDNetworkACLOK{}
}

/*GetSubnetsSubnetIDNetworkACLOK handles this case with default header values.

dummy
*/
type GetSubnetsSubnetIDNetworkACLOK struct {
	Payload *models.NetworkACL
}

func (o *GetSubnetsSubnetIDNetworkACLOK) Error() string {
	return fmt.Sprintf("[GET /subnets/{subnet_id}/network_acl][%d] getSubnetsSubnetIdNetworkAclOK  %+v", 200, o.Payload)
}

func (o *GetSubnetsSubnetIDNetworkACLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkACL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubnetsSubnetIDNetworkACLNotFound creates a GetSubnetsSubnetIDNetworkACLNotFound with default headers values
func NewGetSubnetsSubnetIDNetworkACLNotFound() *GetSubnetsSubnetIDNetworkACLNotFound {
	return &GetSubnetsSubnetIDNetworkACLNotFound{}
}

/*GetSubnetsSubnetIDNetworkACLNotFound handles this case with default header values.

error
*/
type GetSubnetsSubnetIDNetworkACLNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetSubnetsSubnetIDNetworkACLNotFound) Error() string {
	return fmt.Sprintf("[GET /subnets/{subnet_id}/network_acl][%d] getSubnetsSubnetIdNetworkAclNotFound  %+v", 404, o.Payload)
}

func (o *GetSubnetsSubnetIDNetworkACLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubnetsSubnetIDNetworkACLInternalServerError creates a GetSubnetsSubnetIDNetworkACLInternalServerError with default headers values
func NewGetSubnetsSubnetIDNetworkACLInternalServerError() *GetSubnetsSubnetIDNetworkACLInternalServerError {
	return &GetSubnetsSubnetIDNetworkACLInternalServerError{}
}

/*GetSubnetsSubnetIDNetworkACLInternalServerError handles this case with default header values.

error
*/
type GetSubnetsSubnetIDNetworkACLInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *GetSubnetsSubnetIDNetworkACLInternalServerError) Error() string {
	return fmt.Sprintf("[GET /subnets/{subnet_id}/network_acl][%d] getSubnetsSubnetIdNetworkAclInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSubnetsSubnetIDNetworkACLInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
