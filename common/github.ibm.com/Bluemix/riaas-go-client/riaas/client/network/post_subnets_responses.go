// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// PostSubnetsReader is a Reader for the PostSubnets structure.
type PostSubnetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSubnetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostSubnetsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostSubnetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPostSubnetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostSubnetsCreated creates a PostSubnetsCreated with default headers values
func NewPostSubnetsCreated() *PostSubnetsCreated {
	return &PostSubnetsCreated{}
}

/*PostSubnetsCreated handles this case with default header values.

dummy
*/
type PostSubnetsCreated struct {
	Payload *models.Subnet
}

func (o *PostSubnetsCreated) Error() string {
	return fmt.Sprintf("[POST /subnets][%d] postSubnetsCreated  %+v", 201, o.Payload)
}

func (o *PostSubnetsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Subnet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSubnetsBadRequest creates a PostSubnetsBadRequest with default headers values
func NewPostSubnetsBadRequest() *PostSubnetsBadRequest {
	return &PostSubnetsBadRequest{}
}

/*PostSubnetsBadRequest handles this case with default header values.

error
*/
type PostSubnetsBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PostSubnetsBadRequest) Error() string {
	return fmt.Sprintf("[POST /subnets][%d] postSubnetsBadRequest  %+v", 400, o.Payload)
}

func (o *PostSubnetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSubnetsInternalServerError creates a PostSubnetsInternalServerError with default headers values
func NewPostSubnetsInternalServerError() *PostSubnetsInternalServerError {
	return &PostSubnetsInternalServerError{}
}

/*PostSubnetsInternalServerError handles this case with default header values.

error
*/
type PostSubnetsInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *PostSubnetsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /subnets][%d] postSubnetsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostSubnetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostSubnetsBody SubnetTemplate
swagger:model PostSubnetsBody
*/
type PostSubnetsBody struct {

	// The IP version(s) supported by this subnet; if unspecified, `ipv4` is used
	// Enum: [ipv4 ipv6 both]
	IPVersion string `json:"ip_version,omitempty"`

	// The IPv4 range of the subnet, expressed in CIDR format
	IPV4CidrBlock string `json:"ipv4_cidr_block,omitempty"`

	// The user-defined name for this subnet
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// network acl
	NetworkACL *PostSubnetsParamsBodyNetworkACL `json:"network_acl,omitempty"`

	// public gateway
	PublicGateway *PostSubnetsParamsBodyPublicGateway `json:"public_gateway,omitempty"`

	// resource group
	ResourceGroup *PostSubnetsParamsBodyResourceGroup `json:"resource_group,omitempty"`

	// The total number of IPv4 addresses required
	TotalIPV4AddressCount int64 `json:"total_ipv4_address_count,omitempty"`

	// vpc
	Vpc *PostSubnetsParamsBodyVpc `json:"vpc,omitempty"`

	// zone
	Zone *PostSubnetsParamsBodyZone `json:"zone,omitempty"`
}

// Validate validates this post subnets body
func (o *PostSubnetsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkACL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVpc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postSubnetsBodyTypeIPVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipv4","ipv6","both"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postSubnetsBodyTypeIPVersionPropEnum = append(postSubnetsBodyTypeIPVersionPropEnum, v)
	}
}

const (

	// PostSubnetsBodyIPVersionIPV4 captures enum value "ipv4"
	PostSubnetsBodyIPVersionIPV4 string = "ipv4"

	// PostSubnetsBodyIPVersionIPV6 captures enum value "ipv6"
	PostSubnetsBodyIPVersionIPV6 string = "ipv6"

	// PostSubnetsBodyIPVersionBoth captures enum value "both"
	PostSubnetsBodyIPVersionBoth string = "both"
)

// prop value enum
func (o *PostSubnetsBody) validateIPVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postSubnetsBodyTypeIPVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PostSubnetsBody) validateIPVersion(formats strfmt.Registry) error {

	if swag.IsZero(o.IPVersion) { // not required
		return nil
	}

	// value enum
	if err := o.validateIPVersionEnum("body"+"."+"ip_version", "body", o.IPVersion); err != nil {
		return err
	}

	return nil
}

func (o *PostSubnetsBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *PostSubnetsBody) validateNetworkACL(formats strfmt.Registry) error {

	if swag.IsZero(o.NetworkACL) { // not required
		return nil
	}

	if o.NetworkACL != nil {
		if err := o.NetworkACL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "network_acl")
			}
			return err
		}
	}

	return nil
}

func (o *PostSubnetsBody) validatePublicGateway(formats strfmt.Registry) error {

	if swag.IsZero(o.PublicGateway) { // not required
		return nil
	}

	if o.PublicGateway != nil {
		if err := o.PublicGateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "public_gateway")
			}
			return err
		}
	}

	return nil
}

func (o *PostSubnetsBody) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(o.ResourceGroup) { // not required
		return nil
	}

	if o.ResourceGroup != nil {
		if err := o.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "resource_group")
			}
			return err
		}
	}

	return nil
}

func (o *PostSubnetsBody) validateVpc(formats strfmt.Registry) error {

	if swag.IsZero(o.Vpc) { // not required
		return nil
	}

	if o.Vpc != nil {
		if err := o.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "vpc")
			}
			return err
		}
	}

	return nil
}

func (o *PostSubnetsBody) validateZone(formats strfmt.Registry) error {

	if swag.IsZero(o.Zone) { // not required
		return nil
	}

	if o.Zone != nil {
		if err := o.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSubnetsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSubnetsBody) UnmarshalBinary(b []byte) error {
	var res PostSubnetsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSubnetsParamsBodyNetworkACL NetworkACLIdentityByName
//
// The network ACL to use for this subnet; if unspecified, the default network ACL for the VPC is used
swagger:model PostSubnetsParamsBodyNetworkACL
*/
type PostSubnetsParamsBodyNetworkACL struct {

	// The CRN for this network ACL
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this network ACL
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this network ACL
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post subnets params body network ACL
func (o *PostSubnetsParamsBodyNetworkACL) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSubnetsParamsBodyNetworkACL) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"network_acl"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostSubnetsParamsBodyNetworkACL) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"network_acl"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSubnetsParamsBodyNetworkACL) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSubnetsParamsBodyNetworkACL) UnmarshalBinary(b []byte) error {
	var res PostSubnetsParamsBodyNetworkACL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSubnetsParamsBodyPublicGateway PublicGatewayIdentity
//
// The public gateway to handle internet bound traffic for this subnet.
swagger:model PostSubnetsParamsBodyPublicGateway
*/
type PostSubnetsParamsBodyPublicGateway struct {

	// The unique identifier for this public gateway
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this post subnets params body public gateway
func (o *PostSubnetsParamsBodyPublicGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSubnetsParamsBodyPublicGateway) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"public_gateway"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSubnetsParamsBodyPublicGateway) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSubnetsParamsBodyPublicGateway) UnmarshalBinary(b []byte) error {
	var res PostSubnetsParamsBodyPublicGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSubnetsParamsBodyResourceGroup idreference
swagger:model PostSubnetsParamsBodyResourceGroup
*/
type PostSubnetsParamsBodyResourceGroup struct {

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this post subnets params body resource group
func (o *PostSubnetsParamsBodyResourceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSubnetsParamsBodyResourceGroup) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"resource_group"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSubnetsParamsBodyResourceGroup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSubnetsParamsBodyResourceGroup) UnmarshalBinary(b []byte) error {
	var res PostSubnetsParamsBodyResourceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSubnetsParamsBodyVpc VPCIdentityByName
//
// The VPC the subnet is to be a part of
swagger:model PostSubnetsParamsBodyVpc
*/
type PostSubnetsParamsBodyVpc struct {

	// The CRN for this VPC
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this VPC
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this VPC
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post subnets params body vpc
func (o *PostSubnetsParamsBodyVpc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSubnetsParamsBodyVpc) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"vpc"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostSubnetsParamsBodyVpc) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"vpc"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSubnetsParamsBodyVpc) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSubnetsParamsBodyVpc) UnmarshalBinary(b []byte) error {
	var res PostSubnetsParamsBodyVpc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSubnetsParamsBodyZone ZoneIdentity
//
// The zone the subnet is to reside in
swagger:model PostSubnetsParamsBodyZone
*/
type PostSubnetsParamsBodyZone struct {

	// The name for this zone
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post subnets params body zone
func (o *PostSubnetsParamsBodyZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSubnetsParamsBodyZone) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"zone"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSubnetsParamsBodyZone) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSubnetsParamsBodyZone) UnmarshalBinary(b []byte) error {
	var res PostSubnetsParamsBodyZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
