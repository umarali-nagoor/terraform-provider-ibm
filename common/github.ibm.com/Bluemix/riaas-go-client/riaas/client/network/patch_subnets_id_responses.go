// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// PatchSubnetsIDReader is a Reader for the PatchSubnetsID structure.
type PatchSubnetsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSubnetsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchSubnetsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchSubnetsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchSubnetsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPatchSubnetsIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchSubnetsIDOK creates a PatchSubnetsIDOK with default headers values
func NewPatchSubnetsIDOK() *PatchSubnetsIDOK {
	return &PatchSubnetsIDOK{}
}

/*PatchSubnetsIDOK handles this case with default header values.

dummy
*/
type PatchSubnetsIDOK struct {
	Payload *models.Subnet
}

func (o *PatchSubnetsIDOK) Error() string {
	return fmt.Sprintf("[PATCH /subnets/{id}][%d] patchSubnetsIdOK  %+v", 200, o.Payload)
}

func (o *PatchSubnetsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Subnet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSubnetsIDBadRequest creates a PatchSubnetsIDBadRequest with default headers values
func NewPatchSubnetsIDBadRequest() *PatchSubnetsIDBadRequest {
	return &PatchSubnetsIDBadRequest{}
}

/*PatchSubnetsIDBadRequest handles this case with default header values.

error
*/
type PatchSubnetsIDBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PatchSubnetsIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /subnets/{id}][%d] patchSubnetsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchSubnetsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSubnetsIDNotFound creates a PatchSubnetsIDNotFound with default headers values
func NewPatchSubnetsIDNotFound() *PatchSubnetsIDNotFound {
	return &PatchSubnetsIDNotFound{}
}

/*PatchSubnetsIDNotFound handles this case with default header values.

error
*/
type PatchSubnetsIDNotFound struct {
	Payload *models.Riaaserror
}

func (o *PatchSubnetsIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /subnets/{id}][%d] patchSubnetsIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchSubnetsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSubnetsIDInternalServerError creates a PatchSubnetsIDInternalServerError with default headers values
func NewPatchSubnetsIDInternalServerError() *PatchSubnetsIDInternalServerError {
	return &PatchSubnetsIDInternalServerError{}
}

/*PatchSubnetsIDInternalServerError handles this case with default header values.

error
*/
type PatchSubnetsIDInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *PatchSubnetsIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /subnets/{id}][%d] patchSubnetsIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchSubnetsIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchSubnetsIDBody patch subnets ID body
swagger:model PatchSubnetsIDBody
*/
type PatchSubnetsIDBody struct {

	// The user-defined name for this subnet
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// network acl
	NetworkACL *PatchSubnetsIDParamsBodyNetworkACL `json:"network_acl,omitempty"`

	// public gateway
	PublicGateway *PatchSubnetsIDParamsBodyPublicGateway `json:"public_gateway,omitempty"`
}

// Validate validates this patch subnets ID body
func (o *PatchSubnetsIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkACL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicGateway(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchSubnetsIDBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *PatchSubnetsIDBody) validateNetworkACL(formats strfmt.Registry) error {

	if swag.IsZero(o.NetworkACL) { // not required
		return nil
	}

	if o.NetworkACL != nil {
		if err := o.NetworkACL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "network_acl")
			}
			return err
		}
	}

	return nil
}

func (o *PatchSubnetsIDBody) validatePublicGateway(formats strfmt.Registry) error {

	if swag.IsZero(o.PublicGateway) { // not required
		return nil
	}

	if o.PublicGateway != nil {
		if err := o.PublicGateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "public_gateway")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchSubnetsIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchSubnetsIDBody) UnmarshalBinary(b []byte) error {
	var res PatchSubnetsIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchSubnetsIDParamsBodyNetworkACL reference
swagger:model PatchSubnetsIDParamsBodyNetworkACL
*/
type PatchSubnetsIDParamsBodyNetworkACL struct {

	// The CRN for this snapshot
	Crn string `json:"crn,omitempty"`

	// The URL for this resource
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this resource
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this patch subnets ID params body network ACL
func (o *PatchSubnetsIDParamsBodyNetworkACL) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchSubnetsIDParamsBodyNetworkACL) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(o.Href) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"network_acl"+"."+"href", "body", string(o.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (o *PatchSubnetsIDParamsBodyNetworkACL) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"network_acl"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PatchSubnetsIDParamsBodyNetworkACL) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"network_acl"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchSubnetsIDParamsBodyNetworkACL) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchSubnetsIDParamsBodyNetworkACL) UnmarshalBinary(b []byte) error {
	var res PatchSubnetsIDParamsBodyNetworkACL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchSubnetsIDParamsBodyPublicGateway reference
swagger:model PatchSubnetsIDParamsBodyPublicGateway
*/
type PatchSubnetsIDParamsBodyPublicGateway struct {

	// The CRN for this snapshot
	Crn string `json:"crn,omitempty"`

	// The URL for this resource
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this resource
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this patch subnets ID params body public gateway
func (o *PatchSubnetsIDParamsBodyPublicGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchSubnetsIDParamsBodyPublicGateway) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(o.Href) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"public_gateway"+"."+"href", "body", string(o.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (o *PatchSubnetsIDParamsBodyPublicGateway) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"public_gateway"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PatchSubnetsIDParamsBodyPublicGateway) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"public_gateway"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchSubnetsIDParamsBodyPublicGateway) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchSubnetsIDParamsBodyPublicGateway) UnmarshalBinary(b []byte) error {
	var res PatchSubnetsIDParamsBodyPublicGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
