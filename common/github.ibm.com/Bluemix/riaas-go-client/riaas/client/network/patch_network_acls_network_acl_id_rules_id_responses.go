// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// PatchNetworkAclsNetworkACLIDRulesIDReader is a Reader for the PatchNetworkAclsNetworkACLIDRulesID structure.
type PatchNetworkAclsNetworkACLIDRulesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchNetworkAclsNetworkACLIDRulesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchNetworkAclsNetworkACLIDRulesIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchNetworkAclsNetworkACLIDRulesIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchNetworkAclsNetworkACLIDRulesIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPatchNetworkAclsNetworkACLIDRulesIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchNetworkAclsNetworkACLIDRulesIDOK creates a PatchNetworkAclsNetworkACLIDRulesIDOK with default headers values
func NewPatchNetworkAclsNetworkACLIDRulesIDOK() *PatchNetworkAclsNetworkACLIDRulesIDOK {
	return &PatchNetworkAclsNetworkACLIDRulesIDOK{}
}

/*PatchNetworkAclsNetworkACLIDRulesIDOK handles this case with default header values.

dummy
*/
type PatchNetworkAclsNetworkACLIDRulesIDOK struct {
	Payload *models.NetworkACLRule
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDOK) Error() string {
	return fmt.Sprintf("[PATCH /network_acls/{network_acl_id}/rules/{id}][%d] patchNetworkAclsNetworkAclIdRulesIdOK  %+v", 200, o.Payload)
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkACLRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchNetworkAclsNetworkACLIDRulesIDBadRequest creates a PatchNetworkAclsNetworkACLIDRulesIDBadRequest with default headers values
func NewPatchNetworkAclsNetworkACLIDRulesIDBadRequest() *PatchNetworkAclsNetworkACLIDRulesIDBadRequest {
	return &PatchNetworkAclsNetworkACLIDRulesIDBadRequest{}
}

/*PatchNetworkAclsNetworkACLIDRulesIDBadRequest handles this case with default header values.

error
*/
type PatchNetworkAclsNetworkACLIDRulesIDBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /network_acls/{network_acl_id}/rules/{id}][%d] patchNetworkAclsNetworkAclIdRulesIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchNetworkAclsNetworkACLIDRulesIDNotFound creates a PatchNetworkAclsNetworkACLIDRulesIDNotFound with default headers values
func NewPatchNetworkAclsNetworkACLIDRulesIDNotFound() *PatchNetworkAclsNetworkACLIDRulesIDNotFound {
	return &PatchNetworkAclsNetworkACLIDRulesIDNotFound{}
}

/*PatchNetworkAclsNetworkACLIDRulesIDNotFound handles this case with default header values.

error
*/
type PatchNetworkAclsNetworkACLIDRulesIDNotFound struct {
	Payload *models.Riaaserror
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /network_acls/{network_acl_id}/rules/{id}][%d] patchNetworkAclsNetworkAclIdRulesIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchNetworkAclsNetworkACLIDRulesIDInternalServerError creates a PatchNetworkAclsNetworkACLIDRulesIDInternalServerError with default headers values
func NewPatchNetworkAclsNetworkACLIDRulesIDInternalServerError() *PatchNetworkAclsNetworkACLIDRulesIDInternalServerError {
	return &PatchNetworkAclsNetworkACLIDRulesIDInternalServerError{}
}

/*PatchNetworkAclsNetworkACLIDRulesIDInternalServerError handles this case with default header values.

error
*/
type PatchNetworkAclsNetworkACLIDRulesIDInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /network_acls/{network_acl_id}/rules/{id}][%d] patchNetworkAclsNetworkAclIdRulesIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchNetworkAclsNetworkACLIDRulesIDBody TupleRuleTemplateNetworkACLContext
swagger:model PatchNetworkAclsNetworkACLIDRulesIDBody
*/
type PatchNetworkAclsNetworkACLIDRulesIDBody struct {

	// Whether to allow or deny matching traffic
	// Enum: [allow deny]
	Action string `json:"action,omitempty"`

	// before
	Before *PatchNetworkAclsNetworkACLIDRulesIDParamsBodyBefore `json:"before,omitempty"`

	// The ICMP traffic code to allow. Valid values from 0 to 255. If unspecified, all codes are allowed. This can only be specified if type is also specified.
	Code *int64 `json:"code,omitempty"`

	// The destination IP address or CIDR block
	Destination string `json:"destination,omitempty"`

	// The inclusive upper bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	DestinationPortMax int64 `json:"destination_port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	DestinationPortMin int64 `json:"destination_port_min,omitempty"`

	// Whether the traffic to be matched is ingress or egress
	// Enum: [ingress egress]
	Direction string `json:"direction,omitempty"`

	// The user-defined name for this network ACL rule
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// The inclusive upper bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	PortMax int64 `json:"port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	PortMin int64 `json:"port_min,omitempty"`

	// Must be `all` to match all protocols.
	Protocol string `json:"protocol,omitempty"`

	// The source IP address or CIDR block
	Source string `json:"source,omitempty"`

	// The inclusive upper bound of TCP/UDP source port range
	// Maximum: 65535
	// Minimum: 1
	SourcePortMax int64 `json:"source_port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP source port range
	// Maximum: 65535
	// Minimum: 1
	SourcePortMin int64 `json:"source_port_min,omitempty"`

	// The ICMP traffic type to allow. Valid values from 0 to 254. If unspecified, all types are allowed by this rule.
	Type *int64 `json:"type,omitempty"`
}

// Validate validates this patch network acls network ACL ID rules ID body
func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDestinationPortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDestinationPortMin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePortMin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourcePortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourcePortMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchNetworkAclsNetworkAclIdRulesIdBodyTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchNetworkAclsNetworkAclIdRulesIdBodyTypeActionPropEnum = append(patchNetworkAclsNetworkAclIdRulesIdBodyTypeActionPropEnum, v)
	}
}

const (

	// PatchNetworkAclsNetworkACLIDRulesIDBodyActionAllow captures enum value "allow"
	PatchNetworkAclsNetworkACLIDRulesIDBodyActionAllow string = "allow"

	// PatchNetworkAclsNetworkACLIDRulesIDBodyActionDeny captures enum value "deny"
	PatchNetworkAclsNetworkACLIDRulesIDBodyActionDeny string = "deny"
)

// prop value enum
func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patchNetworkAclsNetworkAclIdRulesIdBodyTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(o.Action) { // not required
		return nil
	}

	// value enum
	if err := o.validateActionEnum("body"+"."+"action", "body", o.Action); err != nil {
		return err
	}

	return nil
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validateBefore(formats strfmt.Registry) error {

	if swag.IsZero(o.Before) { // not required
		return nil
	}

	if o.Before != nil {
		if err := o.Before.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "before")
			}
			return err
		}
	}

	return nil
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validateDestinationPortMax(formats strfmt.Registry) error {

	if swag.IsZero(o.DestinationPortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("body"+"."+"destination_port_max", "body", int64(o.DestinationPortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("body"+"."+"destination_port_max", "body", int64(o.DestinationPortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validateDestinationPortMin(formats strfmt.Registry) error {

	if swag.IsZero(o.DestinationPortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("body"+"."+"destination_port_min", "body", int64(o.DestinationPortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("body"+"."+"destination_port_min", "body", int64(o.DestinationPortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

var patchNetworkAclsNetworkAclIdRulesIdBodyTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingress","egress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchNetworkAclsNetworkAclIdRulesIdBodyTypeDirectionPropEnum = append(patchNetworkAclsNetworkAclIdRulesIdBodyTypeDirectionPropEnum, v)
	}
}

const (

	// PatchNetworkAclsNetworkACLIDRulesIDBodyDirectionIngress captures enum value "ingress"
	PatchNetworkAclsNetworkACLIDRulesIDBodyDirectionIngress string = "ingress"

	// PatchNetworkAclsNetworkACLIDRulesIDBodyDirectionEgress captures enum value "egress"
	PatchNetworkAclsNetworkACLIDRulesIDBodyDirectionEgress string = "egress"
)

// prop value enum
func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patchNetworkAclsNetworkAclIdRulesIdBodyTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(o.Direction) { // not required
		return nil
	}

	// value enum
	if err := o.validateDirectionEnum("body"+"."+"direction", "body", o.Direction); err != nil {
		return err
	}

	return nil
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validatePortMax(formats strfmt.Registry) error {

	if swag.IsZero(o.PortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("body"+"."+"port_max", "body", int64(o.PortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("body"+"."+"port_max", "body", int64(o.PortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validatePortMin(formats strfmt.Registry) error {

	if swag.IsZero(o.PortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("body"+"."+"port_min", "body", int64(o.PortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("body"+"."+"port_min", "body", int64(o.PortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validateSourcePortMax(formats strfmt.Registry) error {

	if swag.IsZero(o.SourcePortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("body"+"."+"source_port_max", "body", int64(o.SourcePortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("body"+"."+"source_port_max", "body", int64(o.SourcePortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) validateSourcePortMin(formats strfmt.Registry) error {

	if swag.IsZero(o.SourcePortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("body"+"."+"source_port_min", "body", int64(o.SourcePortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("body"+"."+"source_port_min", "body", int64(o.SourcePortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchNetworkAclsNetworkACLIDRulesIDBody) UnmarshalBinary(b []byte) error {
	var res PatchNetworkAclsNetworkACLIDRulesIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchNetworkAclsNetworkACLIDRulesIDParamsBodyBefore patch network acls network ACL ID rules ID params body before
swagger:model PatchNetworkAclsNetworkACLIDRulesIDParamsBodyBefore
*/
type PatchNetworkAclsNetworkACLIDRulesIDParamsBodyBefore struct {

	// The unique identifier for this rule
	// Pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
	ID string `json:"id,omitempty"`
}

// Validate validates this patch network acls network ACL ID rules ID params body before
func (o *PatchNetworkAclsNetworkACLIDRulesIDParamsBodyBefore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchNetworkAclsNetworkACLIDRulesIDParamsBodyBefore) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"before"+"."+"id", "body", string(o.ID), `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchNetworkAclsNetworkACLIDRulesIDParamsBodyBefore) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchNetworkAclsNetworkACLIDRulesIDParamsBodyBefore) UnmarshalBinary(b []byte) error {
	var res PatchNetworkAclsNetworkACLIDRulesIDParamsBodyBefore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
