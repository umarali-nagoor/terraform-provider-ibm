// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// PostNetworkAclsReader is a Reader for the PostNetworkAcls structure.
type PostNetworkAclsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostNetworkAclsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostNetworkAclsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostNetworkAclsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPostNetworkAclsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostNetworkAclsCreated creates a PostNetworkAclsCreated with default headers values
func NewPostNetworkAclsCreated() *PostNetworkAclsCreated {
	return &PostNetworkAclsCreated{}
}

/*PostNetworkAclsCreated handles this case with default header values.

dummy
*/
type PostNetworkAclsCreated struct {
	Payload *models.NetworkACL
}

func (o *PostNetworkAclsCreated) Error() string {
	return fmt.Sprintf("[POST /network_acls][%d] postNetworkAclsCreated  %+v", 201, o.Payload)
}

func (o *PostNetworkAclsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkACL)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostNetworkAclsBadRequest creates a PostNetworkAclsBadRequest with default headers values
func NewPostNetworkAclsBadRequest() *PostNetworkAclsBadRequest {
	return &PostNetworkAclsBadRequest{}
}

/*PostNetworkAclsBadRequest handles this case with default header values.

error
*/
type PostNetworkAclsBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PostNetworkAclsBadRequest) Error() string {
	return fmt.Sprintf("[POST /network_acls][%d] postNetworkAclsBadRequest  %+v", 400, o.Payload)
}

func (o *PostNetworkAclsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostNetworkAclsInternalServerError creates a PostNetworkAclsInternalServerError with default headers values
func NewPostNetworkAclsInternalServerError() *PostNetworkAclsInternalServerError {
	return &PostNetworkAclsInternalServerError{}
}

/*PostNetworkAclsInternalServerError handles this case with default header values.

error
*/
type PostNetworkAclsInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *PostNetworkAclsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /network_acls][%d] postNetworkAclsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostNetworkAclsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostNetworkAclsBody NetworkACLTemplateFromSource
swagger:model PostNetworkAclsBody
*/
type PostNetworkAclsBody struct {

	// The user-defined name for this network ACL
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// resource group
	ResourceGroup *PostNetworkAclsParamsBodyResourceGroup `json:"resource_group,omitempty"`

	// Collection of rule templates for rules to be created alongwith the network ACL
	Rules []*RulesItems0 `json:"rules"`

	// source network acl
	SourceNetworkACL *PostNetworkAclsParamsBodySourceNetworkACL `json:"source_network_acl,omitempty"`

	// vpc
	Vpc *models.ResourceReference `json:"vpc,omitempty"`
}

// Validate validates this post network acls body
func (o *PostNetworkAclsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceNetworkACL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVpc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostNetworkAclsBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *PostNetworkAclsBody) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(o.ResourceGroup) { // not required
		return nil
	}

	if o.ResourceGroup != nil {
		if err := o.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "resource_group")
			}
			return err
		}
	}

	return nil
}

func (o *PostNetworkAclsBody) validateRules(formats strfmt.Registry) error {

	if swag.IsZero(o.Rules) { // not required
		return nil
	}

	for i := 0; i < len(o.Rules); i++ {
		if swag.IsZero(o.Rules[i]) { // not required
			continue
		}

		if o.Rules[i] != nil {
			if err := o.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostNetworkAclsBody) validateSourceNetworkACL(formats strfmt.Registry) error {

	if swag.IsZero(o.SourceNetworkACL) { // not required
		return nil
	}

	if o.SourceNetworkACL != nil {
		if err := o.SourceNetworkACL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "source_network_acl")
			}
			return err
		}
	}

	return nil
}

func (o *PostNetworkAclsBody) validateVpc(formats strfmt.Registry) error {

	if swag.IsZero(o.Vpc) { // not required
		return nil
	}

	if o.Vpc != nil {
		if err := o.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "vpc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostNetworkAclsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostNetworkAclsBody) UnmarshalBinary(b []byte) error {
	var res PostNetworkAclsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostNetworkAclsParamsBodyResourceGroup ResourceGroupIdentity
//
// The resource group for this network ACL
swagger:model PostNetworkAclsParamsBodyResourceGroup
*/
type PostNetworkAclsParamsBodyResourceGroup struct {

	// The unique identifier for this resource group
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this post network acls params body resource group
func (o *PostNetworkAclsParamsBodyResourceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostNetworkAclsParamsBodyResourceGroup) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"resource_group"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostNetworkAclsParamsBodyResourceGroup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostNetworkAclsParamsBodyResourceGroup) UnmarshalBinary(b []byte) error {
	var res PostNetworkAclsParamsBodyResourceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostNetworkAclsParamsBodySourceNetworkACL NetworkACLIdentityByName
//
// Optional network ACL to copy rules from
swagger:model PostNetworkAclsParamsBodySourceNetworkACL
*/
type PostNetworkAclsParamsBodySourceNetworkACL struct {

	// The CRN for this network ACL
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this network ACL
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this network ACL
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post network acls params body source network ACL
func (o *PostNetworkAclsParamsBodySourceNetworkACL) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostNetworkAclsParamsBodySourceNetworkACL) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"source_network_acl"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostNetworkAclsParamsBodySourceNetworkACL) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"source_network_acl"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostNetworkAclsParamsBodySourceNetworkACL) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostNetworkAclsParamsBodySourceNetworkACL) UnmarshalBinary(b []byte) error {
	var res PostNetworkAclsParamsBodySourceNetworkACL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RulesItems0 TupleRuleTemplateNetworkACLContext
swagger:model RulesItems0
*/
type RulesItems0 struct {

	// Whether to allow or deny matching traffic
	// Enum: [allow deny]
	Action string `json:"action,omitempty"`

	// The highest in the range of ICMP codes to be matched; if unspecified, `255` is used. This can be specified only if type_min and type_max are equal.
	CodeMax string `json:"code_max,omitempty"`

	// The lowest in the range of ICMP codes to be matched; if unspecified, `0` is used. This can be specified only if type_min and type_max are equal.
	CodeMin string `json:"code_min,omitempty"`

	// The destination IP address or CIDR block
	Destination string `json:"destination,omitempty"`

	// The inclusive upper bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	DestinationPortMax int64 `json:"destination_port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	DestinationPortMin int64 `json:"destination_port_min,omitempty"`

	// Whether the traffic to be matched is ingress or egress
	// Enum: [ingress egress]
	Direction string `json:"direction,omitempty"`

	// The user-defined name for this network ACL rule
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// The inclusive upper bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	PortMax int64 `json:"port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	PortMin int64 `json:"port_min,omitempty"`

	// Must be `all` to match all protocols.
	Protocol string `json:"protocol,omitempty"`

	// The source IP address or CIDR block
	Source string `json:"source,omitempty"`

	// The inclusive upper bound of TCP/UDP source port range
	// Maximum: 65535
	// Minimum: 1
	SourcePortMax int64 `json:"source_port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP source port range
	// Maximum: 65535
	// Minimum: 1
	SourcePortMin int64 `json:"source_port_min,omitempty"`

	// The highest in the range of ICMP types to be matched; if unspecified, `255` is used.
	TypeMax string `json:"type_max,omitempty"`

	// The lowest in the range of ICMP types to be matched; if unspecified, `0` is used.
	TypeMin string `json:"type_min,omitempty"`
}

// Validate validates this rules items0
func (o *RulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDestinationPortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDestinationPortMin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePortMin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourcePortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourcePortMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rulesItems0TypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0TypeActionPropEnum = append(rulesItems0TypeActionPropEnum, v)
	}
}

const (

	// RulesItems0ActionAllow captures enum value "allow"
	RulesItems0ActionAllow string = "allow"

	// RulesItems0ActionDeny captures enum value "deny"
	RulesItems0ActionDeny string = "deny"
)

// prop value enum
func (o *RulesItems0) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rulesItems0TypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(o.Action) { // not required
		return nil
	}

	// value enum
	if err := o.validateActionEnum("action", "body", o.Action); err != nil {
		return err
	}

	return nil
}

func (o *RulesItems0) validateDestinationPortMax(formats strfmt.Registry) error {

	if swag.IsZero(o.DestinationPortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("destination_port_max", "body", int64(o.DestinationPortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("destination_port_max", "body", int64(o.DestinationPortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (o *RulesItems0) validateDestinationPortMin(formats strfmt.Registry) error {

	if swag.IsZero(o.DestinationPortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("destination_port_min", "body", int64(o.DestinationPortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("destination_port_min", "body", int64(o.DestinationPortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

var rulesItems0TypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingress","egress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rulesItems0TypeDirectionPropEnum = append(rulesItems0TypeDirectionPropEnum, v)
	}
}

const (

	// RulesItems0DirectionIngress captures enum value "ingress"
	RulesItems0DirectionIngress string = "ingress"

	// RulesItems0DirectionEgress captures enum value "egress"
	RulesItems0DirectionEgress string = "egress"
)

// prop value enum
func (o *RulesItems0) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rulesItems0TypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RulesItems0) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(o.Direction) { // not required
		return nil
	}

	// value enum
	if err := o.validateDirectionEnum("direction", "body", o.Direction); err != nil {
		return err
	}

	return nil
}

func (o *RulesItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *RulesItems0) validatePortMax(formats strfmt.Registry) error {

	if swag.IsZero(o.PortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("port_max", "body", int64(o.PortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port_max", "body", int64(o.PortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (o *RulesItems0) validatePortMin(formats strfmt.Registry) error {

	if swag.IsZero(o.PortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("port_min", "body", int64(o.PortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port_min", "body", int64(o.PortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

func (o *RulesItems0) validateSourcePortMax(formats strfmt.Registry) error {

	if swag.IsZero(o.SourcePortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("source_port_max", "body", int64(o.SourcePortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("source_port_max", "body", int64(o.SourcePortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (o *RulesItems0) validateSourcePortMin(formats strfmt.Registry) error {

	if swag.IsZero(o.SourcePortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("source_port_min", "body", int64(o.SourcePortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("source_port_min", "body", int64(o.SourcePortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RulesItems0) UnmarshalBinary(b []byte) error {
	var res RulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
