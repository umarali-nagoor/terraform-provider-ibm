// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSharesID deletes specified file share

This request deletes a file share. This operation cannot be reversed.
*/
func (a *Client) DeleteSharesID(params *DeleteSharesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSharesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSharesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSharesID",
		Method:             "DELETE",
		PathPattern:        "/shares/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSharesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSharesIDNoContent), nil

}

/*
DeleteSharesShareIDTargetsID deletes specified file share mount target

This request deletes a file share mount target. This operation cannot be reversed.
*/
func (a *Client) DeleteSharesShareIDTargetsID(params *DeleteSharesShareIDTargetsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSharesShareIDTargetsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSharesShareIDTargetsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSharesShareIDTargetsID",
		Method:             "DELETE",
		PathPattern:        "/shares/{share_id}/targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSharesShareIDTargetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSharesShareIDTargetsIDNoContent), nil

}

/*
DeleteVolumesID deletes specified volume

This request deletes a volume. This operation cannot be reversed. In order for this request to succeed, the volume must not be attached to any servers.
*/
func (a *Client) DeleteVolumesID(params *DeleteVolumesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVolumesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolumesID",
		Method:             "DELETE",
		PathPattern:        "/volumes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVolumesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVolumesIDNoContent), nil

}

/*
DeleteVolumesVolumeIDSnapshotsID deletes specified snapshot

This request deletes a snapshot. This operation cannot be reversed.
*/
func (a *Client) DeleteVolumesVolumeIDSnapshotsID(params *DeleteVolumesVolumeIDSnapshotsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVolumesVolumeIDSnapshotsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumesVolumeIDSnapshotsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolumesVolumeIDSnapshotsID",
		Method:             "DELETE",
		PathPattern:        "/volumes/{volume_id}/snapshots/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVolumesVolumeIDSnapshotsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVolumesVolumeIDSnapshotsIDNoContent), nil

}

/*
GetShareProfiles retrieves all file share profiles

This request retrieves all file share profiles available in the region. A file share profile specifies the performance characteristics and pricing model for a file share.
*/
func (a *Client) GetShareProfiles(params *GetShareProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetShareProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShareProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetShareProfiles",
		Method:             "GET",
		PathPattern:        "/share/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetShareProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetShareProfilesOK), nil

}

/*
GetShareProfilesName retrieves specified file share profile

This request retrieves a single file share profile specified by the name in the URL.
*/
func (a *Client) GetShareProfilesName(params *GetShareProfilesNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetShareProfilesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShareProfilesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetShareProfilesName",
		Method:             "GET",
		PathPattern:        "/share/profiles/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetShareProfilesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetShareProfilesNameOK), nil

}

/*
GetShares retrieves specified file share profile

This request retrieves all file shares.
*/
func (a *Client) GetShares(params *GetSharesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSharesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSharesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetShares",
		Method:             "GET",
		PathPattern:        "/shares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSharesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSharesOK), nil

}

/*
GetSharesID retrieves specified volume

This request retrieves a single file share specified by the identifier in the URL.
*/
func (a *Client) GetSharesID(params *GetSharesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSharesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSharesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSharesID",
		Method:             "GET",
		PathPattern:        "/shares/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSharesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSharesIDOK), nil

}

/*
GetSharesShareIDTargets retrieves all mount targets for a file share

This request retrieves all mount targets for a file share. A mount target is a network endpoint at which a file share may be mounted and exists within a particular zone and subnet.
*/
func (a *Client) GetSharesShareIDTargets(params *GetSharesShareIDTargetsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSharesShareIDTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSharesShareIDTargetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSharesShareIDTargets",
		Method:             "GET",
		PathPattern:        "/shares/{share_id}/targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSharesShareIDTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSharesShareIDTargetsOK), nil

}

/*
GetSharesShareIDTargetsID retrieves specified file share mount target

This request retrieves a single file share mount target specified by the identifier in the URL.
*/
func (a *Client) GetSharesShareIDTargetsID(params *GetSharesShareIDTargetsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSharesShareIDTargetsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSharesShareIDTargetsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSharesShareIDTargetsID",
		Method:             "GET",
		PathPattern:        "/shares/{share_id}/targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSharesShareIDTargetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSharesShareIDTargetsIDOK), nil

}

/*
GetVolumeProfiles retrieves all volume profiles

This request retrieves all volume profiles available in the region. A volume profile specifies the performance characteristics and pricing model for a volume.
*/
func (a *Client) GetVolumeProfiles(params *GetVolumeProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumeProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumeProfiles",
		Method:             "GET",
		PathPattern:        "/volume/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumeProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumeProfilesOK), nil

}

/*
GetVolumeProfilesName retrieves specified volume profile

This request retrieves a single volume profile specified by the name in the URL.
*/
func (a *Client) GetVolumeProfilesName(params *GetVolumeProfilesNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumeProfilesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeProfilesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumeProfilesName",
		Method:             "GET",
		PathPattern:        "/volume/profiles/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumeProfilesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumeProfilesNameOK), nil

}

/*
GetVolumes retrieves all volumes

This request retrieves all volumes in the region. Volumes are network-connected block storage devices which may be attached to one or more servers in the same region.
*/
func (a *Client) GetVolumes(params *GetVolumesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumes",
		Method:             "GET",
		PathPattern:        "/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumesOK), nil

}

/*
GetVolumesID retrieves specified volume

This request retrieves a single volume specified by the identifier in the URL.
*/
func (a *Client) GetVolumesID(params *GetVolumesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumesID",
		Method:             "GET",
		PathPattern:        "/volumes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumesIDOK), nil

}

/*
GetVolumesVolumeIDSnapshots retrieves all snapshots of a volume

This request retrieves all snapshots of the volume specified by the identifier in the URL. A snapshot preserves the state of a volume at the time the snapshot is created.
*/
func (a *Client) GetVolumesVolumeIDSnapshots(params *GetVolumesVolumeIDSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumesVolumeIDSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumesVolumeIDSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumesVolumeIDSnapshots",
		Method:             "GET",
		PathPattern:        "/volumes/{volume_id}/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumesVolumeIDSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumesVolumeIDSnapshotsOK), nil

}

/*
GetVolumesVolumeIDSnapshotsID retrieves specified snapshot

This request retrieves a single snapshot specified by the identifier in the URL.
*/
func (a *Client) GetVolumesVolumeIDSnapshotsID(params *GetVolumesVolumeIDSnapshotsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVolumesVolumeIDSnapshotsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumesVolumeIDSnapshotsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumesVolumeIDSnapshotsID",
		Method:             "GET",
		PathPattern:        "/volumes/{volume_id}/snapshots/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumesVolumeIDSnapshotsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumesVolumeIDSnapshotsIDOK), nil

}

/*
PatchSharesID updates specified volume

This request updates a file share's name.
*/
func (a *Client) PatchSharesID(params *PatchSharesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSharesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSharesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSharesID",
		Method:             "PATCH",
		PathPattern:        "/shares/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSharesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSharesIDOK), nil

}

/*
PatchSharesShareIDTargetsID updates a file share mount target

This request updates a mount target with the information in a provided target patch. The target patch object is structured in the same way as a retrieved mount target and can contain an updated name.
*/
func (a *Client) PatchSharesShareIDTargetsID(params *PatchSharesShareIDTargetsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSharesShareIDTargetsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSharesShareIDTargetsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSharesShareIDTargetsID",
		Method:             "PATCH",
		PathPattern:        "/shares/{share_id}/targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSharesShareIDTargetsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSharesShareIDTargetsIDOK), nil

}

/*
PatchVolumesID updates specified volume

This request updates a volume with the information in a provided volume patch. The volume patch object is structured in the same way as a retrieved volume and can contain an updated name, IOPS rate, or (increased) capacity for the volume.
*/
func (a *Client) PatchVolumesID(params *PatchVolumesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchVolumesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchVolumesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchVolumesID",
		Method:             "PATCH",
		PathPattern:        "/volumes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchVolumesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchVolumesIDOK), nil

}

/*
PatchVolumesVolumeIDSnapshotsID updates specified snapshot

This request updates a snapshot's name.
*/
func (a *Client) PatchVolumesVolumeIDSnapshotsID(params *PatchVolumesVolumeIDSnapshotsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchVolumesVolumeIDSnapshotsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchVolumesVolumeIDSnapshotsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchVolumesVolumeIDSnapshotsID",
		Method:             "PATCH",
		PathPattern:        "/volumes/{volume_id}/snapshots/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchVolumesVolumeIDSnapshotsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchVolumesVolumeIDSnapshotsIDOK), nil

}

/*
PostShares creates a file share

This request provisions a new file share from a share template. The share template object is structured in the same way as a retrieved share, and contains the information necessary to provision the new file share.
*/
func (a *Client) PostShares(params *PostSharesParams, authInfo runtime.ClientAuthInfoWriter) (*PostSharesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSharesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostShares",
		Method:             "POST",
		PathPattern:        "/shares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSharesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSharesCreated), nil

}

/*
PostSharesShareIDTargets creates a mount target for a file share

This request creates a new mount target from a target template. If specified, the mount target address must be contained by and available in a provided subnet.
*/
func (a *Client) PostSharesShareIDTargets(params *PostSharesShareIDTargetsParams, authInfo runtime.ClientAuthInfoWriter) (*PostSharesShareIDTargetsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSharesShareIDTargetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSharesShareIDTargets",
		Method:             "POST",
		PathPattern:        "/shares/{share_id}/targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSharesShareIDTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSharesShareIDTargetsCreated), nil

}

/*
PostVolumes creates a volume

This request creates a new volume from a volume template. The volume template object is structured in the same way as a retrieved volume, and contains the information necessary to create the new volume.
*/
func (a *Client) PostVolumes(params *PostVolumesParams, authInfo runtime.ClientAuthInfoWriter) (*PostVolumesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVolumes",
		Method:             "POST",
		PathPattern:        "/volumes",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVolumesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVolumesCreated), nil

}

/*
PostVolumesVolumeIDSnapshots creates a snapshot for a volume

This request creates a new snapshot of the volume specified by the identifier in the URL. The new snapshot's name is specified in the snapshot template.
*/
func (a *Client) PostVolumesVolumeIDSnapshots(params *PostVolumesVolumeIDSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*PostVolumesVolumeIDSnapshotsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVolumesVolumeIDSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVolumesVolumeIDSnapshots",
		Method:             "POST",
		PathPattern:        "/volumes/{volume_id}/snapshots",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVolumesVolumeIDSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVolumesVolumeIDSnapshotsCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
