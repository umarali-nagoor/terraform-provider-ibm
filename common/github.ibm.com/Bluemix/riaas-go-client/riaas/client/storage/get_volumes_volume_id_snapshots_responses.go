// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// GetVolumesVolumeIDSnapshotsReader is a Reader for the GetVolumesVolumeIDSnapshots structure.
type GetVolumesVolumeIDSnapshotsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVolumesVolumeIDSnapshotsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVolumesVolumeIDSnapshotsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetVolumesVolumeIDSnapshotsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetVolumesVolumeIDSnapshotsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetVolumesVolumeIDSnapshotsOK creates a GetVolumesVolumeIDSnapshotsOK with default headers values
func NewGetVolumesVolumeIDSnapshotsOK() *GetVolumesVolumeIDSnapshotsOK {
	return &GetVolumesVolumeIDSnapshotsOK{}
}

/*GetVolumesVolumeIDSnapshotsOK handles this case with default header values.

dummy
*/
type GetVolumesVolumeIDSnapshotsOK struct {
	Payload *GetVolumesVolumeIDSnapshotsOKBody
}

func (o *GetVolumesVolumeIDSnapshotsOK) Error() string {
	return fmt.Sprintf("[GET /volumes/{volume_id}/snapshots][%d] getVolumesVolumeIdSnapshotsOK  %+v", 200, o.Payload)
}

func (o *GetVolumesVolumeIDSnapshotsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetVolumesVolumeIDSnapshotsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumesVolumeIDSnapshotsNotFound creates a GetVolumesVolumeIDSnapshotsNotFound with default headers values
func NewGetVolumesVolumeIDSnapshotsNotFound() *GetVolumesVolumeIDSnapshotsNotFound {
	return &GetVolumesVolumeIDSnapshotsNotFound{}
}

/*GetVolumesVolumeIDSnapshotsNotFound handles this case with default header values.

error
*/
type GetVolumesVolumeIDSnapshotsNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetVolumesVolumeIDSnapshotsNotFound) Error() string {
	return fmt.Sprintf("[GET /volumes/{volume_id}/snapshots][%d] getVolumesVolumeIdSnapshotsNotFound  %+v", 404, o.Payload)
}

func (o *GetVolumesVolumeIDSnapshotsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVolumesVolumeIDSnapshotsInternalServerError creates a GetVolumesVolumeIDSnapshotsInternalServerError with default headers values
func NewGetVolumesVolumeIDSnapshotsInternalServerError() *GetVolumesVolumeIDSnapshotsInternalServerError {
	return &GetVolumesVolumeIDSnapshotsInternalServerError{}
}

/*GetVolumesVolumeIDSnapshotsInternalServerError handles this case with default header values.

error
*/
type GetVolumesVolumeIDSnapshotsInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *GetVolumesVolumeIDSnapshotsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /volumes/{volume_id}/snapshots][%d] getVolumesVolumeIdSnapshotsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVolumesVolumeIDSnapshotsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetVolumesVolumeIDSnapshotsOKBody SnapshotCollection
swagger:model GetVolumesVolumeIDSnapshotsOKBody
*/
type GetVolumesVolumeIDSnapshotsOKBody struct {

	// Collection of snapshots
	// Required: true
	Snapshots []*models.VolumeSnapshot `json:"snapshots"`
}

// Validate validates this get volumes volume ID snapshots o k body
func (o *GetVolumesVolumeIDSnapshotsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVolumesVolumeIDSnapshotsOKBody) validateSnapshots(formats strfmt.Registry) error {

	if err := validate.Required("getVolumesVolumeIdSnapshotsOK"+"."+"snapshots", "body", o.Snapshots); err != nil {
		return err
	}

	for i := 0; i < len(o.Snapshots); i++ {
		if swag.IsZero(o.Snapshots[i]) { // not required
			continue
		}

		if o.Snapshots[i] != nil {
			if err := o.Snapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getVolumesVolumeIdSnapshotsOK" + "." + "snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetVolumesVolumeIDSnapshotsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVolumesVolumeIDSnapshotsOKBody) UnmarshalBinary(b []byte) error {
	var res GetVolumesVolumeIDSnapshotsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
