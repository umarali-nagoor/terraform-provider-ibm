// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// DeleteSharesShareIDTargetsIDReader is a Reader for the DeleteSharesShareIDTargetsID structure.
type DeleteSharesShareIDTargetsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSharesShareIDTargetsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteSharesShareIDTargetsIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteSharesShareIDTargetsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteSharesShareIDTargetsIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteSharesShareIDTargetsIDNoContent creates a DeleteSharesShareIDTargetsIDNoContent with default headers values
func NewDeleteSharesShareIDTargetsIDNoContent() *DeleteSharesShareIDTargetsIDNoContent {
	return &DeleteSharesShareIDTargetsIDNoContent{}
}

/*DeleteSharesShareIDTargetsIDNoContent handles this case with default header values.

Mount target deleted successfully
*/
type DeleteSharesShareIDTargetsIDNoContent struct {
}

func (o *DeleteSharesShareIDTargetsIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /shares/{share_id}/targets/{id}][%d] deleteSharesShareIdTargetsIdNoContent ", 204)
}

func (o *DeleteSharesShareIDTargetsIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSharesShareIDTargetsIDNotFound creates a DeleteSharesShareIDTargetsIDNotFound with default headers values
func NewDeleteSharesShareIDTargetsIDNotFound() *DeleteSharesShareIDTargetsIDNotFound {
	return &DeleteSharesShareIDTargetsIDNotFound{}
}

/*DeleteSharesShareIDTargetsIDNotFound handles this case with default header values.

error
*/
type DeleteSharesShareIDTargetsIDNotFound struct {
	Payload *models.Riaaserror
}

func (o *DeleteSharesShareIDTargetsIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /shares/{share_id}/targets/{id}][%d] deleteSharesShareIdTargetsIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSharesShareIDTargetsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSharesShareIDTargetsIDInternalServerError creates a DeleteSharesShareIDTargetsIDInternalServerError with default headers values
func NewDeleteSharesShareIDTargetsIDInternalServerError() *DeleteSharesShareIDTargetsIDInternalServerError {
	return &DeleteSharesShareIDTargetsIDInternalServerError{}
}

/*DeleteSharesShareIDTargetsIDInternalServerError handles this case with default header values.

error
*/
type DeleteSharesShareIDTargetsIDInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *DeleteSharesShareIDTargetsIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /shares/{share_id}/targets/{id}][%d] deleteSharesShareIdTargetsIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSharesShareIDTargetsIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
