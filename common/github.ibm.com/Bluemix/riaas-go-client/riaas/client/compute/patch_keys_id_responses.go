// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// PatchKeysIDReader is a Reader for the PatchKeysID structure.
type PatchKeysIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchKeysIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchKeysIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchKeysIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchKeysIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPatchKeysIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchKeysIDOK creates a PatchKeysIDOK with default headers values
func NewPatchKeysIDOK() *PatchKeysIDOK {
	return &PatchKeysIDOK{}
}

/*PatchKeysIDOK handles this case with default header values.

dummy
*/
type PatchKeysIDOK struct {
	Payload *models.Key
}

func (o *PatchKeysIDOK) Error() string {
	return fmt.Sprintf("[PATCH /keys/{id}][%d] patchKeysIdOK  %+v", 200, o.Payload)
}

func (o *PatchKeysIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Key)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKeysIDBadRequest creates a PatchKeysIDBadRequest with default headers values
func NewPatchKeysIDBadRequest() *PatchKeysIDBadRequest {
	return &PatchKeysIDBadRequest{}
}

/*PatchKeysIDBadRequest handles this case with default header values.

error
*/
type PatchKeysIDBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PatchKeysIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /keys/{id}][%d] patchKeysIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchKeysIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKeysIDNotFound creates a PatchKeysIDNotFound with default headers values
func NewPatchKeysIDNotFound() *PatchKeysIDNotFound {
	return &PatchKeysIDNotFound{}
}

/*PatchKeysIDNotFound handles this case with default header values.

error
*/
type PatchKeysIDNotFound struct {
	Payload *models.Riaaserror
}

func (o *PatchKeysIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /keys/{id}][%d] patchKeysIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchKeysIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKeysIDInternalServerError creates a PatchKeysIDInternalServerError with default headers values
func NewPatchKeysIDInternalServerError() *PatchKeysIDInternalServerError {
	return &PatchKeysIDInternalServerError{}
}

/*PatchKeysIDInternalServerError handles this case with default header values.

error
*/
type PatchKeysIDInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *PatchKeysIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /keys/{id}][%d] patchKeysIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchKeysIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchKeysIDBody patch keys ID body
swagger:model PatchKeysIDBody
*/
type PatchKeysIDBody struct {

	// The user-defined name for this key
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this patch keys ID body
func (o *PatchKeysIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchKeysIDBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchKeysIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchKeysIDBody) UnmarshalBinary(b []byte) error {
	var res PatchKeysIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
