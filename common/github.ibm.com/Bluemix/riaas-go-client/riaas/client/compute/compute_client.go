// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new compute API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compute API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteImagesID deletes specified image

This request deletes an image. This operation cannot be reversed. It will not succeed for system-provided images.
*/
func (a *Client) DeleteImagesID(params *DeleteImagesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteImagesIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImagesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteImagesID",
		Method:             "DELETE",
		PathPattern:        "/images/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteImagesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteImagesIDAccepted), nil

}

/*
DeleteInstancesID deletes specified instance

This request deletes a instance. This operation cannot be reversed.
*/
func (a *Client) DeleteInstancesID(params *DeleteInstancesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInstancesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteInstancesID",
		Method:             "DELETE",
		PathPattern:        "/instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteInstancesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesIDNoContent), nil

}

/*
DeleteInstancesInstanceIDNetworkInterfacesID deletes specified network interface

This request deletes a network interface. This operation cannot be reversed.
*/
func (a *Client) DeleteInstancesInstanceIDNetworkInterfacesID(params *DeleteInstancesInstanceIDNetworkInterfacesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInstancesInstanceIDNetworkInterfacesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesInstanceIDNetworkInterfacesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteInstancesInstanceIDNetworkInterfacesID",
		Method:             "DELETE",
		PathPattern:        "/instances/{instance_id}/network_interfaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteInstancesInstanceIDNetworkInterfacesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesInstanceIDNetworkInterfacesIDNoContent), nil

}

/*
DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress disassociates specified floating IP

This request disassociates the specified floating IP from the specified network interface
*/
func (a *Client) DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress(params *DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress",
		Method:             "DELETE",
		PathPattern:        "/instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent), nil

}

/*
DeleteInstancesInstanceIDVolumeAttachmentsID deletes a volume interface detaching a volume from a instance

This request deletes a volume interface. The deletion of a volume interface detaches a volume from a instance.
*/
func (a *Client) DeleteInstancesInstanceIDVolumeAttachmentsID(params *DeleteInstancesInstanceIDVolumeAttachmentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInstancesInstanceIDVolumeAttachmentsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesInstanceIDVolumeAttachmentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteInstancesInstanceIDVolumeAttachmentsID",
		Method:             "DELETE",
		PathPattern:        "/instances/{instance_id}/volume_attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteInstancesInstanceIDVolumeAttachmentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesInstanceIDVolumeAttachmentsIDNoContent), nil

}

/*
DeleteKeysID deletes specified key

This request deletes a key. This operation cannot be reversed.
*/
func (a *Client) DeleteKeysID(params *DeleteKeysIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteKeysIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKeysIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteKeysID",
		Method:             "DELETE",
		PathPattern:        "/keys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteKeysIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteKeysIDNoContent), nil

}

/*
GetImages retrieves all images

This request retrieves all images available in the region. Images represent a specific software configuration for a server. Some images are system-provided. Images can also be created from servers or imported from another source.
*/
func (a *Client) GetImages(params *GetImagesParams, authInfo runtime.ClientAuthInfoWriter) (*GetImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetImages",
		Method:             "GET",
		PathPattern:        "/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesOK), nil

}

/*
GetImagesID retrieves specified image

This request retrieves a single image specified by the identifier in the URL.
*/
func (a *Client) GetImagesID(params *GetImagesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetImagesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetImagesID",
		Method:             "GET",
		PathPattern:        "/images/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImagesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesIDOK), nil

}

/*
GetInstanceProfiles retrieves all instance profiles

This request retrieves all instance profiles available in the region. A instance profile specifies the performance characteristics and pricing model for a instance.
*/
func (a *Client) GetInstanceProfiles(params *GetInstanceProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstanceProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstanceProfiles",
		Method:             "GET",
		PathPattern:        "/instance/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstanceProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstanceProfilesOK), nil

}

/*
GetInstanceProfilesName retrieves specified instance action

This request retrieves a single instance profile specified by the name in the URL.
*/
func (a *Client) GetInstanceProfilesName(params *GetInstanceProfilesNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstanceProfilesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceProfilesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstanceProfilesName",
		Method:             "GET",
		PathPattern:        "/instance/profiles/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstanceProfilesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstanceProfilesNameOK), nil

}

/*
GetInstances retrieves all instances

This request retrieves all instances in the region.
*/
func (a *Client) GetInstances(params *GetInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstances",
		Method:             "GET",
		PathPattern:        "/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesOK), nil

}

/*
GetInstancesID retrieves a instance

This request retrieves a single instance specified by the identifier in the URL.
*/
func (a *Client) GetInstancesID(params *GetInstancesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstancesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstancesID",
		Method:             "GET",
		PathPattern:        "/instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstancesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesIDOK), nil

}

/*
GetInstancesInstanceIDInitialization retrieves configuration used to initialize the instance

Retrieves configuration variables used to initialize the instance such as SSH keys and the Windows administrator password.
*/
func (a *Client) GetInstancesInstanceIDInitialization(params *GetInstancesInstanceIDInitializationParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstancesInstanceIDInitializationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesInstanceIDInitializationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstancesInstanceIDInitialization",
		Method:             "GET",
		PathPattern:        "/instances/{instance_id}/initialization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstancesInstanceIDInitializationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesInstanceIDInitializationOK), nil

}

/*
GetInstancesInstanceIDNetworkInterfaces retrieves all network interfaces on a instance

This request retrieves all network interfaces on a instance. A network interface is an abstract representation of a network interface card and connects a instance to a subnet. instances may have more than one network interface, but each network interface can be attached to only one subnet.
*/
func (a *Client) GetInstancesInstanceIDNetworkInterfaces(params *GetInstancesInstanceIDNetworkInterfacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstancesInstanceIDNetworkInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesInstanceIDNetworkInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstancesInstanceIDNetworkInterfaces",
		Method:             "GET",
		PathPattern:        "/instances/{instance_id}/network_interfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstancesInstanceIDNetworkInterfacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesInstanceIDNetworkInterfacesOK), nil

}

/*
GetInstancesInstanceIDNetworkInterfacesID retrieves specified network interface

This request retrieves a single network interface specified by the identifier in the URL.
*/
func (a *Client) GetInstancesInstanceIDNetworkInterfacesID(params *GetInstancesInstanceIDNetworkInterfacesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstancesInstanceIDNetworkInterfacesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesInstanceIDNetworkInterfacesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstancesInstanceIDNetworkInterfacesID",
		Method:             "GET",
		PathPattern:        "/instances/{instance_id}/network_interfaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstancesInstanceIDNetworkInterfacesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesInstanceIDNetworkInterfacesIDOK), nil

}

/*
GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIps retrieves all floating ips associated with a network interface

This request retrieves all floating IPs associated with a network interface.
*/
func (a *Client) GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIps(params *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIps",
		Method:             "GET",
		PathPattern:        "/instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsOK), nil

}

/*
GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress retrieves associated floating IP

This request a retrieves a specified floating IP address if it is associated with the network interface and instance specified in the URL
*/
func (a *Client) GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress(params *GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress",
		Method:             "GET",
		PathPattern:        "/instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressOK), nil

}

/*
GetInstancesInstanceIDVolumeAttachments retrieves all volumes attached to a instance

This request retrieves all volume interfaces for a instance. A volume interface is the attachment of a volume to a instance. Each instance may have many volume interfaces but each volume interface attaches exactly one instance to exactly one volume.
*/
func (a *Client) GetInstancesInstanceIDVolumeAttachments(params *GetInstancesInstanceIDVolumeAttachmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstancesInstanceIDVolumeAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesInstanceIDVolumeAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstancesInstanceIDVolumeAttachments",
		Method:             "GET",
		PathPattern:        "/instances/{instance_id}/volume_attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstancesInstanceIDVolumeAttachmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesInstanceIDVolumeAttachmentsOK), nil

}

/*
GetInstancesInstanceIDVolumeAttachmentsID retrieves specified volume interface

This request retrieves a single volume interface specified by the identifier in the URL.
*/
func (a *Client) GetInstancesInstanceIDVolumeAttachmentsID(params *GetInstancesInstanceIDVolumeAttachmentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetInstancesInstanceIDVolumeAttachmentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesInstanceIDVolumeAttachmentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstancesInstanceIDVolumeAttachmentsID",
		Method:             "GET",
		PathPattern:        "/instances/{instance_id}/volume_attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstancesInstanceIDVolumeAttachmentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesInstanceIDVolumeAttachmentsIDOK), nil

}

/*
GetKeys retrieves all keys

This request retrieves all keys. A key contains a public 2048-bit RSA SSH key which may be installed on servers when they are created. Private keys are not stored by the system.
*/
func (a *Client) GetKeys(params *GetKeysParams, authInfo runtime.ClientAuthInfoWriter) (*GetKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKeys",
		Method:             "GET",
		PathPattern:        "/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeysOK), nil

}

/*
GetKeysID retrieves specified key

This request retrieves a single key specified by the identifier in the URL.
*/
func (a *Client) GetKeysID(params *GetKeysIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetKeysIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeysIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKeysID",
		Method:             "GET",
		PathPattern:        "/keys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeysIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeysIDOK), nil

}

/*
GetOperatingSystems retrieves all operating systems

This request retrieves all operating systems.
*/
func (a *Client) GetOperatingSystems(params *GetOperatingSystemsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOperatingSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperatingSystemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOperatingSystems",
		Method:             "GET",
		PathPattern:        "/operating_systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOperatingSystemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOperatingSystemsOK), nil

}

/*
GetOperatingSystemsName retrieves an operating system

This request retrieves a single operating system specified by the name in the URL.
*/
func (a *Client) GetOperatingSystemsName(params *GetOperatingSystemsNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetOperatingSystemsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperatingSystemsNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOperatingSystemsName",
		Method:             "GET",
		PathPattern:        "/operating_systems/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOperatingSystemsNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOperatingSystemsNameOK), nil

}

/*
PatchImagesID updates an image s name

This request updates an image's name.
*/
func (a *Client) PatchImagesID(params *PatchImagesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchImagesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchImagesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchImagesID",
		Method:             "PATCH",
		PathPattern:        "/images/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchImagesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchImagesIDOK), nil

}

/*
PatchInstancesID This request updates a instance with the information in a provided instance patch. The instance patch object is structured in the same way as a retrieved instance and contains only the information to be updated.
*/
func (a *Client) PatchInstancesID(params *PatchInstancesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchInstancesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchInstancesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchInstancesID",
		Method:             "PATCH",
		PathPattern:        "/instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchInstancesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchInstancesIDOK), nil

}

/*
PatchInstancesInstanceIDNetworkInterfacesID updates a network inferface

This request updates a network interface with the information in a provided network interface patch. The network interface patch object is structured in the same way as a retrieved network interface and can contain an updated name and/or port speed.
*/
func (a *Client) PatchInstancesInstanceIDNetworkInterfacesID(params *PatchInstancesInstanceIDNetworkInterfacesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchInstancesInstanceIDNetworkInterfacesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchInstancesInstanceIDNetworkInterfacesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchInstancesInstanceIDNetworkInterfacesID",
		Method:             "PATCH",
		PathPattern:        "/instances/{instance_id}/network_interfaces/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchInstancesInstanceIDNetworkInterfacesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchInstancesInstanceIDNetworkInterfacesIDOK), nil

}

/*
PatchInstancesInstanceIDVolumeAttachmentsID updates a volume inferface

This request updates a volume interface with the information in a provided volume interface patch. The volume interface patch object is structured in the same way as a retrieved volume interface and can contain an updated name and/or bandwidth.
*/
func (a *Client) PatchInstancesInstanceIDVolumeAttachmentsID(params *PatchInstancesInstanceIDVolumeAttachmentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchInstancesInstanceIDVolumeAttachmentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchInstancesInstanceIDVolumeAttachmentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchInstancesInstanceIDVolumeAttachmentsID",
		Method:             "PATCH",
		PathPattern:        "/instances/{instance_id}/volume_attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchInstancesInstanceIDVolumeAttachmentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchInstancesInstanceIDVolumeAttachmentsIDOK), nil

}

/*
PatchKeysID updates specified key

This request updates a key's name.
*/
func (a *Client) PatchKeysID(params *PatchKeysIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchKeysIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchKeysIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchKeysID",
		Method:             "PATCH",
		PathPattern:        "/keys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchKeysIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchKeysIDOK), nil

}

/*
PostImages creates an image

This request creates a new image from an image template. The image template object is
structured in the same way as a retrieved image, and contains the information necessary to
create the new image. A URL to the image file on object storage must be provided.
*/
func (a *Client) PostImages(params *PostImagesParams, authInfo runtime.ClientAuthInfoWriter) (*PostImagesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostImages",
		Method:             "POST",
		PathPattern:        "/images",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostImagesCreated), nil

}

/*
PostInstances creates a instance

This request provisions a new instance for a instance template. The instance template object is structured in the same way as a retrieved instance, and contains the information necessary to provision the new instance
*/
func (a *Client) PostInstances(params *PostInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*PostInstancesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostInstances",
		Method:             "POST",
		PathPattern:        "/instances",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostInstancesCreated), nil

}

/*
PostInstancesInstanceIDActions creates a new action

This request creates a new action which will be queued up to run as soon as any currently pending or running actions have completed.
*/
func (a *Client) PostInstancesInstanceIDActions(params *PostInstancesInstanceIDActionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostInstancesInstanceIDActionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInstancesInstanceIDActionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostInstancesInstanceIDActions",
		Method:             "POST",
		PathPattern:        "/instances/{instance_id}/actions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostInstancesInstanceIDActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostInstancesInstanceIDActionsCreated), nil

}

/*
PostInstancesInstanceIDNetworkInterfaces creates a network inferface

This request creates a new network interface from a network interface template. The specified subnet must reside in the same VPC as the instance. The network interface template object is structured in the same way as a retrieved network interface, and contains the information necessary to create the new network interface. Each primary and secondary address in the network interface must be contained by one of the specified subnet's CIDR blocks.
*/
func (a *Client) PostInstancesInstanceIDNetworkInterfaces(params *PostInstancesInstanceIDNetworkInterfacesParams, authInfo runtime.ClientAuthInfoWriter) (*PostInstancesInstanceIDNetworkInterfacesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInstancesInstanceIDNetworkInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostInstancesInstanceIDNetworkInterfaces",
		Method:             "POST",
		PathPattern:        "/instances/{instance_id}/network_interfaces",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostInstancesInstanceIDNetworkInterfacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostInstancesInstanceIDNetworkInterfacesCreated), nil

}

/*
PostInstancesInstanceIDVolumeAttachments creates a volume interface attaching a volume to a instance

This request creates a new volume interface from a volume interface template. The volume interface template object is structured in the same way as a retrieved volume interface, and contains the information necessary to create the new volume interface. The creation of a new volume interface attaches a volume to a instance.
*/
func (a *Client) PostInstancesInstanceIDVolumeAttachments(params *PostInstancesInstanceIDVolumeAttachmentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostInstancesInstanceIDVolumeAttachmentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInstancesInstanceIDVolumeAttachmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostInstancesInstanceIDVolumeAttachments",
		Method:             "POST",
		PathPattern:        "/instances/{instance_id}/volume_attachments",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostInstancesInstanceIDVolumeAttachmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostInstancesInstanceIDVolumeAttachmentsCreated), nil

}

/*
PostKeys creates a key

This request imports a new key from a key template containing a public 2048-bit RSA SSH key.
*/
func (a *Client) PostKeys(params *PostKeysParams, authInfo runtime.ClientAuthInfoWriter) (*PostKeysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostKeys",
		Method:             "POST",
		PathPattern:        "/keys",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostKeysCreated), nil

}

/*
PutInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress associates a floating IP with a network interface

This request associates the specified floating IP with the specified network interface
*/
func (a *Client) PutInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress(params *PutInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressParams, authInfo runtime.ClientAuthInfoWriter) (*PutInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress",
		Method:             "PUT",
		PathPattern:        "/instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
