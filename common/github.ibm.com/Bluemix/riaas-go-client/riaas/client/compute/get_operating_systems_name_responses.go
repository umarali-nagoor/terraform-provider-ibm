// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// GetOperatingSystemsNameReader is a Reader for the GetOperatingSystemsName structure.
type GetOperatingSystemsNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOperatingSystemsNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetOperatingSystemsNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetOperatingSystemsNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetOperatingSystemsNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOperatingSystemsNameOK creates a GetOperatingSystemsNameOK with default headers values
func NewGetOperatingSystemsNameOK() *GetOperatingSystemsNameOK {
	return &GetOperatingSystemsNameOK{}
}

/*GetOperatingSystemsNameOK handles this case with default header values.

dummy
*/
type GetOperatingSystemsNameOK struct {
	Payload *models.OperatingSystem
}

func (o *GetOperatingSystemsNameOK) Error() string {
	return fmt.Sprintf("[GET /operating_systems/{name}][%d] getOperatingSystemsNameOK  %+v", 200, o.Payload)
}

func (o *GetOperatingSystemsNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OperatingSystem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOperatingSystemsNameNotFound creates a GetOperatingSystemsNameNotFound with default headers values
func NewGetOperatingSystemsNameNotFound() *GetOperatingSystemsNameNotFound {
	return &GetOperatingSystemsNameNotFound{}
}

/*GetOperatingSystemsNameNotFound handles this case with default header values.

error
*/
type GetOperatingSystemsNameNotFound struct {
	Payload *models.Riaaserror
}

func (o *GetOperatingSystemsNameNotFound) Error() string {
	return fmt.Sprintf("[GET /operating_systems/{name}][%d] getOperatingSystemsNameNotFound  %+v", 404, o.Payload)
}

func (o *GetOperatingSystemsNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOperatingSystemsNameInternalServerError creates a GetOperatingSystemsNameInternalServerError with default headers values
func NewGetOperatingSystemsNameInternalServerError() *GetOperatingSystemsNameInternalServerError {
	return &GetOperatingSystemsNameInternalServerError{}
}

/*GetOperatingSystemsNameInternalServerError handles this case with default header values.

error
*/
type GetOperatingSystemsNameInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *GetOperatingSystemsNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /operating_systems/{name}][%d] getOperatingSystemsNameInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOperatingSystemsNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
