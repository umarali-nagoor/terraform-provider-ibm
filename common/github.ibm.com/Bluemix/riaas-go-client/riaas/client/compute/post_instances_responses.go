// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// PostInstancesReader is a Reader for the PostInstances structure.
type PostInstancesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostInstancesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostInstancesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostInstancesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostInstancesCreated creates a PostInstancesCreated with default headers values
func NewPostInstancesCreated() *PostInstancesCreated {
	return &PostInstancesCreated{}
}

/*PostInstancesCreated handles this case with default header values.

dummy
*/
type PostInstancesCreated struct {
	Payload *models.Instance
}

func (o *PostInstancesCreated) Error() string {
	return fmt.Sprintf("[POST /instances][%d] postInstancesCreated  %+v", 201, o.Payload)
}

func (o *PostInstancesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Instance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostInstancesBadRequest creates a PostInstancesBadRequest with default headers values
func NewPostInstancesBadRequest() *PostInstancesBadRequest {
	return &PostInstancesBadRequest{}
}

/*PostInstancesBadRequest handles this case with default header values.

error
*/
type PostInstancesBadRequest struct {
	Payload *models.Riaaserror
}

func (o *PostInstancesBadRequest) Error() string {
	return fmt.Sprintf("[POST /instances][%d] postInstancesBadRequest  %+v", 400, o.Payload)
}

func (o *PostInstancesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*KeysItems0 KeyIdentityByFingerprint
swagger:model KeysItems0
*/
type KeysItems0 struct {

	// The CRN for this key
	Crn string `json:"crn,omitempty"`

	// The SHA256 fingerprint of the public key
	Fingerprint string `json:"fingerprint,omitempty"`

	// The unique identifier for this key
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this key
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this keys items0
func (o *KeysItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KeysItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *KeysItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *KeysItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeysItems0) UnmarshalBinary(b []byte) error {
	var res KeysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NetworkInterfacesItems0 NetworkInterfaceTemplate
//
// network interface
swagger:model NetworkInterfacesItems0
*/
type NetworkInterfacesItems0 struct {

	// The user-defined name for this network interface
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// The primary IPv4 address
	PrimaryIPV4Address string `json:"primary_ipv4_address,omitempty"`

	// Collection seconary IP addresses
	SecondaryAddresses []string `json:"secondary_addresses,omitempty"`

	// security groups
	SecurityGroups []*NetworkInterfacesItems0SecurityGroupsItems0 `json:"security_groups,omitempty"`

	// subnet
	Subnet *NetworkInterfacesItems0Subnet `json:"subnet,omitempty"`
}

// Validate validates this network interfaces items0
func (o *NetworkInterfacesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkInterfacesItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *NetworkInterfacesItems0) validateSecurityGroups(formats strfmt.Registry) error {

	if swag.IsZero(o.SecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(o.SecurityGroups); i++ {
		if swag.IsZero(o.SecurityGroups[i]) { // not required
			continue
		}

		if o.SecurityGroups[i] != nil {
			if err := o.SecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("security_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *NetworkInterfacesItems0) validateSubnet(formats strfmt.Registry) error {

	if swag.IsZero(o.Subnet) { // not required
		return nil
	}

	if o.Subnet != nil {
		if err := o.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NetworkInterfacesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkInterfacesItems0) UnmarshalBinary(b []byte) error {
	var res NetworkInterfacesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NetworkInterfacesItems0SecurityGroupsItems0 reference
swagger:model NetworkInterfacesItems0SecurityGroupsItems0
*/
type NetworkInterfacesItems0SecurityGroupsItems0 struct {

	// The CRN for this snapshot
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this resource
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this network interfaces items0 security groups items0
func (o *NetworkInterfacesItems0SecurityGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkInterfacesItems0SecurityGroupsItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *NetworkInterfacesItems0SecurityGroupsItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NetworkInterfacesItems0SecurityGroupsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkInterfacesItems0SecurityGroupsItems0) UnmarshalBinary(b []byte) error {
	var res NetworkInterfacesItems0SecurityGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NetworkInterfacesItems0Subnet reference
swagger:model NetworkInterfacesItems0Subnet
*/
type NetworkInterfacesItems0Subnet struct {

	// The CRN for this snapshot
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this resource
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this network interfaces items0 subnet
func (o *NetworkInterfacesItems0Subnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkInterfacesItems0Subnet) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("subnet"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *NetworkInterfacesItems0Subnet) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("subnet"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NetworkInterfacesItems0Subnet) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkInterfacesItems0Subnet) UnmarshalBinary(b []byte) error {
	var res NetworkInterfacesItems0Subnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesBody instanceFromImageTemplate
swagger:model PostInstancesBody
*/
type PostInstancesBody struct {

	// boot volume attachment
	BootVolumeAttachment *PostInstancesParamsBodyBootVolumeAttachment `json:"boot_volume_attachment,omitempty"`

	// image
	Image *PostInstancesParamsBodyImage `json:"image,omitempty"`

	// The public SSH keys to install on the instance; if no keys are provided the instance will be inaccessible unless the image used provides a means of access
	Keys []*KeysItems0 `json:"keys,omitempty"`

	// The user-defined name for this instance
	// Pattern: ^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$
	Name string `json:"name,omitempty"`

	// Collection of network interfaces to create for the instance
	NetworkInterfaces []*NetworkInterfacesItems0 `json:"network_interfaces,omitempty"`

	// primary network interface
	PrimaryNetworkInterface *PostInstancesParamsBodyPrimaryNetworkInterface `json:"primary_network_interface,omitempty"`

	// profile
	Profile *PostInstancesParamsBodyProfile `json:"profile,omitempty"`

	// resource group
	ResourceGroup *PostInstancesParamsBodyResourceGroup `json:"resource_group,omitempty"`

	// User data to be made available when setting up the instance
	UserData string `json:"user_data,omitempty"`

	// Collection of volume interfaces
	VolumeAttachments []*VolumeAttachmentsItems0 `json:"volume_attachments,omitempty"`

	// vpc
	Vpc *PostInstancesParamsBodyVpc `json:"vpc,omitempty"`

	// zone
	Zone *models.NameReference `json:"zone,omitempty"`
}

// Validate validates this post instances body
func (o *PostInstancesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBootVolumeAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrimaryNetworkInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVolumeAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVpc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesBody) validateBootVolumeAttachment(formats strfmt.Registry) error {

	if swag.IsZero(o.BootVolumeAttachment) { // not required
		return nil
	}

	if o.BootVolumeAttachment != nil {
		if err := o.BootVolumeAttachment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "boot_volume_attachment")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstancesBody) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(o.Image) { // not required
		return nil
	}

	if o.Image != nil {
		if err := o.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "image")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstancesBody) validateKeys(formats strfmt.Registry) error {

	if swag.IsZero(o.Keys) { // not required
		return nil
	}

	for i := 0; i < len(o.Keys); i++ {
		if swag.IsZero(o.Keys[i]) { // not required
			continue
		}

		if o.Keys[i] != nil {
			if err := o.Keys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostInstancesBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"name", "body", string(o.Name), `^([a-z]|[a-z][-a-z0-9]*[a-z0-9])$`); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesBody) validateNetworkInterfaces(formats strfmt.Registry) error {

	if swag.IsZero(o.NetworkInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(o.NetworkInterfaces); i++ {
		if swag.IsZero(o.NetworkInterfaces[i]) { // not required
			continue
		}

		if o.NetworkInterfaces[i] != nil {
			if err := o.NetworkInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "network_interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostInstancesBody) validatePrimaryNetworkInterface(formats strfmt.Registry) error {

	if swag.IsZero(o.PrimaryNetworkInterface) { // not required
		return nil
	}

	if o.PrimaryNetworkInterface != nil {
		if err := o.PrimaryNetworkInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "primary_network_interface")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstancesBody) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(o.Profile) { // not required
		return nil
	}

	if o.Profile != nil {
		if err := o.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "profile")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstancesBody) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(o.ResourceGroup) { // not required
		return nil
	}

	if o.ResourceGroup != nil {
		if err := o.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "resource_group")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstancesBody) validateVolumeAttachments(formats strfmt.Registry) error {

	if swag.IsZero(o.VolumeAttachments) { // not required
		return nil
	}

	for i := 0; i < len(o.VolumeAttachments); i++ {
		if swag.IsZero(o.VolumeAttachments[i]) { // not required
			continue
		}

		if o.VolumeAttachments[i] != nil {
			if err := o.VolumeAttachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "volume_attachments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostInstancesBody) validateVpc(formats strfmt.Registry) error {

	if swag.IsZero(o.Vpc) { // not required
		return nil
	}

	if o.Vpc != nil {
		if err := o.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "vpc")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstancesBody) validateZone(formats strfmt.Registry) error {

	if swag.IsZero(o.Zone) { // not required
		return nil
	}

	if o.Zone != nil {
		if err := o.Zone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "zone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesBody) UnmarshalBinary(b []byte) error {
	var res PostInstancesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyBootVolumeAttachment VolumeAttachmentTemplateinstanceContext
//
// The boot volume interface for the instance
swagger:model PostInstancesParamsBodyBootVolumeAttachment
*/
type PostInstancesParamsBodyBootVolumeAttachment struct {

	// delete volume on instance delete
	DeleteVolumeOnInstanceDelete bool `json:"delete_volume_on_instance_delete"`

	// The user-defined name for this volume interface
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// volume
	Volume *PostInstancesParamsBodyBootVolumeAttachmentVolume `json:"volume,omitempty"`
}

// Validate validates this post instances params body boot volume attachment
func (o *PostInstancesParamsBodyBootVolumeAttachment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachment) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"boot_volume_attachment"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachment) validateVolume(formats strfmt.Registry) error {

	if swag.IsZero(o.Volume) { // not required
		return nil
	}

	if o.Volume != nil {
		if err := o.Volume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "boot_volume_attachment" + "." + "volume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachment) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachment) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyBootVolumeAttachment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyBootVolumeAttachmentVolume BootVolumeTemplateinstanceContext
//
// The identity of the volume to attach to the instance or a template for a new volume
swagger:model PostInstancesParamsBodyBootVolumeAttachmentVolume
*/
type PostInstancesParamsBodyBootVolumeAttachmentVolume struct {

	// The billing term for the volume
	// Enum: [hourly monthly]
	BillingTerm *string `json:"billing_term,omitempty"`

	// The capacity of the volume in gigabytes
	// Maximum: 64000
	// Minimum: 10
	Capacity int64 `json:"capacity,omitempty"`

	// encryption key
	EncryptionKey *PostInstancesParamsBodyBootVolumeAttachmentVolumeEncryptionKey `json:"encryption_key,omitempty"`

	// The bandwidth for the volume
	// Enum: [1000 10000 100000]
	Iops int64 `json:"iops,omitempty"`

	// The user-defined name for this volume
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// profile
	Profile *PostInstancesParamsBodyBootVolumeAttachmentVolumeProfile `json:"profile,omitempty"`

	// resource group
	ResourceGroup *PostInstancesParamsBodyBootVolumeAttachmentVolumeResourceGroup `json:"resource_group,omitempty"`

	// source snapshot
	SourceSnapshot *PostInstancesParamsBodyBootVolumeAttachmentVolumeSourceSnapshot `json:"source_snapshot,omitempty"`

	// The volume type
	// Enum: [boot data]
	Type string `json:"type,omitempty"`
}

// Validate validates this post instances params body boot volume attachment volume
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEncryptionKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postInstancesParamsBodyBootVolumeAttachmentVolumeTypeBillingTermPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hourly","monthly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postInstancesParamsBodyBootVolumeAttachmentVolumeTypeBillingTermPropEnum = append(postInstancesParamsBodyBootVolumeAttachmentVolumeTypeBillingTermPropEnum, v)
	}
}

const (

	// PostInstancesParamsBodyBootVolumeAttachmentVolumeBillingTermHourly captures enum value "hourly"
	PostInstancesParamsBodyBootVolumeAttachmentVolumeBillingTermHourly string = "hourly"

	// PostInstancesParamsBodyBootVolumeAttachmentVolumeBillingTermMonthly captures enum value "monthly"
	PostInstancesParamsBodyBootVolumeAttachmentVolumeBillingTermMonthly string = "monthly"
)

// prop value enum
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateBillingTermEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postInstancesParamsBodyBootVolumeAttachmentVolumeTypeBillingTermPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateBillingTerm(formats strfmt.Registry) error {

	if swag.IsZero(o.BillingTerm) { // not required
		return nil
	}

	// value enum
	if err := o.validateBillingTermEnum("body"+"."+"boot_volume_attachment"+"."+"volume"+"."+"billing_term", "body", *o.BillingTerm); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateCapacity(formats strfmt.Registry) error {

	if swag.IsZero(o.Capacity) { // not required
		return nil
	}

	if err := validate.MinimumInt("body"+"."+"boot_volume_attachment"+"."+"volume"+"."+"capacity", "body", int64(o.Capacity), 10, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("body"+"."+"boot_volume_attachment"+"."+"volume"+"."+"capacity", "body", int64(o.Capacity), 64000, false); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateEncryptionKey(formats strfmt.Registry) error {

	if swag.IsZero(o.EncryptionKey) { // not required
		return nil
	}

	if o.EncryptionKey != nil {
		if err := o.EncryptionKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "boot_volume_attachment" + "." + "volume" + "." + "encryption_key")
			}
			return err
		}
	}

	return nil
}

var postInstancesParamsBodyBootVolumeAttachmentVolumeTypeIopsPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1000,10000,100000]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postInstancesParamsBodyBootVolumeAttachmentVolumeTypeIopsPropEnum = append(postInstancesParamsBodyBootVolumeAttachmentVolumeTypeIopsPropEnum, v)
	}
}

// prop value enum
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateIopsEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, postInstancesParamsBodyBootVolumeAttachmentVolumeTypeIopsPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateIops(formats strfmt.Registry) error {

	if swag.IsZero(o.Iops) { // not required
		return nil
	}

	// value enum
	if err := o.validateIopsEnum("body"+"."+"boot_volume_attachment"+"."+"volume"+"."+"iops", "body", o.Iops); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"boot_volume_attachment"+"."+"volume"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(o.Profile) { // not required
		return nil
	}

	if o.Profile != nil {
		if err := o.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "boot_volume_attachment" + "." + "volume" + "." + "profile")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(o.ResourceGroup) { // not required
		return nil
	}

	if o.ResourceGroup != nil {
		if err := o.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "boot_volume_attachment" + "." + "volume" + "." + "resource_group")
			}
			return err
		}
	}

	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateSourceSnapshot(formats strfmt.Registry) error {

	if swag.IsZero(o.SourceSnapshot) { // not required
		return nil
	}

	if o.SourceSnapshot != nil {
		if err := o.SourceSnapshot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "boot_volume_attachment" + "." + "volume" + "." + "source_snapshot")
			}
			return err
		}
	}

	return nil
}

var postInstancesParamsBodyBootVolumeAttachmentVolumeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["boot","data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postInstancesParamsBodyBootVolumeAttachmentVolumeTypeTypePropEnum = append(postInstancesParamsBodyBootVolumeAttachmentVolumeTypeTypePropEnum, v)
	}
}

const (

	// PostInstancesParamsBodyBootVolumeAttachmentVolumeTypeBoot captures enum value "boot"
	PostInstancesParamsBodyBootVolumeAttachmentVolumeTypeBoot string = "boot"

	// PostInstancesParamsBodyBootVolumeAttachmentVolumeTypeData captures enum value "data"
	PostInstancesParamsBodyBootVolumeAttachmentVolumeTypeData string = "data"
)

// prop value enum
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postInstancesParamsBodyBootVolumeAttachmentVolumeTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"boot_volume_attachment"+"."+"volume"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolume) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyBootVolumeAttachmentVolume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyBootVolumeAttachmentVolumeEncryptionKey VolumeEncryptionKey
//
// The encryption key for the volume
swagger:model PostInstancesParamsBodyBootVolumeAttachmentVolumeEncryptionKey
*/
type PostInstancesParamsBodyBootVolumeAttachmentVolumeEncryptionKey struct {

	// The CRN for the volume encryption key
	Crn string `json:"crn,omitempty"`
}

// Validate validates this post instances params body boot volume attachment volume encryption key
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeEncryptionKey) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeEncryptionKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeEncryptionKey) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyBootVolumeAttachmentVolumeEncryptionKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyBootVolumeAttachmentVolumeProfile reference
swagger:model PostInstancesParamsBodyBootVolumeAttachmentVolumeProfile
*/
type PostInstancesParamsBodyBootVolumeAttachmentVolumeProfile struct {

	// The CRN for this snapshot
	Crn string `json:"crn,omitempty"`

	// The user-defined name for this resource
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post instances params body boot volume attachment volume profile
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeProfile) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"boot_volume_attachment"+"."+"volume"+"."+"profile"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeProfile) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeProfile) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyBootVolumeAttachmentVolumeProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyBootVolumeAttachmentVolumeResourceGroup idreference
swagger:model PostInstancesParamsBodyBootVolumeAttachmentVolumeResourceGroup
*/
type PostInstancesParamsBodyBootVolumeAttachmentVolumeResourceGroup struct {

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this post instances params body boot volume attachment volume resource group
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeResourceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeResourceGroup) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"boot_volume_attachment"+"."+"volume"+"."+"resource_group"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeResourceGroup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeResourceGroup) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyBootVolumeAttachmentVolumeResourceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyBootVolumeAttachmentVolumeSourceSnapshot reference
swagger:model PostInstancesParamsBodyBootVolumeAttachmentVolumeSourceSnapshot
*/
type PostInstancesParamsBodyBootVolumeAttachmentVolumeSourceSnapshot struct {

	// The CRN for this snapshot
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this resource
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post instances params body boot volume attachment volume source snapshot
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeSourceSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeSourceSnapshot) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"boot_volume_attachment"+"."+"volume"+"."+"source_snapshot"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeSourceSnapshot) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"boot_volume_attachment"+"."+"volume"+"."+"source_snapshot"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeSourceSnapshot) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyBootVolumeAttachmentVolumeSourceSnapshot) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyBootVolumeAttachmentVolumeSourceSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyImage ImageIdentityByName
//
// The the identity of the image to be used when provisioning the instance
swagger:model PostInstancesParamsBodyImage
*/
type PostInstancesParamsBodyImage struct {

	// The CRN for this image
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this image
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this image
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post instances params body image
func (o *PostInstancesParamsBodyImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyImage) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"image"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyImage) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"image"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyImage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyImage) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyPrimaryNetworkInterface PrimaryNetworkInterfaceTemplate
//
// Primary network interface
swagger:model PostInstancesParamsBodyPrimaryNetworkInterface
*/
type PostInstancesParamsBodyPrimaryNetworkInterface struct {

	// Optional array of identities and/or templates of floating IPs to associate with this network interface
	FloatingIps []*PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0 `json:"floating_ips,omitempty"`

	// The user-defined name for this network interface
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// The primary IPv4 address
	PrimaryIPV4Address string `json:"primary_ipv4_address,omitempty"`

	// Collection seconary IP addresses
	SecondaryAddresses []string `json:"secondary_addresses,omitempty"`

	// security groups
	SecurityGroups []*PostInstancesParamsBodyPrimaryNetworkInterfaceSecurityGroupsItems0 `json:"security_groups,omitempty"`

	// subnet
	Subnet *PostInstancesParamsBodyPrimaryNetworkInterfaceSubnet `json:"subnet,omitempty"`
}

// Validate validates this post instances params body primary network interface
func (o *PostInstancesParamsBodyPrimaryNetworkInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFloatingIps(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyPrimaryNetworkInterface) validateFloatingIps(formats strfmt.Registry) error {

	if swag.IsZero(o.FloatingIps) { // not required
		return nil
	}

	for i := 0; i < len(o.FloatingIps); i++ {
		if swag.IsZero(o.FloatingIps[i]) { // not required
			continue
		}

		if o.FloatingIps[i] != nil {
			if err := o.FloatingIps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "primary_network_interface" + "." + "floating_ips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostInstancesParamsBodyPrimaryNetworkInterface) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"primary_network_interface"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyPrimaryNetworkInterface) validateSecurityGroups(formats strfmt.Registry) error {

	if swag.IsZero(o.SecurityGroups) { // not required
		return nil
	}

	for i := 0; i < len(o.SecurityGroups); i++ {
		if swag.IsZero(o.SecurityGroups[i]) { // not required
			continue
		}

		if o.SecurityGroups[i] != nil {
			if err := o.SecurityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "primary_network_interface" + "." + "security_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostInstancesParamsBodyPrimaryNetworkInterface) validateSubnet(formats strfmt.Registry) error {

	if swag.IsZero(o.Subnet) { // not required
		return nil
	}

	if o.Subnet != nil {
		if err := o.Subnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "primary_network_interface" + "." + "subnet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyPrimaryNetworkInterface) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyPrimaryNetworkInterface) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyPrimaryNetworkInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0 FloatingIPTemplateBasic
swagger:model PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0
*/
type PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0 struct {

	// The globally unique IP address
	Address string `json:"address,omitempty"`

	// The CRN for this floating IP
	Crn string `json:"crn,omitempty"`

	// The user-defined name for this floating IP
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// resource group
	ResourceGroup *PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0ResourceGroup `json:"resource_group,omitempty"`
}

// Validate validates this post instances params body primary network interface floating ips items0
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(o.ResourceGroup) { // not required
		return nil
	}

	if o.ResourceGroup != nil {
		if err := o.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0ResourceGroup idreference
swagger:model PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0ResourceGroup
*/
type PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0ResourceGroup struct {

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this post instances params body primary network interface floating ips items0 resource group
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0ResourceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0ResourceGroup) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("resource_group"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0ResourceGroup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0ResourceGroup) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyPrimaryNetworkInterfaceFloatingIpsItems0ResourceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyPrimaryNetworkInterfaceSecurityGroupsItems0 reference
swagger:model PostInstancesParamsBodyPrimaryNetworkInterfaceSecurityGroupsItems0
*/
type PostInstancesParamsBodyPrimaryNetworkInterfaceSecurityGroupsItems0 struct {

	// The CRN for this snapshot
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this resource
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post instances params body primary network interface security groups items0
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceSecurityGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceSecurityGroupsItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceSecurityGroupsItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceSecurityGroupsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceSecurityGroupsItems0) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyPrimaryNetworkInterfaceSecurityGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyPrimaryNetworkInterfaceSubnet reference
swagger:model PostInstancesParamsBodyPrimaryNetworkInterfaceSubnet
*/
type PostInstancesParamsBodyPrimaryNetworkInterfaceSubnet struct {

	// The CRN for this snapshot
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this resource
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post instances params body primary network interface subnet
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceSubnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceSubnet) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"primary_network_interface"+"."+"subnet"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceSubnet) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"primary_network_interface"+"."+"subnet"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceSubnet) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyPrimaryNetworkInterfaceSubnet) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyPrimaryNetworkInterfaceSubnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyProfile reference
swagger:model PostInstancesParamsBodyProfile
*/
type PostInstancesParamsBodyProfile struct {

	// The CRN for this snapshot
	Crn string `json:"crn,omitempty"`

	// The user-defined name for this resource
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post instances params body profile
func (o *PostInstancesParamsBodyProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyProfile) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"profile"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyProfile) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyProfile) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyResourceGroup idreference
swagger:model PostInstancesParamsBodyResourceGroup
*/
type PostInstancesParamsBodyResourceGroup struct {

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this post instances params body resource group
func (o *PostInstancesParamsBodyResourceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyResourceGroup) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"resource_group"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyResourceGroup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyResourceGroup) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyResourceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostInstancesParamsBodyVpc VPCIdentityByName
//
// The VPC the instance is to be a part of
swagger:model PostInstancesParamsBodyVpc
*/
type PostInstancesParamsBodyVpc struct {

	// The CRN for this VPC
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this VPC
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this VPC
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this post instances params body vpc
func (o *PostInstancesParamsBodyVpc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostInstancesParamsBodyVpc) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"vpc"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostInstancesParamsBodyVpc) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"vpc"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostInstancesParamsBodyVpc) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostInstancesParamsBodyVpc) UnmarshalBinary(b []byte) error {
	var res PostInstancesParamsBodyVpc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VolumeAttachmentsItems0 VolumeAttachmentTemplateinstanceContext
//
// The boot volume interface for the instance
swagger:model VolumeAttachmentsItems0
*/
type VolumeAttachmentsItems0 struct {

	// If set to true, when deleting the instance the volume will also be deleted
	DeleteVolumeOnInstanceDelete *bool `json:"delete_volume_on_instance_delete,omitempty"`

	// The user-defined name for this volume interface
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// volume
	Volume *VolumeAttachmentsItems0Volume `json:"volume,omitempty"`
}

// Validate validates this volume attachments items0
func (o *VolumeAttachmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeAttachmentsItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *VolumeAttachmentsItems0) validateVolume(formats strfmt.Registry) error {

	if swag.IsZero(o.Volume) { // not required
		return nil
	}

	if o.Volume != nil {
		if err := o.Volume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VolumeAttachmentsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeAttachmentsItems0) UnmarshalBinary(b []byte) error {
	var res VolumeAttachmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VolumeAttachmentsItems0Volume BootVolumeTemplateinstanceContext
//
// The identity of the volume to attach to the instance or a template for a new volume
swagger:model VolumeAttachmentsItems0Volume
*/
type VolumeAttachmentsItems0Volume struct {

	// The billing term for the volume
	// Enum: [hourly monthly]
	BillingTerm *string `json:"billing_term,omitempty"`

	// The capacity of the volume in gigabytes
	// Minimum: 10
	Capacity int64 `json:"capacity,omitempty"`

	// The CRN for this volume
	Crn string `json:"crn,omitempty"`

	// encryption key
	EncryptionKey *VolumeAttachmentsItems0VolumeEncryptionKey `json:"encryption_key,omitempty"`

	// The unique identifier for this volume
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The bandwidth for the volume
	// Enum: [1000 10000 100000]
	Iops int64 `json:"iops,omitempty"`

	// The user-defined name for this volume
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// profile
	Profile *VolumeAttachmentsItems0VolumeProfile `json:"profile,omitempty"`

	// resource group
	ResourceGroup *VolumeAttachmentsItems0VolumeResourceGroup `json:"resource_group,omitempty"`

	// source snapshot
	SourceSnapshot *VolumeAttachmentsItems0VolumeSourceSnapshot `json:"source_snapshot,omitempty"`

	// The volume type
	// Enum: [boot data]
	Type string `json:"type,omitempty"`
}

// Validate validates this volume attachments items0 volume
func (o *VolumeAttachmentsItems0Volume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBillingTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEncryptionKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIops(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var volumeAttachmentsItems0VolumeTypeBillingTermPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hourly","monthly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeAttachmentsItems0VolumeTypeBillingTermPropEnum = append(volumeAttachmentsItems0VolumeTypeBillingTermPropEnum, v)
	}
}

const (

	// VolumeAttachmentsItems0VolumeBillingTermHourly captures enum value "hourly"
	VolumeAttachmentsItems0VolumeBillingTermHourly string = "hourly"

	// VolumeAttachmentsItems0VolumeBillingTermMonthly captures enum value "monthly"
	VolumeAttachmentsItems0VolumeBillingTermMonthly string = "monthly"
)

// prop value enum
func (o *VolumeAttachmentsItems0Volume) validateBillingTermEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, volumeAttachmentsItems0VolumeTypeBillingTermPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *VolumeAttachmentsItems0Volume) validateBillingTerm(formats strfmt.Registry) error {

	if swag.IsZero(o.BillingTerm) { // not required
		return nil
	}

	// value enum
	if err := o.validateBillingTermEnum("volume"+"."+"billing_term", "body", *o.BillingTerm); err != nil {
		return err
	}

	return nil
}

func (o *VolumeAttachmentsItems0Volume) validateCapacity(formats strfmt.Registry) error {

	if swag.IsZero(o.Capacity) { // not required
		return nil
	}

	if err := validate.MinimumInt("volume"+"."+"capacity", "body", int64(o.Capacity), 10, false); err != nil {
		return err
	}

	return nil
}

func (o *VolumeAttachmentsItems0Volume) validateEncryptionKey(formats strfmt.Registry) error {

	if swag.IsZero(o.EncryptionKey) { // not required
		return nil
	}

	if o.EncryptionKey != nil {
		if err := o.EncryptionKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume" + "." + "encryption_key")
			}
			return err
		}
	}

	return nil
}

func (o *VolumeAttachmentsItems0Volume) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("volume"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var volumeAttachmentsItems0VolumeTypeIopsPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1000,10000,100000]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeAttachmentsItems0VolumeTypeIopsPropEnum = append(volumeAttachmentsItems0VolumeTypeIopsPropEnum, v)
	}
}

// prop value enum
func (o *VolumeAttachmentsItems0Volume) validateIopsEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, volumeAttachmentsItems0VolumeTypeIopsPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *VolumeAttachmentsItems0Volume) validateIops(formats strfmt.Registry) error {

	if swag.IsZero(o.Iops) { // not required
		return nil
	}

	// value enum
	if err := o.validateIopsEnum("volume"+"."+"iops", "body", o.Iops); err != nil {
		return err
	}

	return nil
}

func (o *VolumeAttachmentsItems0Volume) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("volume"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (o *VolumeAttachmentsItems0Volume) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(o.Profile) { // not required
		return nil
	}

	if o.Profile != nil {
		if err := o.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume" + "." + "profile")
			}
			return err
		}
	}

	return nil
}

func (o *VolumeAttachmentsItems0Volume) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(o.ResourceGroup) { // not required
		return nil
	}

	if o.ResourceGroup != nil {
		if err := o.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume" + "." + "resource_group")
			}
			return err
		}
	}

	return nil
}

func (o *VolumeAttachmentsItems0Volume) validateSourceSnapshot(formats strfmt.Registry) error {

	if swag.IsZero(o.SourceSnapshot) { // not required
		return nil
	}

	if o.SourceSnapshot != nil {
		if err := o.SourceSnapshot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volume" + "." + "source_snapshot")
			}
			return err
		}
	}

	return nil
}

var volumeAttachmentsItems0VolumeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["boot","data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeAttachmentsItems0VolumeTypeTypePropEnum = append(volumeAttachmentsItems0VolumeTypeTypePropEnum, v)
	}
}

const (

	// VolumeAttachmentsItems0VolumeTypeBoot captures enum value "boot"
	VolumeAttachmentsItems0VolumeTypeBoot string = "boot"

	// VolumeAttachmentsItems0VolumeTypeData captures enum value "data"
	VolumeAttachmentsItems0VolumeTypeData string = "data"
)

// prop value enum
func (o *VolumeAttachmentsItems0Volume) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, volumeAttachmentsItems0VolumeTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *VolumeAttachmentsItems0Volume) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("volume"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VolumeAttachmentsItems0Volume) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeAttachmentsItems0Volume) UnmarshalBinary(b []byte) error {
	var res VolumeAttachmentsItems0Volume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VolumeAttachmentsItems0VolumeEncryptionKey VolumeEncryptionKey
//
// The encryption key for the volume
swagger:model VolumeAttachmentsItems0VolumeEncryptionKey
*/
type VolumeAttachmentsItems0VolumeEncryptionKey struct {

	// The CRN for the volume encryption key
	Crn string `json:"crn,omitempty"`
}

// Validate validates this volume attachments items0 volume encryption key
func (o *VolumeAttachmentsItems0VolumeEncryptionKey) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VolumeAttachmentsItems0VolumeEncryptionKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeAttachmentsItems0VolumeEncryptionKey) UnmarshalBinary(b []byte) error {
	var res VolumeAttachmentsItems0VolumeEncryptionKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VolumeAttachmentsItems0VolumeProfile reference
swagger:model VolumeAttachmentsItems0VolumeProfile
*/
type VolumeAttachmentsItems0VolumeProfile struct {

	// The CRN for this profile
	Crn string `json:"crn,omitempty"`

	// The user-defined name for this resource
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this volume attachments items0 volume profile
func (o *VolumeAttachmentsItems0VolumeProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeAttachmentsItems0VolumeProfile) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("volume"+"."+"profile"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VolumeAttachmentsItems0VolumeProfile) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeAttachmentsItems0VolumeProfile) UnmarshalBinary(b []byte) error {
	var res VolumeAttachmentsItems0VolumeProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VolumeAttachmentsItems0VolumeResourceGroup idreference
swagger:model VolumeAttachmentsItems0VolumeResourceGroup
*/
type VolumeAttachmentsItems0VolumeResourceGroup struct {

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this volume attachments items0 volume resource group
func (o *VolumeAttachmentsItems0VolumeResourceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeAttachmentsItems0VolumeResourceGroup) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("volume"+"."+"resource_group"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VolumeAttachmentsItems0VolumeResourceGroup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeAttachmentsItems0VolumeResourceGroup) UnmarshalBinary(b []byte) error {
	var res VolumeAttachmentsItems0VolumeResourceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VolumeAttachmentsItems0VolumeSourceSnapshot reference
swagger:model VolumeAttachmentsItems0VolumeSourceSnapshot
*/
type VolumeAttachmentsItems0VolumeSourceSnapshot struct {

	// The CRN for this snapshot
	Crn string `json:"crn,omitempty"`

	// The unique identifier for this resource
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The user-defined name for this resource
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this volume attachments items0 volume source snapshot
func (o *VolumeAttachmentsItems0VolumeSourceSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeAttachmentsItems0VolumeSourceSnapshot) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("volume"+"."+"source_snapshot"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *VolumeAttachmentsItems0VolumeSourceSnapshot) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.Pattern("volume"+"."+"source_snapshot"+"."+"name", "body", string(o.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VolumeAttachmentsItems0VolumeSourceSnapshot) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeAttachmentsItems0VolumeSourceSnapshot) UnmarshalBinary(b []byte) error {
	var res VolumeAttachmentsItems0VolumeSourceSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
