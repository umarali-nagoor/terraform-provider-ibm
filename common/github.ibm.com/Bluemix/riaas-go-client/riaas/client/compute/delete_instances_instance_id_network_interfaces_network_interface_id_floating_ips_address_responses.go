// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader is a Reader for the DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddress structure.
type DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent creates a DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent with default headers values
func NewDeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent() *DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent {
	return &DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent{}
}

/*DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent handles this case with default header values.

The floating IP was disassociated successfully.
*/
type DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent struct {
}

func (o *DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent) Error() string {
	return fmt.Sprintf("[DELETE /instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips/{address}][%d] deleteInstancesInstanceIdNetworkInterfacesNetworkInterfaceIdFloatingIpsAddressNoContent ", 204)
}

func (o *DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest creates a DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest with default headers values
func NewDeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest() *DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest {
	return &DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest{}
}

/*DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest handles this case with default header values.

The specified floating IP could not be disassociated.
*/
type DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest struct {
	Payload *models.Riaaserror
}

func (o *DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips/{address}][%d] deleteInstancesInstanceIdNetworkInterfacesNetworkInterfaceIdFloatingIpsAddressBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound creates a DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound with default headers values
func NewDeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound() *DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound {
	return &DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound{}
}

/*DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound handles this case with default header values.

The specified floating IP address is not associated with the network interface with the specified identifier
*/
type DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound struct {
	Payload *models.Riaaserror
}

func (o *DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound) Error() string {
	return fmt.Sprintf("[DELETE /instances/{instance_id}/network_interfaces/{network_interface_id}/floating_ips/{address}][%d] deleteInstancesInstanceIdNetworkInterfacesNetworkInterfaceIdFloatingIpsAddressNotFound  %+v", 404, o.Payload)
}

func (o *DeleteInstancesInstanceIDNetworkInterfacesNetworkInterfaceIDFloatingIpsAddressNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
