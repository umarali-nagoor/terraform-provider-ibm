// Code generated by go-swagger; DO NOT EDIT.

package geography

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.ibm.com/Bluemix/riaas-go-client/riaas/models"
)

// GetRegionsReader is a Reader for the GetRegions structure.
type GetRegionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRegionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetRegionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewGetRegionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRegionsOK creates a GetRegionsOK with default headers values
func NewGetRegionsOK() *GetRegionsOK {
	return &GetRegionsOK{}
}

/*GetRegionsOK handles this case with default header values.

dummy
*/
type GetRegionsOK struct {
	Payload *GetRegionsOKBody
}

func (o *GetRegionsOK) Error() string {
	return fmt.Sprintf("[GET /regions][%d] getRegionsOK  %+v", 200, o.Payload)
}

func (o *GetRegionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRegionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegionsInternalServerError creates a GetRegionsInternalServerError with default headers values
func NewGetRegionsInternalServerError() *GetRegionsInternalServerError {
	return &GetRegionsInternalServerError{}
}

/*GetRegionsInternalServerError handles this case with default header values.

error
*/
type GetRegionsInternalServerError struct {
	Payload *models.Riaaserror
}

func (o *GetRegionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /regions][%d] getRegionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRegionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Riaaserror)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetRegionsOKBody RegionCollection
swagger:model GetRegionsOKBody
*/
type GetRegionsOKBody struct {

	// Array of Region objects
	// Required: true
	Regions []*models.Region `json:"regions"`
}

// Validate validates this get regions o k body
func (o *GetRegionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRegionsOKBody) validateRegions(formats strfmt.Registry) error {

	if err := validate.Required("getRegionsOK"+"."+"regions", "body", o.Regions); err != nil {
		return err
	}

	for i := 0; i < len(o.Regions); i++ {
		if swag.IsZero(o.Regions[i]) { // not required
			continue
		}

		if o.Regions[i] != nil {
			if err := o.Regions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRegionsOK" + "." + "regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRegionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRegionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetRegionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
