// Code generated by go-swagger; DO NOT EDIT.

package geography

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new geography API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for geography API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetRegions retrieves all regions

This request retrieves all regions. Each region is a separate geographic area containing multiple isolated zones. Resources can be provisioned into a one or more zones in a region. Each zone is isolated, but connected to other zones in the same region with low-latency and high-bandwidth links. Regions represent the top-level of fault isolation available. Resources deployed within a single region also benefit from the low latency afforded by geographic proximity.
*/
func (a *Client) GetRegions(params *GetRegionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRegions",
		Method:             "GET",
		PathPattern:        "/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRegionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionsOK), nil

}

/*
GetRegionsName retrieves a region

This request retrieves a single region specified by the name in the URL.
*/
func (a *Client) GetRegionsName(params *GetRegionsNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegionsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionsNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRegionsName",
		Method:             "GET",
		PathPattern:        "/regions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRegionsNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionsNameOK), nil

}

/*
GetRegionsRegionNameZones retrieves all zones in a region

This request retrieves all zones in a region. Zones represent logically-isolated data centers with high-bandwidth, low-latency interconnects to other zones in the same region. Faults in a zone do not impact other zones.
*/
func (a *Client) GetRegionsRegionNameZones(params *GetRegionsRegionNameZonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegionsRegionNameZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionsRegionNameZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRegionsRegionNameZones",
		Method:             "GET",
		PathPattern:        "/regions/{region_name}/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRegionsRegionNameZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionsRegionNameZonesOK), nil

}

/*
GetRegionsRegionNameZonesZoneName retrieves a zone

This request retrieves a single zone specified by the region and zone names in the URL.
*/
func (a *Client) GetRegionsRegionNameZonesZoneName(params *GetRegionsRegionNameZonesZoneNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegionsRegionNameZonesZoneNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionsRegionNameZonesZoneNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRegionsRegionNameZonesZoneName",
		Method:             "GET",
		PathPattern:        "/regions/{region_name}/zones/{zone_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRegionsRegionNameZonesZoneNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionsRegionNameZonesZoneNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
