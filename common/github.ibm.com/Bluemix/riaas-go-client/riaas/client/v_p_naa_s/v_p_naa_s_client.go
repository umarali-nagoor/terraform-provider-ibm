// Code generated by go-swagger; DO NOT EDIT.

package v_p_naa_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v p naa s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v p naa s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteIkePoliciesID deletes an i k e policy

Deletes an IKE policy. This operation cannot be reversed.
*/
func (a *Client) DeleteIkePoliciesID(params *DeleteIkePoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIkePoliciesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIkePoliciesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIkePoliciesID",
		Method:             "DELETE",
		PathPattern:        "/ike_policies/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIkePoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIkePoliciesIDNoContent), nil

}

/*
DeleteIpsecPoliciesID deletes an ipsec policy

Deletes an IPsec policy. This operation cannot be reversed.
*/
func (a *Client) DeleteIpsecPoliciesID(params *DeleteIpsecPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIpsecPoliciesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIpsecPoliciesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIpsecPoliciesID",
		Method:             "DELETE",
		PathPattern:        "/ipsec_policies/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIpsecPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIpsecPoliciesIDNoContent), nil

}

/*
DeleteVpnGatewaysID deletes a v p n gateway

Deletes a VPN gateway. This operation deletes all the VPN connections associated to this VPN gateway. This operation cannot be reversed.
*/
func (a *Client) DeleteVpnGatewaysID(params *DeleteVpnGatewaysIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVpnGatewaysIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVpnGatewaysIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVpnGatewaysID",
		Method:             "DELETE",
		PathPattern:        "/vpn_gateways/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVpnGatewaysIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVpnGatewaysIDNoContent), nil

}

/*
DeleteVpnGatewaysVpnGatewayIDConnectionsID deletes a v p n connection

Deletes a VPN connection. This operation cannot be reversed.
*/
func (a *Client) DeleteVpnGatewaysVpnGatewayIDConnectionsID(params *DeleteVpnGatewaysVpnGatewayIDConnectionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVpnGatewaysVpnGatewayIDConnectionsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVpnGatewaysVpnGatewayIDConnectionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVpnGatewaysVpnGatewayIDConnectionsID",
		Method:             "DELETE",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVpnGatewaysVpnGatewayIDConnectionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVpnGatewaysVpnGatewayIDConnectionsIDNoContent), nil

}

/*
DeleteVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLength removes a c ID r from a resource

This request removes a CIDR from a resource.
*/
func (a *Client) DeleteVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLength(params *DeleteVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLength",
		Method:             "DELETE",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections/{id}/local_cidrs/{prefix_address}/{prefix_length}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthNoContent), nil

}

/*
DeleteVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLength removes a c ID r from a resource

This request removes a CIDR from a resource.
*/
func (a *Client) DeleteVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLength(params *DeleteVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLength",
		Method:             "DELETE",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections/{id}/peer_cidrs/{prefix_address}/{prefix_length}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthNoContent), nil

}

/*
GetIkePolicies Retrieves a paginated list of all IKE policies belonging to this account.
*/
func (a *Client) GetIkePolicies(params *GetIkePoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIkePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIkePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIkePolicies",
		Method:             "GET",
		PathPattern:        "/ike_policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIkePoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIkePoliciesOK), nil

}

/*
GetIkePoliciesID retrieves the specified i k e policy

This request retrieves a single IKE policy specified by the identifier in the URL.
*/
func (a *Client) GetIkePoliciesID(params *GetIkePoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIkePoliciesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIkePoliciesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIkePoliciesID",
		Method:             "GET",
		PathPattern:        "/ike_policies/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIkePoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIkePoliciesIDOK), nil

}

/*
GetIkePoliciesIDConnections retrieves all the connections that use the specified policy

Retrieves all the connections that use the specified policy.
*/
func (a *Client) GetIkePoliciesIDConnections(params *GetIkePoliciesIDConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIkePoliciesIDConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIkePoliciesIDConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIkePoliciesIDConnections",
		Method:             "GET",
		PathPattern:        "/ike_policies/{id}/connections",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIkePoliciesIDConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIkePoliciesIDConnectionsOK), nil

}

/*
GetIpsecPolicies retrieves all ipsec policies

Retrieves a paginated list of all IPsec policies belonging to this account.
*/
func (a *Client) GetIpsecPolicies(params *GetIpsecPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIpsecPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIpsecPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIpsecPolicies",
		Method:             "GET",
		PathPattern:        "/ipsec_policies",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIpsecPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIpsecPoliciesOK), nil

}

/*
GetIpsecPoliciesID retrieves the specified ipsec policy

This request retrieves a single IPsec policy specified by the identifier in the URL.
*/
func (a *Client) GetIpsecPoliciesID(params *GetIpsecPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIpsecPoliciesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIpsecPoliciesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIpsecPoliciesID",
		Method:             "GET",
		PathPattern:        "/ipsec_policies/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIpsecPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIpsecPoliciesIDOK), nil

}

/*
GetIpsecPoliciesIDConnections retrieves all the connections that use the specified policy

Retrieves all the connections that use the specified policy.
*/
func (a *Client) GetIpsecPoliciesIDConnections(params *GetIpsecPoliciesIDConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIpsecPoliciesIDConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIpsecPoliciesIDConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIpsecPoliciesIDConnections",
		Method:             "GET",
		PathPattern:        "/ipsec_policies/{id}/connections",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIpsecPoliciesIDConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIpsecPoliciesIDConnectionsOK), nil

}

/*
GetVpnGateways retrieves all v p n gateways

Retrieves a paginated list of all VPN gateways belonging to this account.
*/
func (a *Client) GetVpnGateways(params *GetVpnGatewaysParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpnGatewaysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpnGatewaysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpnGateways",
		Method:             "GET",
		PathPattern:        "/vpn_gateways",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpnGatewaysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpnGatewaysOK), nil

}

/*
GetVpnGatewaysID retrieves the specified v p n gateway

This request retrieves a single VPN gateway specified by the identifier in the URL.
*/
func (a *Client) GetVpnGatewaysID(params *GetVpnGatewaysIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpnGatewaysIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpnGatewaysIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpnGatewaysID",
		Method:             "GET",
		PathPattern:        "/vpn_gateways/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpnGatewaysIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpnGatewaysIDOK), nil

}

/*
GetVpnGatewaysVpnGatewayIDConnections retrieves all the connections of a v p n gateway

Retrieves all the connections of a particular VPN gateway.
*/
func (a *Client) GetVpnGatewaysVpnGatewayIDConnections(params *GetVpnGatewaysVpnGatewayIDConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpnGatewaysVpnGatewayIDConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpnGatewaysVpnGatewayIDConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpnGatewaysVpnGatewayIDConnections",
		Method:             "GET",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpnGatewaysVpnGatewayIDConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpnGatewaysVpnGatewayIDConnectionsOK), nil

}

/*
GetVpnGatewaysVpnGatewayIDConnectionsID retrieves the specified v p n connection

This request retrieves a single VPN connection specified by the identifier in the URL.
*/
func (a *Client) GetVpnGatewaysVpnGatewayIDConnectionsID(params *GetVpnGatewaysVpnGatewayIDConnectionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpnGatewaysVpnGatewayIDConnectionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpnGatewaysVpnGatewayIDConnectionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpnGatewaysVpnGatewayIDConnectionsID",
		Method:             "GET",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpnGatewaysVpnGatewayIDConnectionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpnGatewaysVpnGatewayIDConnectionsIDOK), nil

}

/*
GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrs retrieves all local c ID rs for a resource

This request retrieves all local CIDRs for the resource specified by the identifier in the URL.
*/
func (a *Client) GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrs(params *GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrs",
		Method:             "GET",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections/{id}/local_cidrs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsOK), nil

}

/*
GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLength checks if a specific c ID r exists on a specific resource

This request succeeds if a CIDR exists on the resource and fails otherwise.
*/
func (a *Client) GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLength(params *GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLength",
		Method:             "GET",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections/{id}/local_cidrs/{prefix_address}/{prefix_length}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthNoContent), nil

}

/*
GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrs retrieves all peer c ID rs for a resource

This request retrieves all peer CIDRs for the resource specified by the identifier in the URL.
*/
func (a *Client) GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrs(params *GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrs",
		Method:             "GET",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections/{id}/peer_cidrs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsOK), nil

}

/*
GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLength checks if a specific c ID r exists on a specific resource

This request succeeds if a CIDR exists on the resource and fails otherwise.
*/
func (a *Client) GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLength(params *GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthParams, authInfo runtime.ClientAuthInfoWriter) (*GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLength",
		Method:             "GET",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections/{id}/peer_cidrs/{prefix_address}/{prefix_length}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthNoContent), nil

}

/*
PatchIkePoliciesID updates an i k e policy

Updates the properties of an existing IKE policy.
*/
func (a *Client) PatchIkePoliciesID(params *PatchIkePoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchIkePoliciesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchIkePoliciesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchIkePoliciesID",
		Method:             "PATCH",
		PathPattern:        "/ike_policies/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchIkePoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchIkePoliciesIDOK), nil

}

/*
PatchIpsecPoliciesID updates an ipsec policy

Updates the properties of an existing IPsec policy.
*/
func (a *Client) PatchIpsecPoliciesID(params *PatchIpsecPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchIpsecPoliciesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchIpsecPoliciesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchIpsecPoliciesID",
		Method:             "PATCH",
		PathPattern:        "/ipsec_policies/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchIpsecPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchIpsecPoliciesIDOK), nil

}

/*
PatchVpnGatewaysID updates a v p n gateway

Updates the properties of an existing VPN gateway.
*/
func (a *Client) PatchVpnGatewaysID(params *PatchVpnGatewaysIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchVpnGatewaysIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchVpnGatewaysIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchVpnGatewaysID",
		Method:             "PATCH",
		PathPattern:        "/vpn_gateways/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchVpnGatewaysIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchVpnGatewaysIDOK), nil

}

/*
PatchVpnGatewaysVpnGatewayIDConnectionsID updates a v p n connection

Updates the properties of an existing VPN connection.
*/
func (a *Client) PatchVpnGatewaysVpnGatewayIDConnectionsID(params *PatchVpnGatewaysVpnGatewayIDConnectionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchVpnGatewaysVpnGatewayIDConnectionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchVpnGatewaysVpnGatewayIDConnectionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchVpnGatewaysVpnGatewayIDConnectionsID",
		Method:             "PATCH",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchVpnGatewaysVpnGatewayIDConnectionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchVpnGatewaysVpnGatewayIDConnectionsIDOK), nil

}

/*
PostIkePolicies creates an i k e policy

Creates a new IKE policy.
*/
func (a *Client) PostIkePolicies(params *PostIkePoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*PostIkePoliciesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIkePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIkePolicies",
		Method:             "POST",
		PathPattern:        "/ike_policies",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostIkePoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIkePoliciesCreated), nil

}

/*
PostIpsecPolicies creates an ipsec policy

Creates a new IPsec policy.
*/
func (a *Client) PostIpsecPolicies(params *PostIpsecPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*PostIpsecPoliciesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIpsecPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIpsecPolicies",
		Method:             "POST",
		PathPattern:        "/ipsec_policies",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostIpsecPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIpsecPoliciesCreated), nil

}

/*
PostVpnGateways creates a v p n gateway

Creates a new VPN gateway.
*/
func (a *Client) PostVpnGateways(params *PostVpnGatewaysParams, authInfo runtime.ClientAuthInfoWriter) (*PostVpnGatewaysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVpnGatewaysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVpnGateways",
		Method:             "POST",
		PathPattern:        "/vpn_gateways",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVpnGatewaysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVpnGatewaysCreated), nil

}

/*
PostVpnGatewaysVpnGatewayIDConnections creates a v p n connection

Creates a new VPN connection.
*/
func (a *Client) PostVpnGatewaysVpnGatewayIDConnections(params *PostVpnGatewaysVpnGatewayIDConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostVpnGatewaysVpnGatewayIDConnectionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVpnGatewaysVpnGatewayIDConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVpnGatewaysVpnGatewayIDConnections",
		Method:             "POST",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostVpnGatewaysVpnGatewayIDConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVpnGatewaysVpnGatewayIDConnectionsCreated), nil

}

/*
PutVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLength sets a c ID r on a resource

This request adds the specified CIDR to the specified resource. A request body is not required, and if supplied, is ignored. It succeeds if the CIDR already exists on the resource.
*/
func (a *Client) PutVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLength(params *PutVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthParams, authInfo runtime.ClientAuthInfoWriter) (*PutVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLength",
		Method:             "PUT",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections/{id}/local_cidrs/{prefix_address}/{prefix_length}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutVpnGatewaysVpnGatewayIDConnectionsIDLocalCidrsPrefixAddressPrefixLengthNoContent), nil

}

/*
PutVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLength sets a c ID r on a resource

This request adds the specified CIDR to the specified resource. A request body is not required, and if supplied, is ignored. It succeeds if the CIDR already exists on the resource.
*/
func (a *Client) PutVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLength(params *PutVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthParams, authInfo runtime.ClientAuthInfoWriter) (*PutVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLength",
		Method:             "PUT",
		PathPattern:        "/vpn_gateways/{vpn_gateway_id}/connections/{id}/peer_cidrs/{prefix_address}/{prefix_length}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutVpnGatewaysVpnGatewayIDConnectionsIDPeerCidrsPrefixAddressPrefixLengthNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
