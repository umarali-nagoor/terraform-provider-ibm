// Code generated by go-swagger; DO NOT EDIT.

package p_cloud_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/power-go-client/power/models"
)

// PcloudEventsGetsinceReader is a Reader for the PcloudEventsGetsince structure.
type PcloudEventsGetsinceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PcloudEventsGetsinceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPcloudEventsGetsinceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPcloudEventsGetsinceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPcloudEventsGetsinceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPcloudEventsGetsinceOK creates a PcloudEventsGetsinceOK with default headers values
func NewPcloudEventsGetsinceOK() *PcloudEventsGetsinceOK {
	return &PcloudEventsGetsinceOK{}
}

/*PcloudEventsGetsinceOK handles this case with default header values.

OK
*/
type PcloudEventsGetsinceOK struct {
	Payload *models.Events
}

func (o *PcloudEventsGetsinceOK) Error() string {
	return fmt.Sprintf("[GET /pcloud/v1/cloud-instances/{cloud_instance_id}/events][%d] pcloudEventsGetsinceOK  %+v", 200, o.Payload)
}

func (o *PcloudEventsGetsinceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Events)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudEventsGetsinceBadRequest creates a PcloudEventsGetsinceBadRequest with default headers values
func NewPcloudEventsGetsinceBadRequest() *PcloudEventsGetsinceBadRequest {
	return &PcloudEventsGetsinceBadRequest{}
}

/*PcloudEventsGetsinceBadRequest handles this case with default header values.

Bad Request
*/
type PcloudEventsGetsinceBadRequest struct {
	Payload *models.Error
}

func (o *PcloudEventsGetsinceBadRequest) Error() string {
	return fmt.Sprintf("[GET /pcloud/v1/cloud-instances/{cloud_instance_id}/events][%d] pcloudEventsGetsinceBadRequest  %+v", 400, o.Payload)
}

func (o *PcloudEventsGetsinceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudEventsGetsinceInternalServerError creates a PcloudEventsGetsinceInternalServerError with default headers values
func NewPcloudEventsGetsinceInternalServerError() *PcloudEventsGetsinceInternalServerError {
	return &PcloudEventsGetsinceInternalServerError{}
}

/*PcloudEventsGetsinceInternalServerError handles this case with default header values.

Internal Server Error
*/
type PcloudEventsGetsinceInternalServerError struct {
	Payload *models.Error
}

func (o *PcloudEventsGetsinceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /pcloud/v1/cloud-instances/{cloud_instance_id}/events][%d] pcloudEventsGetsinceInternalServerError  %+v", 500, o.Payload)
}

func (o *PcloudEventsGetsinceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
